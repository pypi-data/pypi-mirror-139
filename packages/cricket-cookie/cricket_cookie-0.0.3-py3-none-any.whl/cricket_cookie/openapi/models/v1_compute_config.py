# coding: utf-8
"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401
from typing import TYPE_CHECKING

import six

from cricket_cookie.openapi.configuration import Configuration

if TYPE_CHECKING:
    from datetime import datetime
    from cricket_cookie.openapi.models import *


class V1ComputeConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'env_vars': 'list[str]',
        'instance_type': 'str',
        'max_replicas': 'int',
        'min_replicas': 'int',
        'resources': 'V1Resources'
    }

    attribute_map = {
        'env_vars': 'envVars',
        'instance_type': 'instanceType',
        'max_replicas': 'maxReplicas',
        'min_replicas': 'minReplicas',
        'resources': 'resources'
    }

    def __init__(self,
                 env_vars: 'list[str]' = None,
                 instance_type: 'str' = None,
                 max_replicas: 'int' = None,
                 min_replicas: 'int' = None,
                 resources: 'V1Resources' = None,
                 _configuration=None):  # noqa: E501
        """V1ComputeConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._env_vars = None
        self._instance_type = None
        self._max_replicas = None
        self._min_replicas = None
        self._resources = None
        self.discriminator = None

        if env_vars is not None:
            self.env_vars = env_vars
        if instance_type is not None:
            self.instance_type = instance_type
        if max_replicas is not None:
            self.max_replicas = max_replicas
        if min_replicas is not None:
            self.min_replicas = min_replicas
        if resources is not None:
            self.resources = resources

    @property
    def env_vars(self) -> 'list[str]':
        """Gets the env_vars of this V1ComputeConfig.  # noqa: E501


        :return: The env_vars of this V1ComputeConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars: 'list[str]'):
        """Sets the env_vars of this V1ComputeConfig.


        :param env_vars: The env_vars of this V1ComputeConfig.  # noqa: E501
        :type: list[str]
        """

        self._env_vars = env_vars

    @property
    def instance_type(self) -> 'str':
        """Gets the instance_type of this V1ComputeConfig.  # noqa: E501


        :return: The instance_type of this V1ComputeConfig.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type: 'str'):
        """Sets the instance_type of this V1ComputeConfig.


        :param instance_type: The instance_type of this V1ComputeConfig.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def max_replicas(self) -> 'int':
        """Gets the max_replicas of this V1ComputeConfig.  # noqa: E501


        :return: The max_replicas of this V1ComputeConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas: 'int'):
        """Sets the max_replicas of this V1ComputeConfig.


        :param max_replicas: The max_replicas of this V1ComputeConfig.  # noqa: E501
        :type: int
        """

        self._max_replicas = max_replicas

    @property
    def min_replicas(self) -> 'int':
        """Gets the min_replicas of this V1ComputeConfig.  # noqa: E501


        :return: The min_replicas of this V1ComputeConfig.  # noqa: E501
        :rtype: int
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas: 'int'):
        """Sets the min_replicas of this V1ComputeConfig.


        :param min_replicas: The min_replicas of this V1ComputeConfig.  # noqa: E501
        :type: int
        """

        self._min_replicas = min_replicas

    @property
    def resources(self) -> 'V1Resources':
        """Gets the resources of this V1ComputeConfig.  # noqa: E501


        :return: The resources of this V1ComputeConfig.  # noqa: E501
        :rtype: V1Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources: 'V1Resources'):
        """Sets the resources of this V1ComputeConfig.


        :param resources: The resources of this V1ComputeConfig.  # noqa: E501
        :type: V1Resources
        """

        self._resources = resources

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value
        if issubclass(V1ComputeConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ComputeConfig') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ComputeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other: 'V1ComputeConfig') -> bool:
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ComputeConfig):
            return True

        return self.to_dict() != other.to_dict()
