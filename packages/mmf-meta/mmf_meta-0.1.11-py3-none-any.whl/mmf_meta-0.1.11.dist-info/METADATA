Metadata-Version: 2.1
Name: mmf-meta
Version: 0.1.11
Summary: 
Author: Викторов Андрей Германович
Author-email: andvikt@gmail.com
Requires-Python: >=3.7,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Provides-Extra: PyTurboJPEG
Provides-Extra: XlsxWriter
Provides-Extra: opencv-python
Provides-Extra: openpyxl
Provides-Extra: pandas
Provides-Extra: xlrd
Requires-Dist: PyTurboJPEG (>=1.3,<2.0)
Requires-Dist: XlsxWriter (>=3,<4)
Requires-Dist: click (>=8)
Requires-Dist: opencv-python (>=4.1,<5.0)
Requires-Dist: openpyxl (>=3)
Requires-Dist: pandas (>=0.22,<1.4); python_version >= "3.7" and python_version < "4.0"
Requires-Dist: pandas (>=1.4,<2.0); (python_version >= "3.8" and python_version < "4.0") and (extra == "pandas" or extra == "openpyxl" or extra == "xlrd" or extra == "XlsxWriter")
Requires-Dist: xlrd (>=2)
Project-URL: documentation, https://mm-framework.github.io/docs/
Project-URL: homepage, https://github.com/mm-framework/mmf-meta
Description-Content-Type: text/markdown

# MMF-meta
Эта библиотека - часть проекта Model Management Framework.

Отвечает за оформление пользовательских функций

### Пример использования

```python
import mmf_meta.formats
import pickle
import time
import pandas
import mmf_meta as mmf


@mmf.target(
    description="Супер-функция",
    returns=mmf.DataFrame(out_format=mmf_meta.formats.DataFrameFormat.CSV),
)
def score(
        df: pandas.DataFrame = mmf.DataFrame(description="Описание df"),
        # other: dict = mmf.JsonFile(description="Описание other"),
):
    return df


@mmf.target(
    description="Другая супер-функция",
    returns=mmf.String(),
)
def other(
        inp=mmf.String(description="важный параметр"),
        another=mmf.Integer(description="еще один важный параметр"),
):
    time.sleep(30)
    return inp


mmf.artifact("some_file")


@mmf.artifact("other")
def model():
    with open("other", "br") as f:
        return pickle.load(f)

```

[Подробная документация](https://mm-framework.github.io/docs/)

