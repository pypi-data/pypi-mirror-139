# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssignmentAuditResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'customer_id': 'str',
        'id': 'float',
        'resource_id': 'str',
        'resource_type': 'str',
        'tag_id': 'float',
        'action': 'str',
        'timestamp': 'datetime',
        'changed_by': 'str',
        'username': 'str',
        'request_id': 'str',
        'trace_id': 'str',
        'changes': 'object'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'customer_id': 'customerId',
        'id': 'id',
        'resource_id': 'resourceId',
        'resource_type': 'resourceType',
        'tag_id': 'tagId',
        'action': 'action',
        'timestamp': 'timestamp',
        'changed_by': 'changedBy',
        'username': 'username',
        'request_id': 'requestId',
        'trace_id': 'traceId',
        'changes': 'changes'
    }

    def __init__(self, tenant_id=None, customer_id=None, id=None, resource_id=None, resource_type=None, tag_id=None, action=None, timestamp=None, changed_by=None, username=None, request_id=None, trace_id=None, changes=None):  # noqa: E501
        """AssignmentAuditResponse - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._customer_id = None
        self._id = None
        self._resource_id = None
        self._resource_type = None
        self._tag_id = None
        self._action = None
        self._timestamp = None
        self._changed_by = None
        self._username = None
        self._request_id = None
        self._trace_id = None
        self._changes = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if customer_id is not None:
            self.customer_id = customer_id
        if id is not None:
            self.id = id
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type
        if tag_id is not None:
            self.tag_id = tag_id
        if action is not None:
            self.action = action
        if timestamp is not None:
            self.timestamp = timestamp
        if changed_by is not None:
            self.changed_by = changed_by
        if username is not None:
            self.username = username
        if request_id is not None:
            self.request_id = request_id
        if trace_id is not None:
            self.trace_id = trace_id
        if changes is not None:
            if changes is not None:
                self.changes = changes

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AssignmentAuditResponse.  # noqa: E501

        Your customer tenant id  # noqa: E501

        :return: The tenant_id of this AssignmentAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AssignmentAuditResponse.

        Your customer tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this AssignmentAuditResponse.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def customer_id(self):
        """Gets the customer_id of this AssignmentAuditResponse.  # noqa: E501

        Your customer number  # noqa: E501

        :return: The customer_id of this AssignmentAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AssignmentAuditResponse.

        Your customer number  # noqa: E501

        :param customer_id: The customer_id of this AssignmentAuditResponse.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def id(self):
        """Gets the id of this AssignmentAuditResponse.  # noqa: E501

        The identifier of the audit entry.  # noqa: E501

        :return: The id of this AssignmentAuditResponse.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignmentAuditResponse.

        The identifier of the audit entry.  # noqa: E501

        :param id: The id of this AssignmentAuditResponse.  # noqa: E501
        :type: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def resource_id(self):
        """Gets the resource_id of this AssignmentAuditResponse.  # noqa: E501

        Resource's id  # noqa: E501

        :return: The resource_id of this AssignmentAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AssignmentAuditResponse.

        Resource's id  # noqa: E501

        :param resource_id: The resource_id of this AssignmentAuditResponse.  # noqa: E501
        :type: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this AssignmentAuditResponse.  # noqa: E501

        Resource type. Resource type is one of `instance|image`.  # noqa: E501

        :return: The resource_type of this AssignmentAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AssignmentAuditResponse.

        Resource type. Resource type is one of `instance|image`.  # noqa: E501

        :param resource_type: The resource_type of this AssignmentAuditResponse.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def tag_id(self):
        """Gets the tag_id of this AssignmentAuditResponse.  # noqa: E501

        Tag's id  # noqa: E501

        :return: The tag_id of this AssignmentAuditResponse.  # noqa: E501
        :rtype: float
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this AssignmentAuditResponse.

        Tag's id  # noqa: E501

        :param tag_id: The tag_id of this AssignmentAuditResponse.  # noqa: E501
        :type: float
        """
        if tag_id is None:
            raise ValueError("Invalid value for `tag_id`, must not be `None`")  # noqa: E501

        self._tag_id = tag_id

    @property
    def action(self):
        """Gets the action of this AssignmentAuditResponse.  # noqa: E501

        Audit Action  # noqa: E501

        :return: The action of this AssignmentAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AssignmentAuditResponse.

        Audit Action  # noqa: E501

        :param action: The action of this AssignmentAuditResponse.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["CREATED", "DELETED"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def timestamp(self):
        """Gets the timestamp of this AssignmentAuditResponse.  # noqa: E501

        Audit creation date  # noqa: E501

        :return: The timestamp of this AssignmentAuditResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AssignmentAuditResponse.

        Audit creation date  # noqa: E501

        :param timestamp: The timestamp of this AssignmentAuditResponse.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def changed_by(self):
        """Gets the changed_by of this AssignmentAuditResponse.  # noqa: E501

        User ID  # noqa: E501

        :return: The changed_by of this AssignmentAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._changed_by

    @changed_by.setter
    def changed_by(self, changed_by):
        """Sets the changed_by of this AssignmentAuditResponse.

        User ID  # noqa: E501

        :param changed_by: The changed_by of this AssignmentAuditResponse.  # noqa: E501
        :type: str
        """
        if changed_by is None:
            raise ValueError("Invalid value for `changed_by`, must not be `None`")  # noqa: E501

        self._changed_by = changed_by

    @property
    def username(self):
        """Gets the username of this AssignmentAuditResponse.  # noqa: E501

        User Full Name  # noqa: E501

        :return: The username of this AssignmentAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AssignmentAuditResponse.

        User Full Name  # noqa: E501

        :param username: The username of this AssignmentAuditResponse.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def request_id(self):
        """Gets the request_id of this AssignmentAuditResponse.  # noqa: E501

        Request ID  # noqa: E501

        :return: The request_id of this AssignmentAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AssignmentAuditResponse.

        Request ID  # noqa: E501

        :param request_id: The request_id of this AssignmentAuditResponse.  # noqa: E501
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def trace_id(self):
        """Gets the trace_id of this AssignmentAuditResponse.  # noqa: E501

        Trace ID  # noqa: E501

        :return: The trace_id of this AssignmentAuditResponse.  # noqa: E501
        :rtype: str
        """
        return self._trace_id

    @trace_id.setter
    def trace_id(self, trace_id):
        """Sets the trace_id of this AssignmentAuditResponse.

        Trace ID  # noqa: E501

        :param trace_id: The trace_id of this AssignmentAuditResponse.  # noqa: E501
        :type: str
        """
        if trace_id is None:
            raise ValueError("Invalid value for `trace_id`, must not be `None`")  # noqa: E501

        self._trace_id = trace_id

    @property
    def changes(self):
        """Gets the changes of this AssignmentAuditResponse.  # noqa: E501

        Changes made for a specific Tag  # noqa: E501

        :return: The changes of this AssignmentAuditResponse.  # noqa: E501
        :rtype: object
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this AssignmentAuditResponse.

        Changes made for a specific Tag  # noqa: E501

        :param changes: The changes of this AssignmentAuditResponse.  # noqa: E501
        :type: object
        """

        self._changes = changes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignmentAuditResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentAuditResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
