# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SnapshotResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'customer_id': 'str',
        'snapshot_id': 'str',
        'name': 'str',
        'description': 'str',
        'instance_id': 'int',
        'created_date': 'datetime',
        'auto_delete_date': 'datetime',
        'image_id': 'str',
        'image_name': 'str'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'customer_id': 'customerId',
        'snapshot_id': 'snapshotId',
        'name': 'name',
        'description': 'description',
        'instance_id': 'instanceId',
        'created_date': 'createdDate',
        'auto_delete_date': 'autoDeleteDate',
        'image_id': 'imageId',
        'image_name': 'imageName'
    }

    def __init__(self, tenant_id=None, customer_id=None, snapshot_id=None, name=None, description=None, instance_id=None, created_date=None, auto_delete_date=None, image_id=None, image_name=None):  # noqa: E501
        """SnapshotResponse - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._customer_id = None
        self._snapshot_id = None
        self._name = None
        self._description = None
        self._instance_id = None
        self._created_date = None
        self._auto_delete_date = None
        self._image_id = None
        self._image_name = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if customer_id is not None:
            self.customer_id = customer_id
        if snapshot_id is not None:
            self.snapshot_id = snapshot_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if instance_id is not None:
            self.instance_id = instance_id
        if created_date is not None:
            self.created_date = created_date
        if auto_delete_date is not None:
            self.auto_delete_date = auto_delete_date
        if image_id is not None:
            self.image_id = image_id
        if image_name is not None:
            self.image_name = image_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this SnapshotResponse.  # noqa: E501

        Your customer tenant id  # noqa: E501

        :return: The tenant_id of this SnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this SnapshotResponse.

        Your customer tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this SnapshotResponse.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def customer_id(self):
        """Gets the customer_id of this SnapshotResponse.  # noqa: E501

        Your customer number  # noqa: E501

        :return: The customer_id of this SnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SnapshotResponse.

        Your customer number  # noqa: E501

        :param customer_id: The customer_id of this SnapshotResponse.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this SnapshotResponse.  # noqa: E501

        Snapshot's id  # noqa: E501

        :return: The snapshot_id of this SnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this SnapshotResponse.

        Snapshot's id  # noqa: E501

        :param snapshot_id: The snapshot_id of this SnapshotResponse.  # noqa: E501
        :type: str
        """
        if snapshot_id is None:
            raise ValueError("Invalid value for `snapshot_id`, must not be `None`")  # noqa: E501

        self._snapshot_id = snapshot_id

    @property
    def name(self):
        """Gets the name of this SnapshotResponse.  # noqa: E501

        The name of the snapshot.  # noqa: E501

        :return: The name of this SnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SnapshotResponse.

        The name of the snapshot.  # noqa: E501

        :param name: The name of this SnapshotResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SnapshotResponse.  # noqa: E501

        The description of the snapshot.  # noqa: E501

        :return: The description of this SnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SnapshotResponse.

        The description of the snapshot.  # noqa: E501

        :param description: The description of this SnapshotResponse.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def instance_id(self):
        """Gets the instance_id of this SnapshotResponse.  # noqa: E501

        The instance identifier associated with the snapshot  # noqa: E501

        :return: The instance_id of this SnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SnapshotResponse.

        The instance identifier associated with the snapshot  # noqa: E501

        :param instance_id: The instance_id of this SnapshotResponse.  # noqa: E501
        :type: int
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def created_date(self):
        """Gets the created_date of this SnapshotResponse.  # noqa: E501

        The date when the snapshot was created  # noqa: E501

        :return: The created_date of this SnapshotResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SnapshotResponse.

        The date when the snapshot was created  # noqa: E501

        :param created_date: The created_date of this SnapshotResponse.  # noqa: E501
        :type: datetime
        """
        if created_date is None:
            raise ValueError("Invalid value for `created_date`, must not be `None`")  # noqa: E501

        self._created_date = created_date

    @property
    def auto_delete_date(self):
        """Gets the auto_delete_date of this SnapshotResponse.  # noqa: E501

        The date when the snapshot will be auto-deleted  # noqa: E501

        :return: The auto_delete_date of this SnapshotResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._auto_delete_date

    @auto_delete_date.setter
    def auto_delete_date(self, auto_delete_date):
        """Sets the auto_delete_date of this SnapshotResponse.

        The date when the snapshot will be auto-deleted  # noqa: E501

        :param auto_delete_date: The auto_delete_date of this SnapshotResponse.  # noqa: E501
        :type: datetime
        """
        if auto_delete_date is None:
            raise ValueError("Invalid value for `auto_delete_date`, must not be `None`")  # noqa: E501

        self._auto_delete_date = auto_delete_date

    @property
    def image_id(self):
        """Gets the image_id of this SnapshotResponse.  # noqa: E501

        Image Id the snapshot was taken on  # noqa: E501

        :return: The image_id of this SnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this SnapshotResponse.

        Image Id the snapshot was taken on  # noqa: E501

        :param image_id: The image_id of this SnapshotResponse.  # noqa: E501
        :type: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")  # noqa: E501

        self._image_id = image_id

    @property
    def image_name(self):
        """Gets the image_name of this SnapshotResponse.  # noqa: E501

        Image name the snapshot was taken on  # noqa: E501

        :return: The image_name of this SnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._image_name

    @image_name.setter
    def image_name(self, image_name):
        """Sets the image_name of this SnapshotResponse.

        Image name the snapshot was taken on  # noqa: E501

        :param image_name: The image_name of this SnapshotResponse.  # noqa: E501
        :type: str
        """
        if image_name is None:
            raise ValueError("Invalid value for `image_name`, must not be `None`")  # noqa: E501

        self._image_name = image_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SnapshotResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SnapshotResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
