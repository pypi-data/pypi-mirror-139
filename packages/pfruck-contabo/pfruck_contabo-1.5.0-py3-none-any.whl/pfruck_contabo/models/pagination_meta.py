# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaginationMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size': 'float',
        'total_elements': 'float',
        'total_pages': 'float',
        'page': 'float'
    }

    attribute_map = {
        'size': 'size',
        'total_elements': 'totalElements',
        'total_pages': 'totalPages',
        'page': 'page'
    }

    def __init__(self, size=None, total_elements=None, total_pages=None, page=None):  # noqa: E501
        """PaginationMeta - a model defined in Swagger"""  # noqa: E501
        self._size = None
        self._total_elements = None
        self._total_pages = None
        self._page = None
        self.discriminator = None
        self.size = size
        self.total_elements = total_elements
        self.total_pages = total_pages
        self.page = page

    @property
    def size(self):
        """Gets the size of this PaginationMeta.  # noqa: E501

        Number of elements per page.  # noqa: E501

        :return: The size of this PaginationMeta.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PaginationMeta.

        Number of elements per page.  # noqa: E501

        :param size: The size of this PaginationMeta.  # noqa: E501
        :type: float
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def total_elements(self):
        """Gets the total_elements of this PaginationMeta.  # noqa: E501

        Number of overall matched elements.  # noqa: E501

        :return: The total_elements of this PaginationMeta.  # noqa: E501
        :rtype: float
        """
        return self._total_elements

    @total_elements.setter
    def total_elements(self, total_elements):
        """Sets the total_elements of this PaginationMeta.

        Number of overall matched elements.  # noqa: E501

        :param total_elements: The total_elements of this PaginationMeta.  # noqa: E501
        :type: float
        """
        if total_elements is None:
            raise ValueError("Invalid value for `total_elements`, must not be `None`")  # noqa: E501

        self._total_elements = total_elements

    @property
    def total_pages(self):
        """Gets the total_pages of this PaginationMeta.  # noqa: E501

        Overall number of pages.  # noqa: E501

        :return: The total_pages of this PaginationMeta.  # noqa: E501
        :rtype: float
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this PaginationMeta.

        Overall number of pages.  # noqa: E501

        :param total_pages: The total_pages of this PaginationMeta.  # noqa: E501
        :type: float
        """
        if total_pages is None:
            raise ValueError("Invalid value for `total_pages`, must not be `None`")  # noqa: E501

        self._total_pages = total_pages

    @property
    def page(self):
        """Gets the page of this PaginationMeta.  # noqa: E501

        Current number of page.  # noqa: E501

        :return: The page of this PaginationMeta.  # noqa: E501
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PaginationMeta.

        Current number of page.  # noqa: E501

        :param page: The page of this PaginationMeta.  # noqa: E501
        :type: float
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")  # noqa: E501

        self._page = page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaginationMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
