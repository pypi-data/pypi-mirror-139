# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecretResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'customer_id': 'str',
        'secret_id': 'float',
        'name': 'str',
        'type': 'str',
        'value': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'customer_id': 'customerId',
        'secret_id': 'secretId',
        'name': 'name',
        'type': 'type',
        'value': 'value',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, tenant_id=None, customer_id=None, secret_id=None, name=None, type=None, value=None, created_at=None, updated_at=None):  # noqa: E501
        """SecretResponse - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._customer_id = None
        self._secret_id = None
        self._name = None
        self._type = None
        self._value = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if customer_id is not None:
            self.customer_id = customer_id
        if secret_id is not None:
            self.secret_id = secret_id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def tenant_id(self):
        """Gets the tenant_id of this SecretResponse.  # noqa: E501

        Your customer tenant id  # noqa: E501

        :return: The tenant_id of this SecretResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this SecretResponse.

        Your customer tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this SecretResponse.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def customer_id(self):
        """Gets the customer_id of this SecretResponse.  # noqa: E501

        Your customer number  # noqa: E501

        :return: The customer_id of this SecretResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SecretResponse.

        Your customer number  # noqa: E501

        :param customer_id: The customer_id of this SecretResponse.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def secret_id(self):
        """Gets the secret_id of this SecretResponse.  # noqa: E501

        Secret's id  # noqa: E501

        :return: The secret_id of this SecretResponse.  # noqa: E501
        :rtype: float
        """
        return self._secret_id

    @secret_id.setter
    def secret_id(self, secret_id):
        """Sets the secret_id of this SecretResponse.

        Secret's id  # noqa: E501

        :param secret_id: The secret_id of this SecretResponse.  # noqa: E501
        :type: float
        """
        if secret_id is None:
            raise ValueError("Invalid value for `secret_id`, must not be `None`")  # noqa: E501

        self._secret_id = secret_id

    @property
    def name(self):
        """Gets the name of this SecretResponse.  # noqa: E501

        The name assigned to the password/ssh  # noqa: E501

        :return: The name of this SecretResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecretResponse.

        The name assigned to the password/ssh  # noqa: E501

        :param name: The name of this SecretResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this SecretResponse.  # noqa: E501

        The type of the secret. This will be available only when retrieving secrets  # noqa: E501

        :return: The type of this SecretResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SecretResponse.

        The type of the secret. This will be available only when retrieving secrets  # noqa: E501

        :param type: The type of this SecretResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["password", "ssh"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this SecretResponse.  # noqa: E501

        The value of the secret. This will be available only when retrieving a single secret  # noqa: E501

        :return: The value of this SecretResponse.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SecretResponse.

        The value of the secret. This will be available only when retrieving a single secret  # noqa: E501

        :param value: The value of this SecretResponse.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def created_at(self):
        """Gets the created_at of this SecretResponse.  # noqa: E501

        The creation date for the secret  # noqa: E501

        :return: The created_at of this SecretResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SecretResponse.

        The creation date for the secret  # noqa: E501

        :param created_at: The created_at of this SecretResponse.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SecretResponse.  # noqa: E501

        The last update date for the secret  # noqa: E501

        :return: The updated_at of this SecretResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SecretResponse.

        The last update date for the secret  # noqa: E501

        :param updated_at: The updated_at of this SecretResponse.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecretResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecretResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
