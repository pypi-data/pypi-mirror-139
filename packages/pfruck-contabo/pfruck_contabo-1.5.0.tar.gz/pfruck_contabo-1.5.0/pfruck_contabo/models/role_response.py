# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoleResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_id': 'int',
        'tenant_id': 'str',
        'customer_id': 'str',
        'name': 'str',
        'admin': 'bool',
        'access_all_resources': 'bool',
        'type': 'str',
        'permissions': 'list[PermissionResponse]'
    }

    attribute_map = {
        'role_id': 'roleId',
        'tenant_id': 'tenantId',
        'customer_id': 'customerId',
        'name': 'name',
        'admin': 'admin',
        'access_all_resources': 'accessAllResources',
        'type': 'type',
        'permissions': 'permissions'
    }

    def __init__(self, role_id=None, tenant_id=None, customer_id=None, name=None, admin=None, access_all_resources=None, type=None, permissions=None):  # noqa: E501
        """RoleResponse - a model defined in Swagger"""  # noqa: E501
        self._role_id = None
        self._tenant_id = None
        self._customer_id = None
        self._name = None
        self._admin = None
        self._access_all_resources = None
        self._type = None
        self._permissions = None
        self.discriminator = None
        if role_id is not None:
            self.role_id = role_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if customer_id is not None:
            self.customer_id = customer_id
        if name is not None:
            self.name = name
        if admin is not None:
            self.admin = admin
        if access_all_resources is not None:
            self.access_all_resources = access_all_resources
        if type is not None:
            self.type = type
        if permissions is not None:
            if permissions is not None:
                self.permissions = permissions

    @property
    def role_id(self):
        """Gets the role_id of this RoleResponse.  # noqa: E501

        Role's id  # noqa: E501

        :return: The role_id of this RoleResponse.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this RoleResponse.

        Role's id  # noqa: E501

        :param role_id: The role_id of this RoleResponse.  # noqa: E501
        :type: int
        """
        if role_id is None:
            raise ValueError("Invalid value for `role_id`, must not be `None`")  # noqa: E501

        self._role_id = role_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this RoleResponse.  # noqa: E501

        Your customer tenant id  # noqa: E501

        :return: The tenant_id of this RoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this RoleResponse.

        Your customer tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this RoleResponse.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def customer_id(self):
        """Gets the customer_id of this RoleResponse.  # noqa: E501

        Your customer number  # noqa: E501

        :return: The customer_id of this RoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this RoleResponse.

        Your customer number  # noqa: E501

        :param customer_id: The customer_id of this RoleResponse.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def name(self):
        """Gets the name of this RoleResponse.  # noqa: E501

        Role Name  # noqa: E501

        :return: The name of this RoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoleResponse.

        Role Name  # noqa: E501

        :param name: The name of this RoleResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def admin(self):
        """Gets the admin of this RoleResponse.  # noqa: E501

        Admin  # noqa: E501

        :return: The admin of this RoleResponse.  # noqa: E501
        :rtype: bool
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this RoleResponse.

        Admin  # noqa: E501

        :param admin: The admin of this RoleResponse.  # noqa: E501
        :type: bool
        """
        if admin is None:
            raise ValueError("Invalid value for `admin`, must not be `None`")  # noqa: E501

        self._admin = admin

    @property
    def access_all_resources(self):
        """Gets the access_all_resources of this RoleResponse.  # noqa: E501

        Access All Resources  # noqa: E501

        :return: The access_all_resources of this RoleResponse.  # noqa: E501
        :rtype: bool
        """
        return self._access_all_resources

    @access_all_resources.setter
    def access_all_resources(self, access_all_resources):
        """Sets the access_all_resources of this RoleResponse.

        Access All Resources  # noqa: E501

        :param access_all_resources: The access_all_resources of this RoleResponse.  # noqa: E501
        :type: bool
        """
        if access_all_resources is None:
            raise ValueError("Invalid value for `access_all_resources`, must not be `None`")  # noqa: E501

        self._access_all_resources = access_all_resources

    @property
    def type(self):
        """Gets the type of this RoleResponse.  # noqa: E501

        Role type can be either `default` or `custom`. The `default` roles cannot be modified or deleted  # noqa: E501

        :return: The type of this RoleResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RoleResponse.

        Role type can be either `default` or `custom`. The `default` roles cannot be modified or deleted  # noqa: E501

        :param type: The type of this RoleResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def permissions(self):
        """Gets the permissions of this RoleResponse.  # noqa: E501


        :return: The permissions of this RoleResponse.  # noqa: E501
        :rtype: list[PermissionResponse]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RoleResponse.


        :param permissions: The permissions of this RoleResponse.  # noqa: E501
        :type: list[PermissionResponse]
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
