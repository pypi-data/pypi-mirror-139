# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssignmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'customer_id': 'str',
        'tag_id': 'float',
        'tag_name': 'str',
        'resource_type': 'str',
        'resource_id': 'str',
        'resource_name': 'str'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'customer_id': 'customerId',
        'tag_id': 'tagId',
        'tag_name': 'tagName',
        'resource_type': 'resourceType',
        'resource_id': 'resourceId',
        'resource_name': 'resourceName'
    }

    def __init__(self, tenant_id=None, customer_id=None, tag_id=None, tag_name=None, resource_type=None, resource_id=None, resource_name=None):  # noqa: E501
        """AssignmentResponse - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._customer_id = None
        self._tag_id = None
        self._tag_name = None
        self._resource_type = None
        self._resource_id = None
        self._resource_name = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if customer_id is not None:
            self.customer_id = customer_id
        if tag_id is not None:
            self.tag_id = tag_id
        if tag_name is not None:
            self.tag_name = tag_name
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AssignmentResponse.  # noqa: E501

        Your customer tenant id  # noqa: E501

        :return: The tenant_id of this AssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AssignmentResponse.

        Your customer tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this AssignmentResponse.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def customer_id(self):
        """Gets the customer_id of this AssignmentResponse.  # noqa: E501

        Your customer number  # noqa: E501

        :return: The customer_id of this AssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AssignmentResponse.

        Your customer number  # noqa: E501

        :param customer_id: The customer_id of this AssignmentResponse.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def tag_id(self):
        """Gets the tag_id of this AssignmentResponse.  # noqa: E501

        Tag's id  # noqa: E501

        :return: The tag_id of this AssignmentResponse.  # noqa: E501
        :rtype: float
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this AssignmentResponse.

        Tag's id  # noqa: E501

        :param tag_id: The tag_id of this AssignmentResponse.  # noqa: E501
        :type: float
        """
        if tag_id is None:
            raise ValueError("Invalid value for `tag_id`, must not be `None`")  # noqa: E501

        self._tag_id = tag_id

    @property
    def tag_name(self):
        """Gets the tag_name of this AssignmentResponse.  # noqa: E501

        Tag's name  # noqa: E501

        :return: The tag_name of this AssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this AssignmentResponse.

        Tag's name  # noqa: E501

        :param tag_name: The tag_name of this AssignmentResponse.  # noqa: E501
        :type: str
        """
        if tag_name is None:
            raise ValueError("Invalid value for `tag_name`, must not be `None`")  # noqa: E501

        self._tag_name = tag_name

    @property
    def resource_type(self):
        """Gets the resource_type of this AssignmentResponse.  # noqa: E501

        Resource type. Resource type is one of `instance|image`.  # noqa: E501

        :return: The resource_type of this AssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this AssignmentResponse.

        Resource type. Resource type is one of `instance|image`.  # noqa: E501

        :param resource_type: The resource_type of this AssignmentResponse.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def resource_id(self):
        """Gets the resource_id of this AssignmentResponse.  # noqa: E501

        Resource id  # noqa: E501

        :return: The resource_id of this AssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this AssignmentResponse.

        Resource id  # noqa: E501

        :param resource_id: The resource_id of this AssignmentResponse.  # noqa: E501
        :type: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")  # noqa: E501

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this AssignmentResponse.  # noqa: E501

        Resource name  # noqa: E501

        :return: The resource_name of this AssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this AssignmentResponse.

        Resource name  # noqa: E501

        :param resource_name: The resource_name of this AssignmentResponse.  # noqa: E501
        :type: str
        """
        if resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")  # noqa: E501

        self._resource_name = resource_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
