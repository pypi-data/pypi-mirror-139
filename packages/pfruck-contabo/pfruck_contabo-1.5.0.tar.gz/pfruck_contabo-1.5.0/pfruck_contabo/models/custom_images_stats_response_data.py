# coding: utf-8

"""
    Contabo API


    OpenAPI spec version: 1.0.0
    Contact: support@contabo.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomImagesStatsResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'customer_id': 'str',
        'current_images_count': 'float',
        'total_size_mb': 'float',
        'used_size_mb': 'float',
        'free_size_mb': 'float'
    }

    attribute_map = {
        'tenant_id': 'tenantId',
        'customer_id': 'customerId',
        'current_images_count': 'currentImagesCount',
        'total_size_mb': 'totalSizeMb',
        'used_size_mb': 'usedSizeMb',
        'free_size_mb': 'freeSizeMb'
    }

    def __init__(self, tenant_id=None, customer_id=None, current_images_count=None, total_size_mb=None, used_size_mb=None, free_size_mb=None):  # noqa: E501
        """CustomImagesStatsResponseData - a model defined in Swagger"""  # noqa: E501
        self._tenant_id = None
        self._customer_id = None
        self._current_images_count = None
        self._total_size_mb = None
        self._used_size_mb = None
        self._free_size_mb = None
        self.discriminator = None
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if customer_id is not None:
            self.customer_id = customer_id
        if current_images_count is not None:
            self.current_images_count = current_images_count
        if total_size_mb is not None:
            self.total_size_mb = total_size_mb
        if used_size_mb is not None:
            self.used_size_mb = used_size_mb
        if free_size_mb is not None:
            self.free_size_mb = free_size_mb

    @property
    def tenant_id(self):
        """Gets the tenant_id of this CustomImagesStatsResponseData.  # noqa: E501

        Your customer tenant id  # noqa: E501

        :return: The tenant_id of this CustomImagesStatsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this CustomImagesStatsResponseData.

        Your customer tenant id  # noqa: E501

        :param tenant_id: The tenant_id of this CustomImagesStatsResponseData.  # noqa: E501
        :type: str
        """
        if tenant_id is None:
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomImagesStatsResponseData.  # noqa: E501

        Your customer number  # noqa: E501

        :return: The customer_id of this CustomImagesStatsResponseData.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomImagesStatsResponseData.

        Your customer number  # noqa: E501

        :param customer_id: The customer_id of this CustomImagesStatsResponseData.  # noqa: E501
        :type: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")  # noqa: E501

        self._customer_id = customer_id

    @property
    def current_images_count(self):
        """Gets the current_images_count of this CustomImagesStatsResponseData.  # noqa: E501

        The number of existing custom images  # noqa: E501

        :return: The current_images_count of this CustomImagesStatsResponseData.  # noqa: E501
        :rtype: float
        """
        return self._current_images_count

    @current_images_count.setter
    def current_images_count(self, current_images_count):
        """Sets the current_images_count of this CustomImagesStatsResponseData.

        The number of existing custom images  # noqa: E501

        :param current_images_count: The current_images_count of this CustomImagesStatsResponseData.  # noqa: E501
        :type: float
        """
        if current_images_count is None:
            raise ValueError("Invalid value for `current_images_count`, must not be `None`")  # noqa: E501

        self._current_images_count = current_images_count

    @property
    def total_size_mb(self):
        """Gets the total_size_mb of this CustomImagesStatsResponseData.  # noqa: E501

        Total available disk space in MB  # noqa: E501

        :return: The total_size_mb of this CustomImagesStatsResponseData.  # noqa: E501
        :rtype: float
        """
        return self._total_size_mb

    @total_size_mb.setter
    def total_size_mb(self, total_size_mb):
        """Sets the total_size_mb of this CustomImagesStatsResponseData.

        Total available disk space in MB  # noqa: E501

        :param total_size_mb: The total_size_mb of this CustomImagesStatsResponseData.  # noqa: E501
        :type: float
        """
        if total_size_mb is None:
            raise ValueError("Invalid value for `total_size_mb`, must not be `None`")  # noqa: E501

        self._total_size_mb = total_size_mb

    @property
    def used_size_mb(self):
        """Gets the used_size_mb of this CustomImagesStatsResponseData.  # noqa: E501

        Used disk space in MB  # noqa: E501

        :return: The used_size_mb of this CustomImagesStatsResponseData.  # noqa: E501
        :rtype: float
        """
        return self._used_size_mb

    @used_size_mb.setter
    def used_size_mb(self, used_size_mb):
        """Sets the used_size_mb of this CustomImagesStatsResponseData.

        Used disk space in MB  # noqa: E501

        :param used_size_mb: The used_size_mb of this CustomImagesStatsResponseData.  # noqa: E501
        :type: float
        """
        if used_size_mb is None:
            raise ValueError("Invalid value for `used_size_mb`, must not be `None`")  # noqa: E501

        self._used_size_mb = used_size_mb

    @property
    def free_size_mb(self):
        """Gets the free_size_mb of this CustomImagesStatsResponseData.  # noqa: E501

        Free disk space in MB  # noqa: E501

        :return: The free_size_mb of this CustomImagesStatsResponseData.  # noqa: E501
        :rtype: float
        """
        return self._free_size_mb

    @free_size_mb.setter
    def free_size_mb(self, free_size_mb):
        """Sets the free_size_mb of this CustomImagesStatsResponseData.

        Free disk space in MB  # noqa: E501

        :param free_size_mb: The free_size_mb of this CustomImagesStatsResponseData.  # noqa: E501
        :type: float
        """
        if free_size_mb is None:
            raise ValueError("Invalid value for `free_size_mb`, must not be `None`")  # noqa: E501

        self._free_size_mb = free_size_mb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomImagesStatsResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomImagesStatsResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
