name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v4

  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            md5_command: md5sum
          - os: macos-latest
            md5_command: md5
          - os: windows-latest
            md5_command: md5sum
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Export workspace path
        run: |
          echo $GITHUB_WORKSPACE >> $GITHUB_PATH
      - name: Compute cache key
        id: compute-cache-key
        run: |
           echo "::set-output name=MD5_CACHE_KEY::$(${{ matrix.md5_command }} tox.ini setup.py requirements/*.txt | ${{ matrix.md5_command }} | head -c 32)"
      - name: Restore cache
        uses: actions/cache@v2
        id: restore-cache
        env:
          CACHE_NUMBER: 0 # increase this number to force invalidate cache
        with:
          path: |
            ~/conda_pkgs_dir
            .tox
          key: ${{ runner.os }}-${{ steps.compute-cache-key.outputs.MD5_CACHE_KEY }}-${{ env.CACHE_NUMBER }}
      - name: Install miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: test
          python-version: 3.7
          use-only-tar-bz2: true
          miniconda-version: latest
      - name: Install tox
        run: pip install tox
      - name: Run tests
        env:
          TOX_PARALLEL_NO_SPINNER: 1
        run: |
          tox --parallel --develop
      - name: Archive tox logs on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: tox-logs
          path: tox_logs/*

  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs:
      - commitlint
      - tests
    outputs:
      semantic-version: ${{ steps.get-semantic-version.outputs.VERSION }}
    concurrency: release
    permissions:
      # to grant the user triggering the CI permission to push a new Release
      contents: write
    steps:
      - name: Checkout project
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: 'main'
      - name: Add SSH key for releasing
        uses: webfactory/ssh-agent@v0.5.4
        with:
          # a deploy key is needed because only the Admin users have permission to write to the protected main branch
          # if this CI is triggered by another user's PR, because the main branch is protected the CI won't be able to
          # push the auto-generated commits that python-semantic-release does
          ssh-private-key: |
            ${{ secrets.SP_AUTO_DEPLOY_KEY_UNITY_YAML_PARSER_UNITY_YAML_PARSER }}
      - name: Python Semantic Release
        if: github.repository == 'socialpoint-labs/sp-unity-yaml-parser'
        uses: relekang/python-semantic-release@v7.24.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository_username: __token__
          repository_password: ${{ secrets.PYPI_TOKEN }}