# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._sustainability_operations import build_create_customer_order_line_ghg_report_request, build_get_consumption_request, build_get_consumption_with_automatic_granularity_request, build_get_customer_order_consumption_request, build_get_power_request, build_get_product_consumption_request, build_get_work_order_consumption_request, build_test_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SustainabilityOperations:
    """SustainabilityOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~ignos.api.client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def test(
        self,
        **kwargs: Any
    ) -> str:
        """test.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: str, or the result of cls(response)
        :rtype: str
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[str]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_test_request(
            template_url=self.test.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('str', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    test.metadata = {'url': "/sustainability/test"}  # type: ignore


    @distributed_trace_async
    async def get_consumption(
        self,
        body: Optional["_models.GetConsumption"] = None,
        **kwargs: Any
    ) -> "_models.ConsumptionDto":
        """get_consumption.

        :param body:
        :type body: ~ignos.api.client.models.GetConsumption
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ConsumptionDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.ConsumptionDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ConsumptionDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'GetConsumption')
        else:
            _json = None

        request = build_get_consumption_request(
            content_type=content_type,
            json=_json,
            template_url=self.get_consumption.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ConsumptionDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_consumption.metadata = {'url': "/sustainability/consumption"}  # type: ignore


    @distributed_trace_async
    async def get_consumption_with_automatic_granularity(
        self,
        body: Optional["_models.GetConsumptionAutoGranularity"] = None,
        **kwargs: Any
    ) -> "_models.GranluarConsumptionDto":
        """get_consumption_with_automatic_granularity.

        :param body:
        :type body: ~ignos.api.client.models.GetConsumptionAutoGranularity
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: GranluarConsumptionDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.GranluarConsumptionDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.GranluarConsumptionDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'GetConsumptionAutoGranularity')
        else:
            _json = None

        request = build_get_consumption_with_automatic_granularity_request(
            content_type=content_type,
            json=_json,
            template_url=self.get_consumption_with_automatic_granularity.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('GranluarConsumptionDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_consumption_with_automatic_granularity.metadata = {'url': "/sustainability/consumption/autogranularity"}  # type: ignore


    @distributed_trace_async
    async def get_power(
        self,
        body: Optional["_models.GetPower"] = None,
        **kwargs: Any
    ) -> "_models.PowerDto":
        """get_power.

        :param body:
        :type body: ~ignos.api.client.models.GetPower
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PowerDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.PowerDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PowerDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'GetPower')
        else:
            _json = None

        request = build_get_power_request(
            content_type=content_type,
            json=_json,
            template_url=self.get_power.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('PowerDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_power.metadata = {'url': "/sustainability/power"}  # type: ignore


    @distributed_trace_async
    async def get_customer_order_consumption(
        self,
        external_id: str,
        body: Optional["_models.CustomerOrderConsumptionRequest"] = None,
        **kwargs: Any
    ) -> Any:
        """get_customer_order_consumption.

        :param external_id:
        :type external_id: str
        :param body:
        :type body: ~ignos.api.client.models.CustomerOrderConsumptionRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: any, or the result of cls(response)
        :rtype: any
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'CustomerOrderConsumptionRequest')
        else:
            _json = None

        request = build_get_customer_order_consumption_request(
            external_id=external_id,
            content_type=content_type,
            json=_json,
            template_url=self.get_customer_order_consumption.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_customer_order_consumption.metadata = {'url': "/sustainability/consumption/customerorders/{externalId}"}  # type: ignore


    @distributed_trace_async
    async def get_work_order_consumption(
        self,
        external_id: str,
        **kwargs: Any
    ) -> Any:
        """get_work_order_consumption.

        :param external_id:
        :type external_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: any, or the result of cls(response)
        :rtype: any
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_work_order_consumption_request(
            external_id=external_id,
            template_url=self.get_work_order_consumption.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_work_order_consumption.metadata = {'url': "/sustainability/consumption/workorders/{externalId}"}  # type: ignore


    @distributed_trace_async
    async def get_product_consumption(
        self,
        external_id: str,
        **kwargs: Any
    ) -> Any:
        """get_product_consumption.

        :param external_id:
        :type external_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: any, or the result of cls(response)
        :rtype: any
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Any]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_product_consumption_request(
            external_id=external_id,
            template_url=self.get_product_consumption.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('object', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_product_consumption.metadata = {'url': "/sustainability/consumption/product/{externalId}"}  # type: ignore


    @distributed_trace_async
    async def create_customer_order_line_ghg_report(
        self,
        body: Optional["_models.CreateCustomerOrderLineGhgReport"] = None,
        **kwargs: Any
    ) -> "_models.DownloadDto":
        """create_customer_order_line_ghg_report.

        :param body:
        :type body: ~ignos.api.client.models.CreateCustomerOrderLineGhgReport
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: DownloadDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.DownloadDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.DownloadDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'CreateCustomerOrderLineGhgReport')
        else:
            _json = None

        request = build_create_customer_order_line_ghg_report_request(
            content_type=content_type,
            json=_json,
            template_url=self.create_customer_order_line_ghg_report.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('DownloadDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_customer_order_line_ghg_report.metadata = {'url': "/sustainability/consumption/customerorderlinereport"}  # type: ignore

