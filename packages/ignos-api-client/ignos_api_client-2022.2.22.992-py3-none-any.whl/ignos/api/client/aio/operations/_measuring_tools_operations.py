# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, List, Optional, TypeVar, Union

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._measuring_tools_operations import build_attach_calibration_certificate_request, build_create_manufacturer_request, build_create_measuring_tool_request, build_create_measuring_tool_sub_type_request, build_create_measuring_tool_type_request, build_create_measuring_unit_request, build_delete_calibration_certificate_request, build_delete_measuring_tool_sub_type_request, build_delete_measuring_tool_type_request, build_delete_measuring_unit_request, build_deprecate_tool_request, build_get_calibration_list_request, build_get_measuring_tool_request, build_get_measuring_tool_whitelist_request, build_list_calibrations_request, build_list_manufacturers_request, build_list_measuring_tool_sub_types_request, build_list_measuring_tool_types_request, build_list_measuring_tools_request, build_list_measuring_units_request, build_list_unregistered_tool_values_request, build_register_calibration_request, build_remove_measuring_tool_from_whitelist_request, build_update_measuring_tool_request, build_update_measuring_tool_sub_type_request, build_update_measuring_tool_type_request, build_update_whitelisted_measuring_tool_request, build_whitelist_measuring_tool_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class MeasuringToolsOperations:  # pylint: disable=too-many-public-methods
    """MeasuringToolsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~ignos.api.client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def list_measuring_tools(
        self,
        page: Optional[int] = None,
        page_size: Optional[int] = 100,
        tool_id: Optional[str] = None,
        tool_name: Optional[str] = None,
        type_id: Optional[str] = None,
        sub_type_id: Optional[str] = None,
        order_by: Optional[str] = None,
        sort_direction: Optional[str] = None,
        include_deprecated: Optional[bool] = False,
        **kwargs: Any
    ) -> "_models.MeasuringToolDtoPagedData":
        """list_measuring_tools.

        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param tool_id:
        :type tool_id: str
        :param tool_name:
        :type tool_name: str
        :param type_id:
        :type type_id: str
        :param sub_type_id:
        :type sub_type_id: str
        :param order_by:
        :type order_by: str
        :param sort_direction:
        :type sort_direction: str
        :param include_deprecated:
        :type include_deprecated: bool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDtoPagedData, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDtoPagedData
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolDtoPagedData"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_measuring_tools_request(
            page=page,
            page_size=page_size,
            tool_id=tool_id,
            tool_name=tool_name,
            type_id=type_id,
            sub_type_id=sub_type_id,
            order_by=order_by,
            sort_direction=sort_direction,
            include_deprecated=include_deprecated,
            template_url=self.list_measuring_tools.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolDtoPagedData', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measuring_tools.metadata = {'url': "/measuringtools"}  # type: ignore


    @distributed_trace_async
    async def create_measuring_tool(
        self,
        body: Optional["_models.CreateMeasuringToolRequest"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolDetailDto":
        """create_measuring_tool.

        :param body:
        :type body: ~ignos.api.client.models.CreateMeasuringToolRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolDetailDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'CreateMeasuringToolRequest')
        else:
            _json = None

        request = build_create_measuring_tool_request(
            content_type=content_type,
            json=_json,
            template_url=self.create_measuring_tool.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolDetailDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measuring_tool.metadata = {'url': "/measuringtools"}  # type: ignore


    @distributed_trace_async
    async def update_measuring_tool(
        self,
        id: str,
        body: Optional["_models.UpdateMeasuringToolRequest"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolDetailDto":
        """update_measuring_tool.

        :param id:
        :type id: str
        :param body:
        :type body: ~ignos.api.client.models.UpdateMeasuringToolRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolDetailDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'UpdateMeasuringToolRequest')
        else:
            _json = None

        request = build_update_measuring_tool_request(
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.update_measuring_tool.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolDetailDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measuring_tool.metadata = {'url': "/measuringtools/{id}"}  # type: ignore


    @distributed_trace_async
    async def get_measuring_tool(
        self,
        id: str,
        **kwargs: Any
    ) -> "_models.MeasuringToolDetailDto":
        """get_measuring_tool.

        :param id:
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolDetailDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolDetailDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolDetailDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_measuring_tool_request(
            id=id,
            template_url=self.get_measuring_tool.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolDetailDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measuring_tool.metadata = {'url': "/measuringtools/{id}"}  # type: ignore


    @distributed_trace_async
    async def list_calibrations(
        self,
        id: str,
        **kwargs: Any
    ) -> List["_models.MeasuringToolCalibrationDto"]:
        """list_calibrations.

        :param id:
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasuringToolCalibrationDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasuringToolCalibrationDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.MeasuringToolCalibrationDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_calibrations_request(
            id=id,
            template_url=self.list_calibrations.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasuringToolCalibrationDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_calibrations.metadata = {'url': "/measuringtools/{id}/calibrations"}  # type: ignore


    @distributed_trace_async
    async def register_calibration(
        self,
        id: str,
        body: Optional["_models.RegisterMeasuringToolCalibrationRequest"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolCalibrationDto":
        """register_calibration.

        :param id:
        :type id: str
        :param body:
        :type body: ~ignos.api.client.models.RegisterMeasuringToolCalibrationRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolCalibrationDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolCalibrationDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolCalibrationDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'RegisterMeasuringToolCalibrationRequest')
        else:
            _json = None

        request = build_register_calibration_request(
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.register_calibration.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolCalibrationDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    register_calibration.metadata = {'url': "/measuringtools/{id}/calibrations"}  # type: ignore


    @distributed_trace_async
    async def attach_calibration_certificate(
        self,
        id: str,
        calibration_id: str,
        body: Optional["_models.AttachCalibrationCertificateRequest"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolCalibrationDto":
        """attach_calibration_certificate.

        :param id:
        :type id: str
        :param calibration_id:
        :type calibration_id: str
        :param body:
        :type body: ~ignos.api.client.models.AttachCalibrationCertificateRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolCalibrationDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolCalibrationDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolCalibrationDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'AttachCalibrationCertificateRequest')
        else:
            _json = None

        request = build_attach_calibration_certificate_request(
            id=id,
            calibration_id=calibration_id,
            content_type=content_type,
            json=_json,
            template_url=self.attach_calibration_certificate.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolCalibrationDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    attach_calibration_certificate.metadata = {'url': "/measuringtools/{id}/calibrations/{calibrationId}/attachcertificate"}  # type: ignore


    @distributed_trace_async
    async def delete_calibration_certificate(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        calibration_id: str,
        **kwargs: Any
    ) -> None:
        """delete_calibration_certificate.

        :param id:
        :type id: str
        :param calibration_id:
        :type calibration_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_calibration_certificate_request(
            id=id,
            calibration_id=calibration_id,
            template_url=self.delete_calibration_certificate.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_calibration_certificate.metadata = {'url': "/measuringtools/{id}/calibrations/{calibrationId}/deletecertificate"}  # type: ignore


    @distributed_trace_async
    async def list_manufacturers(
        self,
        **kwargs: Any
    ) -> List["_models.ManufacturerDto"]:
        """list_manufacturers.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of ManufacturerDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.ManufacturerDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.ManufacturerDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_manufacturers_request(
            template_url=self.list_manufacturers.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[ManufacturerDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_manufacturers.metadata = {'url': "/measuringtools/manufacturers"}  # type: ignore


    @distributed_trace_async
    async def create_manufacturer(
        self,
        body: Optional["_models.CreateMeasuringToolManufacturer"] = None,
        **kwargs: Any
    ) -> "_models.ManufacturerDto":
        """create_manufacturer.

        :param body:
        :type body: ~ignos.api.client.models.CreateMeasuringToolManufacturer
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ManufacturerDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.ManufacturerDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ManufacturerDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'CreateMeasuringToolManufacturer')
        else:
            _json = None

        request = build_create_manufacturer_request(
            content_type=content_type,
            json=_json,
            template_url=self.create_manufacturer.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ManufacturerDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_manufacturer.metadata = {'url': "/measuringtools/manufacturers"}  # type: ignore


    @distributed_trace_async
    async def list_measuring_tool_types(
        self,
        **kwargs: Any
    ) -> List["_models.MeasuringToolTypeDto"]:
        """list_measuring_tool_types.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasuringToolTypeDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasuringToolTypeDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.MeasuringToolTypeDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_measuring_tool_types_request(
            template_url=self.list_measuring_tool_types.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasuringToolTypeDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measuring_tool_types.metadata = {'url': "/measuringtools/types"}  # type: ignore


    @distributed_trace_async
    async def create_measuring_tool_type(
        self,
        body: Optional["_models.CreateMeasuringToolType"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolTypeDto":
        """create_measuring_tool_type.

        :param body:
        :type body: ~ignos.api.client.models.CreateMeasuringToolType
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolTypeDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolTypeDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolTypeDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'CreateMeasuringToolType')
        else:
            _json = None

        request = build_create_measuring_tool_type_request(
            content_type=content_type,
            json=_json,
            template_url=self.create_measuring_tool_type.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolTypeDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measuring_tool_type.metadata = {'url': "/measuringtools/types"}  # type: ignore


    @distributed_trace_async
    async def update_measuring_tool_type(
        self,
        id: str,
        body: Optional["_models.UpdateMeasuringToolTypeRequest"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolTypeDto":
        """update_measuring_tool_type.

        :param id:
        :type id: str
        :param body:
        :type body: ~ignos.api.client.models.UpdateMeasuringToolTypeRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolTypeDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolTypeDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolTypeDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'UpdateMeasuringToolTypeRequest')
        else:
            _json = None

        request = build_update_measuring_tool_type_request(
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.update_measuring_tool_type.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolTypeDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measuring_tool_type.metadata = {'url': "/measuringtools/types/{id}"}  # type: ignore


    @distributed_trace_async
    async def delete_measuring_tool_type(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        **kwargs: Any
    ) -> None:
        """delete_measuring_tool_type.

        :param id:
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_measuring_tool_type_request(
            id=id,
            template_url=self.delete_measuring_tool_type.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measuring_tool_type.metadata = {'url': "/measuringtools/types/{id}"}  # type: ignore


    @distributed_trace_async
    async def list_measuring_tool_sub_types(
        self,
        type_id: str,
        **kwargs: Any
    ) -> List["_models.MeasuringToolSubTypeDto"]:
        """list_measuring_tool_sub_types.

        :param type_id:
        :type type_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasuringToolSubTypeDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasuringToolSubTypeDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.MeasuringToolSubTypeDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_measuring_tool_sub_types_request(
            type_id=type_id,
            template_url=self.list_measuring_tool_sub_types.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasuringToolSubTypeDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measuring_tool_sub_types.metadata = {'url': "/measuringtools/types/{typeId}/subtypes"}  # type: ignore


    @distributed_trace_async
    async def create_measuring_tool_sub_type(
        self,
        type_id: str,
        body: Optional["_models.CreateMeasuringToolSubTypeRequest"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolSubTypeDto":
        """create_measuring_tool_sub_type.

        :param type_id:
        :type type_id: str
        :param body:
        :type body: ~ignos.api.client.models.CreateMeasuringToolSubTypeRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolSubTypeDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolSubTypeDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolSubTypeDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'CreateMeasuringToolSubTypeRequest')
        else:
            _json = None

        request = build_create_measuring_tool_sub_type_request(
            type_id=type_id,
            content_type=content_type,
            json=_json,
            template_url=self.create_measuring_tool_sub_type.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolSubTypeDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measuring_tool_sub_type.metadata = {'url': "/measuringtools/types/{typeId}/subtypes"}  # type: ignore


    @distributed_trace_async
    async def update_measuring_tool_sub_type(
        self,
        type_id: str,
        id: str,
        body: Optional["_models.UpdateMeasuringToolSubTypeRequest"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolSubTypeDto":
        """update_measuring_tool_sub_type.

        :param type_id:
        :type type_id: str
        :param id:
        :type id: str
        :param body:
        :type body: ~ignos.api.client.models.UpdateMeasuringToolSubTypeRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolSubTypeDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolSubTypeDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolSubTypeDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'UpdateMeasuringToolSubTypeRequest')
        else:
            _json = None

        request = build_update_measuring_tool_sub_type_request(
            type_id=type_id,
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.update_measuring_tool_sub_type.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolSubTypeDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_measuring_tool_sub_type.metadata = {'url': "/measuringtools/types/{typeId}/subtypes/{id}"}  # type: ignore


    @distributed_trace_async
    async def delete_measuring_tool_sub_type(  # pylint: disable=inconsistent-return-statements
        self,
        type_id: str,
        id: str,
        **kwargs: Any
    ) -> None:
        """delete_measuring_tool_sub_type.

        :param type_id:
        :type type_id: str
        :param id:
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_measuring_tool_sub_type_request(
            type_id=type_id,
            id=id,
            template_url=self.delete_measuring_tool_sub_type.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measuring_tool_sub_type.metadata = {'url': "/measuringtools/types/{typeId}/subtypes/{id}"}  # type: ignore


    @distributed_trace_async
    async def list_measuring_units(
        self,
        **kwargs: Any
    ) -> List["_models.MeasuringUnitDto"]:
        """list_measuring_units.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of MeasuringUnitDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.MeasuringUnitDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.MeasuringUnitDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_measuring_units_request(
            template_url=self.list_measuring_units.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[MeasuringUnitDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_measuring_units.metadata = {'url': "/measuringtools/units"}  # type: ignore


    @distributed_trace_async
    async def create_measuring_unit(
        self,
        body: Optional["_models.CreateMeasuringUnit"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringUnitDto":
        """create_measuring_unit.

        :param body:
        :type body: ~ignos.api.client.models.CreateMeasuringUnit
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringUnitDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringUnitDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringUnitDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'CreateMeasuringUnit')
        else:
            _json = None

        request = build_create_measuring_unit_request(
            content_type=content_type,
            json=_json,
            template_url=self.create_measuring_unit.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringUnitDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_measuring_unit.metadata = {'url': "/measuringtools/units"}  # type: ignore


    @distributed_trace_async
    async def delete_measuring_unit(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        **kwargs: Any
    ) -> None:
        """delete_measuring_unit.

        :param id:
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_measuring_unit_request(
            id=id,
            template_url=self.delete_measuring_unit.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_measuring_unit.metadata = {'url': "/measuringtools/units/{id}"}  # type: ignore


    @distributed_trace_async
    async def get_measuring_tool_whitelist(
        self,
        page: Optional[int] = None,
        page_size: Optional[int] = 100,
        filter: Optional[str] = None,
        order_by: Optional[str] = None,
        sort_direction: Optional[str] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolWhitelistDtoPagedData":
        """get_measuring_tool_whitelist.

        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param filter:
        :type filter: str
        :param order_by:
        :type order_by: str
        :param sort_direction:
        :type sort_direction: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolWhitelistDtoPagedData, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolWhitelistDtoPagedData
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolWhitelistDtoPagedData"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_measuring_tool_whitelist_request(
            page=page,
            page_size=page_size,
            filter=filter,
            order_by=order_by,
            sort_direction=sort_direction,
            template_url=self.get_measuring_tool_whitelist.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolWhitelistDtoPagedData', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_measuring_tool_whitelist.metadata = {'url': "/measuringtools/whitelist"}  # type: ignore


    @distributed_trace_async
    async def whitelist_measuring_tool(
        self,
        body: Optional["_models.WhitelistMeasuringTool"] = None,
        **kwargs: Any
    ) -> "_models.MeasuringToolWhitelistDto":
        """whitelist_measuring_tool.

        :param body:
        :type body: ~ignos.api.client.models.WhitelistMeasuringTool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasuringToolWhitelistDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.MeasuringToolWhitelistDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.MeasuringToolWhitelistDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'WhitelistMeasuringTool')
        else:
            _json = None

        request = build_whitelist_measuring_tool_request(
            content_type=content_type,
            json=_json,
            template_url=self.whitelist_measuring_tool.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('MeasuringToolWhitelistDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    whitelist_measuring_tool.metadata = {'url': "/measuringtools/whitelist"}  # type: ignore


    @distributed_trace_async
    async def update_whitelisted_measuring_tool(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        body: Optional["_models.UpdateWhitelistedMeasuringTool"] = None,
        **kwargs: Any
    ) -> None:
        """update_whitelisted_measuring_tool.

        :param id:
        :type id: str
        :param body:
        :type body: ~ignos.api.client.models.UpdateWhitelistedMeasuringTool
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'UpdateWhitelistedMeasuringTool')
        else:
            _json = None

        request = build_update_whitelisted_measuring_tool_request(
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.update_whitelisted_measuring_tool.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    update_whitelisted_measuring_tool.metadata = {'url': "/measuringtools/whitelist/{id}"}  # type: ignore


    @distributed_trace_async
    async def remove_measuring_tool_from_whitelist(
        self,
        id: str,
        **kwargs: Any
    ) -> Optional["_models.ProblemDetails"]:
        """remove_measuring_tool_from_whitelist.

        :param id:
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ProblemDetails, or the result of cls(response)
        :rtype: ~ignos.api.client.models.ProblemDetails or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.ProblemDetails"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_remove_measuring_tool_from_whitelist_request(
            id=id,
            template_url=self.remove_measuring_tool_from_whitelist.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204, 404]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        if response.status_code == 404:
            deserialized = self._deserialize('ProblemDetails', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    remove_measuring_tool_from_whitelist.metadata = {'url': "/measuringtools/whitelist/{id}"}  # type: ignore


    @distributed_trace_async
    async def list_unregistered_tool_values(
        self,
        **kwargs: Any
    ) -> List["_models.UnregisteredToolValueDto"]:
        """list_unregistered_tool_values.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of UnregisteredToolValueDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.UnregisteredToolValueDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.UnregisteredToolValueDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_unregistered_tool_values_request(
            template_url=self.list_unregistered_tool_values.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[UnregisteredToolValueDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_unregistered_tool_values.metadata = {'url': "/measuringtools/unregistered"}  # type: ignore


    @distributed_trace_async
    async def deprecate_tool(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        body: Optional["_models.DeprecateToolRequest"] = None,
        **kwargs: Any
    ) -> None:
        """deprecate_tool.

        :param id:
        :type id: str
        :param body:
        :type body: ~ignos.api.client.models.DeprecateToolRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'DeprecateToolRequest')
        else:
            _json = None

        request = build_deprecate_tool_request(
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.deprecate_tool.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    deprecate_tool.metadata = {'url': "/measuringtools/deprecated/{id}"}  # type: ignore


    @distributed_trace_async
    async def get_calibration_list(
        self,
        status: Optional[Union[str, "_models.CalibrationListStatus"]] = None,
        **kwargs: Any
    ) -> List["_models.CalibrationListToolDto"]:
        """get_calibration_list.

        :param status:
        :type status: str or ~ignos.api.client.models.CalibrationListStatus
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of CalibrationListToolDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.CalibrationListToolDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.CalibrationListToolDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_calibration_list_request(
            status=status,
            template_url=self.get_calibration_list.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[CalibrationListToolDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_calibration_list.metadata = {'url': "/measuringtools/calibrationlist"}  # type: ignore

