# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, List, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._workorders_operations import build_check_resource_status_request, build_delete_workorder_operation_event_request, build_list_active_workorder_operations_request, build_start_workorder_operation_request, build_stop_workorder_operation_request, build_upsert_workorder_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class WorkordersOperations:
    """WorkordersOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~ignos.api.client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def upsert_workorder(  # pylint: disable=inconsistent-return-statements
        self,
        body: Optional["_models.UpsertWorkorder"] = None,
        **kwargs: Any
    ) -> None:
        """Create or update a workorder.

        Create or update a workorder.

        :param body:
        :type body: ~ignos.api.client.models.UpsertWorkorder
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'UpsertWorkorder')
        else:
            _json = None

        request = build_upsert_workorder_request(
            content_type=content_type,
            json=_json,
            template_url=self.upsert_workorder.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    upsert_workorder.metadata = {'url': "/erp/workorders"}  # type: ignore


    @distributed_trace_async
    async def check_resource_status(
        self,
        id: str,
        **kwargs: Any
    ) -> "_models.ResourceExistDto":
        """check_resource_status.

        :param id:
        :type id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ResourceExistDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.ResourceExistDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ResourceExistDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_check_resource_status_request(
            id=id,
            template_url=self.check_resource_status.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('ResourceExistDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    check_resource_status.metadata = {'url': "/erp/workorders/resources/{id}/status"}  # type: ignore


    @distributed_trace_async
    async def start_workorder_operation(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        body: Optional["_models.StartWorkOperationRequest"] = None,
        **kwargs: Any
    ) -> None:
        """Register start work or setup on a workorder operation.

        Register start work or setup on a workorder operation.

        :param id:
        :type id: str
        :param operation:
        :type operation: int
        :param body:
        :type body: ~ignos.api.client.models.StartWorkOperationRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'StartWorkOperationRequest')
        else:
            _json = None

        request = build_start_workorder_operation_request(
            id=id,
            operation=operation,
            content_type=content_type,
            json=_json,
            template_url=self.start_workorder_operation.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    start_workorder_operation.metadata = {'url': "/erp/workorders/{id}/operations/{operation}/start"}  # type: ignore


    @distributed_trace_async
    async def stop_workorder_operation(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        body: Optional["_models.StopWorkOperationRequest"] = None,
        **kwargs: Any
    ) -> None:
        """Register end work or setup on a workorder operation.

        Register end work or setup on a workorder operation.

        :param id:
        :type id: str
        :param operation:
        :type operation: int
        :param body:
        :type body: ~ignos.api.client.models.StopWorkOperationRequest
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'StopWorkOperationRequest')
        else:
            _json = None

        request = build_stop_workorder_operation_request(
            id=id,
            operation=operation,
            content_type=content_type,
            json=_json,
            template_url=self.stop_workorder_operation.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    stop_workorder_operation.metadata = {'url': "/erp/workorders/{id}/operations/{operation}/stop"}  # type: ignore


    @distributed_trace_async
    async def list_active_workorder_operations(
        self,
        **kwargs: Any
    ) -> List["_models.WorkorderOperationEventDto"]:
        """list_active_workorder_operations.

        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of WorkorderOperationEventDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.WorkorderOperationEventDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.WorkorderOperationEventDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_active_workorder_operations_request(
            template_url=self.list_active_workorder_operations.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[WorkorderOperationEventDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_active_workorder_operations.metadata = {'url': "/erp/workorders/activeworkorderoperations"}  # type: ignore


    @distributed_trace_async
    async def delete_workorder_operation_event(  # pylint: disable=inconsistent-return-statements
        self,
        id: str,
        operation: int,
        event_id: str,
        **kwargs: Any
    ) -> None:
        """delete_workorder_operation_event.

        :param id:
        :type id: str
        :param operation:
        :type operation: int
        :param event_id:
        :type event_id: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_workorder_operation_event_request(
            id=id,
            operation=operation,
            event_id=event_id,
            template_url=self.delete_workorder_operation_event.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    delete_workorder_operation_event.metadata = {'url': "/erp/workorders/{id}/operations/{operation}/events/{eventId}"}  # type: ignore

