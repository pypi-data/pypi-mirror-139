# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, List, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._assets_operations import build_create_asset_request, build_get_asset_by_id_request, build_get_asset_structure_by_id_request, build_list_assets_request, build_search_assets_request, build_update_asset_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class AssetsOperations:
    """AssetsOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~ignos.api.client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace_async
    async def list_assets(
        self,
        external_idprefix: Optional[str] = None,
        name: Optional[str] = None,
        source: Optional[str] = None,
        limit: Optional[int] = 100,
        continuation_token_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> "_models.AssetDtoPagedResult":
        """list_assets.

        :param external_idprefix:
        :type external_idprefix: str
        :param name:
        :type name: str
        :param source:
        :type source: str
        :param limit:
        :type limit: int
        :param continuation_token_parameter:
        :type continuation_token_parameter: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDtoPagedResult, or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDtoPagedResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AssetDtoPagedResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_list_assets_request(
            external_idprefix=external_idprefix,
            name=name,
            source=source,
            limit=limit,
            continuation_token_parameter=continuation_token_parameter,
            template_url=self.list_assets.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetDtoPagedResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_assets.metadata = {'url': "/assets"}  # type: ignore


    @distributed_trace_async
    async def create_asset(
        self,
        body: Optional["_models.CreateAsset"] = None,
        **kwargs: Any
    ) -> "_models.AssetDto":
        """create_asset.

        :param body:
        :type body: ~ignos.api.client.models.CreateAsset
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AssetDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'CreateAsset')
        else:
            _json = None

        request = build_create_asset_request(
            content_type=content_type,
            json=_json,
            template_url=self.create_asset.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create_asset.metadata = {'url': "/assets"}  # type: ignore


    @distributed_trace_async
    async def search_assets(
        self,
        name: Optional[str] = None,
        description: Optional[str] = None,
        limit: Optional[int] = 100,
        **kwargs: Any
    ) -> List["_models.AssetDto"]:
        """search_assets.

        :param name:
        :type name: str
        :param description:
        :type description: str
        :param limit:
        :type limit: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: list of AssetDto, or the result of cls(response)
        :rtype: list[~ignos.api.client.models.AssetDto]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[List["_models.AssetDto"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_search_assets_request(
            name=name,
            description=description,
            limit=limit,
            template_url=self.search_assets.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('[AssetDto]', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    search_assets.metadata = {'url': "/assets/search"}  # type: ignore


    @distributed_trace_async
    async def get_asset_by_id(
        self,
        id: int,
        **kwargs: Any
    ) -> "_models.AssetDto":
        """get_asset_by_id.

        :param id:
        :type id: long
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AssetDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_asset_by_id_request(
            id=id,
            template_url=self.get_asset_by_id.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_asset_by_id.metadata = {'url': "/assets/{id}"}  # type: ignore


    @distributed_trace_async
    async def update_asset(
        self,
        id: str,
        body: Any = None,
        **kwargs: Any
    ) -> "_models.AssetDto":
        """update_asset.

        :param id:
        :type id: str
        :param body:
        :type body: any
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AssetDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        if body is not None:
            _json = self._serialize.body(body, 'object')
        else:
            _json = None

        request = build_update_asset_request(
            id=id,
            content_type=content_type,
            json=_json,
            template_url=self.update_asset.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    update_asset.metadata = {'url': "/assets/{id}"}  # type: ignore


    @distributed_trace_async
    async def get_asset_structure_by_id(
        self,
        id: int,
        **kwargs: Any
    ) -> "_models.AssetStructureDto":
        """get_asset_structure_by_id.

        :param id:
        :type id: long
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: AssetStructureDto, or the result of cls(response)
        :rtype: ~ignos.api.client.models.AssetStructureDto
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.AssetStructureDto"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_asset_structure_by_id_request(
            id=id,
            template_url=self.get_asset_structure_by_id.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = self._deserialize('AssetStructureDto', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_asset_structure_by_id.metadata = {'url': "/assets/{id}/structure"}  # type: ignore

