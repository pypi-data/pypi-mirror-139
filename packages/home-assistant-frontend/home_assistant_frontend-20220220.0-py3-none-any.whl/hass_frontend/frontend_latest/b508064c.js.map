{"version":3,"file":"b508064c.js","mappings":";AA+CA;AAGA;AAUA;AACA;AAkDA;AA3BA;AAGA;AAOA;;;;;;;AAQA;;;;AASA;;AAqBA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;;;AAMA;;AAIA;;;;;AAzBA","sources":["webpack://home-assistant-frontend/./src/panels/config/helpers/ha-config-helpers.ts"],"sourcesContent":["import { mdiPencilOff, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoize from \"memoize-one\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { domainIcon } from \"../../../common/entity/domain_icon\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { showEntityEditorDialog } from \"../entities/show-dialog-entity-editor\";\nimport { configSections } from \"../ha-panel-config\";\nimport { HELPER_DOMAINS } from \"./const\";\nimport { showHelperDetailDialog } from \"./show-dialog-helper-detail\";\n\n@customElement(\"ha-config-helpers\")\nexport class HaConfigHelpers extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _stateItems: HassEntity[] = [];\n\n  private _columns = memoize((narrow, _language): DataTableColumnContainer => {\n    const columns: DataTableColumnContainer = {\n      icon: {\n        title: \"\",\n        label: this.hass.localize(\n          \"ui.panel.config.helpers.picker.headers.icon\"\n        ),\n        type: \"icon\",\n        template: (icon, helper: any) =>\n          icon\n            ? html` <ha-icon .icon=${icon}></ha-icon> `\n            : html`<ha-svg-icon\n                .path=${domainIcon(helper.type)}\n              ></ha-svg-icon>`,\n      },\n      name: {\n        title: this.hass.localize(\n          \"ui.panel.config.helpers.picker.headers.name\"\n        ),\n        sortable: true,\n        filterable: true,\n        grows: true,\n        direction: \"asc\",\n        template: (name, item: any) =>\n          html`\n            ${name}\n            ${narrow\n              ? html` <div class=\"secondary\">${item.entity_id}</div> `\n              : \"\"}\n          `,\n      },\n    };\n    if (!narrow) {\n      columns.entity_id = {\n        title: this.hass.localize(\n          \"ui.panel.config.helpers.picker.headers.entity_id\"\n        ),\n        sortable: true,\n        filterable: true,\n        width: \"25%\",\n      };\n    }\n    columns.type = {\n      title: this.hass.localize(\"ui.panel.config.helpers.picker.headers.type\"),\n      sortable: true,\n      width: \"25%\",\n      filterable: true,\n      template: (type) =>\n        html`\n          ${this.hass.localize(`ui.panel.config.helpers.types.${type}`) || type}\n        `,\n    };\n    columns.editable = {\n      title: \"\",\n      label: this.hass.localize(\n        \"ui.panel.config.helpers.picker.headers.editable\"\n      ),\n      type: \"icon\",\n      template: (editable) => html`\n        ${!editable\n          ? html`\n              <div\n                tabindex=\"0\"\n                style=\"display:inline-block; position: relative;\"\n              >\n                <ha-svg-icon .path=${mdiPencilOff}></ha-svg-icon>\n                <paper-tooltip animation-delay=\"0\" position=\"left\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.entities.picker.status.readonly\"\n                  )}\n                </paper-tooltip>\n              </div>\n            `\n          : \"\"}\n      `,\n    };\n    return columns;\n  });\n\n  private _getItems = memoize((stateItems: HassEntity[]) =>\n    stateItems.map((entityState) => ({\n      id: entityState.entity_id,\n      icon: entityState.attributes.icon,\n      name: entityState.attributes.friendly_name || \"\",\n      entity_id: entityState.entity_id,\n      editable: entityState.attributes.editable,\n      type: computeStateDomain(entityState),\n    }))\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || this._stateItems === undefined) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.automations}\n        .columns=${this._columns(this.narrow, this.hass.language)}\n        .data=${this._getItems(this._stateItems)}\n        @row-click=${this._openEditDialog}\n        hasFab\n        clickable\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.helpers.picker.no_helpers\"\n        )}\n      >\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.helpers.picker.add_helper\"\n          )}\n          extended\n          @click=${this._createHelpler}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._getStates();\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (oldHass && this._stateItems) {\n      this._getStates(oldHass);\n    }\n  }\n\n  private _getStates(oldHass?: HomeAssistant) {\n    let changed = false;\n    const tempStates = Object.values(this.hass!.states).filter((entity) => {\n      if (!HELPER_DOMAINS.includes(computeStateDomain(entity))) {\n        return false;\n      }\n      if (oldHass?.states[entity.entity_id] !== entity) {\n        changed = true;\n      }\n      return true;\n    });\n\n    if (changed || this._stateItems.length !== tempStates.length) {\n      this._stateItems = tempStates;\n    }\n  }\n\n  private async _openEditDialog(ev: CustomEvent): Promise<void> {\n    const entityId = (ev.detail as RowClickedEvent).id;\n    showEntityEditorDialog(this, {\n      entity_id: entityId,\n    });\n  }\n\n  private _createHelpler() {\n    showHelperDetailDialog(this);\n  }\n}\n"],"names":[],"sourceRoot":""}