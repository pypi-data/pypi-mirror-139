{"version":3,"file":"c3713582.js","mappings":";;AAoBA;AAMA;AACA;AACA;;;;;AAKA;;AAIA;;AA3BA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkEA;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;;AAEA;;AAGA;;;AAGA;;AAEA;;;;;AAMA;AAGA;AACA;;;;AAnDA;;;AA6DA;AACA;AACA;AACA;;;AAlGA;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-alarm-panel-card-editor.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"@material/mwc-select/mwc-select\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-select\n        .label=${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`}\n        .value=${this.value}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        <mwc-list-item value=\"remove\"\n          >${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.generic.no_theme\"\n          )}</mwc-list-item\n        >\n        ${Object.keys(this.hass!.themes.themes)\n          .sort()\n          .map(\n            (theme) =>\n              html` <mwc-list-item .value=${theme}>${theme}</mwc-list-item> `\n          )}\n      </mwc-select>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      mwc-select {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value === \"remove\" ? \"\" : ev.target.selected;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-select/mwc-select\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { array, assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-svg-icon\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { AlarmPanelCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-theme-select-editor\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { EditorTarget, EntitiesEditorEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    states: optional(array()),\n    theme: optional(string()),\n  })\n);\n\nconst includeDomains = [\"alarm_control_panel\"];\n\n@customElement(\"hui-alarm-panel-card-editor\")\nexport class HuiAlarmPanelCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: AlarmPanelCardConfig;\n\n  public setConfig(config: AlarmPanelCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _states(): string[] {\n    return this._config!.states || [];\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const states = [\n      \"arm_home\",\n      \"arm_away\",\n      \"arm_night\",\n      \"arm_vacation\",\n      \"arm_custom_bypass\",\n    ];\n\n    return html`\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=${`${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})`}\n          .hass=${this.hass}\n          .value=${this._entity}\n          .configValue=${\"entity\"}\n          .includeDomains=${includeDomains}\n          @change=${this._valueChanged}\n          allow-custom-entity\n        ></ha-entity-picker>\n        <paper-input\n          .label=${`${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.name\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})`}\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <span>Used States</span> ${this._states.map(\n          (entityState, index) => html`\n            <div class=\"states\">\n              <paper-item>${entityState}</paper-item>\n              <ha-svg-icon\n                class=\"deleteState\"\n                .value=${index}\n                .path=${mdiClose}\n                @click=${this._stateRemoved}\n              ></ha-svg-icon>\n            </div>\n          `\n        )}\n        <mwc-select\n          .label=${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.alarm-panel.available_states\"\n          )}\n          @selected=${this._stateAdded}\n          @closed=${stopPropagation}\n          fixedMenuPosition\n          naturalMenuWidth\n        >\n          ${states.map(\n            (entityState) =>\n              html`<mwc-list-item>${entityState}</mwc-list-item> `\n          )}\n        </mwc-select>\n        <hui-theme-select-editor\n          .hass=${this.hass}\n          .value=${this._theme}\n          .configValue=${\"theme\"}\n          @value-changed=${this._valueChanged}\n        ></hui-theme-select-editor>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        .states {\n          display: flex;\n          flex-direction: row;\n        }\n        .deleteState {\n          visibility: hidden;\n        }\n        .states:hover > .deleteState {\n          visibility: visible;\n        }\n        ha-svg-icon {\n          padding-top: 12px;\n        }\n      `,\n    ];\n  }\n\n  private _stateRemoved(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this._states || !this.hass) {\n      return;\n    }\n\n    const target = ev.target! as EditorTarget;\n    const index = Number(target.value);\n    if (index > -1) {\n      const newStates = [...this._states];\n      newStates.splice(index, 1);\n      fireEvent(this, \"config-changed\", {\n        config: {\n          ...this._config,\n          states: newStates,\n        },\n      });\n    }\n  }\n\n  private _stateAdded(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (!target.value || this._states.indexOf(target.value) !== -1) {\n      return;\n    }\n    const newStates = [...this._states];\n    newStates.push(target.value);\n    target.value = \"\";\n    fireEvent(this, \"config-changed\", {\n      config: {\n        ...this._config,\n        states: newStates,\n      },\n    });\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-alarm-panel-card-editor\": HuiAlarmPanelCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}