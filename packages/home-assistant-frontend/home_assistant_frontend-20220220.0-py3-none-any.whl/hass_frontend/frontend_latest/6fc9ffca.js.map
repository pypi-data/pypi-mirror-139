{"version":3,"file":"6fc9ffca.js","mappings":";AA+GA;AAEA;;;AAIA;;AAIA;;AAEA;AAEA;;;AAKA;;AAEA;;;;AAIA;AAEA;AAEA;;;;AAKA;;;AAKA;;;AAMA;AACA;AACA;AACA;AAGA;;;;;;AAOA;AAEA;;;;AAKA;AAGA;AACA;AACA;;;AAGA;;AAEA;AAEA;;;;;;;;AASA;;;;;;AAMA;;;AAIA;AACA;AArGA;;;;;;;;;;;;;;AAZA","sources":["webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-vacuum.ts"],"sourcesContent":["import {\n  mdiFan,\n  mdiHomeMapMarker,\n  mdiMapMarker,\n  mdiPause,\n  mdiPlay,\n  mdiPlayPause,\n  mdiStop,\n  mdiTargetVariant,\n} from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport \"../../../components/ha-attributes\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-icon-button\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport {\n  VacuumEntity,\n  VACUUM_SUPPORT_BATTERY,\n  VACUUM_SUPPORT_CLEAN_SPOT,\n  VACUUM_SUPPORT_FAN_SPEED,\n  VACUUM_SUPPORT_LOCATE,\n  VACUUM_SUPPORT_PAUSE,\n  VACUUM_SUPPORT_RETURN_HOME,\n  VACUUM_SUPPORT_START,\n  VACUUM_SUPPORT_STATUS,\n  VACUUM_SUPPORT_STOP,\n} from \"../../../data/vacuum\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"@material/mwc-select/mwc-select\";\nimport \"@material/mwc-list/mwc-list-item\";\n\ninterface VacuumCommand {\n  translationKey: string;\n  icon: string;\n  serviceName: string;\n  isVisible: (stateObj: VacuumEntity) => boolean;\n}\n\nconst VACUUM_COMMANDS: VacuumCommand[] = [\n  {\n    translationKey: \"start\",\n    icon: mdiPlay,\n    serviceName: \"start\",\n    isVisible: (stateObj) => supportsFeature(stateObj, VACUUM_SUPPORT_START),\n  },\n  {\n    translationKey: \"pause\",\n    icon: mdiPause,\n    serviceName: \"pause\",\n    isVisible: (stateObj) =>\n      // We need also to check if Start is supported because if not we show play-pause\n      supportsFeature(stateObj, VACUUM_SUPPORT_START) &&\n      supportsFeature(stateObj, VACUUM_SUPPORT_PAUSE),\n  },\n  {\n    translationKey: \"start_pause\",\n    icon: mdiPlayPause,\n    serviceName: \"start_pause\",\n    isVisible: (stateObj) =>\n      // If start is supported, we don't show this button\n      !supportsFeature(stateObj, VACUUM_SUPPORT_START) &&\n      supportsFeature(stateObj, VACUUM_SUPPORT_PAUSE),\n  },\n  {\n    translationKey: \"stop\",\n    icon: mdiStop,\n    serviceName: \"stop\",\n    isVisible: (stateObj) => supportsFeature(stateObj, VACUUM_SUPPORT_STOP),\n  },\n  {\n    translationKey: \"clean_spot\",\n    icon: mdiTargetVariant,\n    serviceName: \"clean_spot\",\n    isVisible: (stateObj) =>\n      supportsFeature(stateObj, VACUUM_SUPPORT_CLEAN_SPOT),\n  },\n  {\n    translationKey: \"locate\",\n    icon: mdiMapMarker,\n    serviceName: \"locate\",\n    isVisible: (stateObj) => supportsFeature(stateObj, VACUUM_SUPPORT_LOCATE),\n  },\n  {\n    translationKey: \"return_home\",\n    icon: mdiHomeMapMarker,\n    serviceName: \"return_to_base\",\n    isVisible: (stateObj) =>\n      supportsFeature(stateObj, VACUUM_SUPPORT_RETURN_HOME),\n  },\n];\n\n@customElement(\"more-info-vacuum\")\nclass MoreInfoVacuum extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public stateObj?: VacuumEntity;\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.stateObj) {\n      return html``;\n    }\n\n    const stateObj = this.stateObj;\n\n    const filterExtraAttributes =\n      \"fan_speed,fan_speed_list,status,battery_level,battery_icon\";\n\n    return html`\n      ${stateObj.state !== UNAVAILABLE\n        ? html` <div class=\"flex-horizontal\">\n            ${supportsFeature(stateObj, VACUUM_SUPPORT_STATUS)\n              ? html`\n                  <div>\n                    <span class=\"status-subtitle\"\n                      >${this.hass!.localize(\n                        \"ui.dialogs.more_info_control.vacuum.status\"\n                      )}:\n                    </span>\n                    <span><strong>${stateObj.attributes.status}</strong></span>\n                  </div>\n                `\n              : \"\"}\n            ${supportsFeature(stateObj, VACUUM_SUPPORT_BATTERY) &&\n            stateObj.attributes.battery_level\n              ? html`\n                  <div>\n                    <span>\n                      ${stateObj.attributes.battery_level} %\n                      <ha-icon\n                        .icon=${stateObj.attributes.battery_icon}\n                      ></ha-icon>\n                    </span>\n                  </div>\n                `\n              : \"\"}\n          </div>`\n        : \"\"}\n      ${VACUUM_COMMANDS.some((item) => item.isVisible(stateObj))\n        ? html`\n            <div>\n              <p></p>\n              <div class=\"status-subtitle\">\n                ${this.hass!.localize(\n                  \"ui.dialogs.more_info_control.vacuum.commands\"\n                )}\n              </div>\n              <div class=\"flex-horizontal\">\n                ${VACUUM_COMMANDS.filter((item) =>\n                  item.isVisible(stateObj)\n                ).map(\n                  (item) => html`\n                    <div>\n                      <ha-icon-button\n                        .path=${item.icon}\n                        .entry=${item}\n                        @click=${this.callService}\n                        .label=${this.hass!.localize(\n                          `ui.dialogs.more_info_control.vacuum.${item.translationKey}`\n                        )}\n                        .disabled=${stateObj.state === UNAVAILABLE}\n                      ></ha-icon-button>\n                    </div>\n                  `\n                )}\n              </div>\n            </div>\n          `\n        : \"\"}\n      ${supportsFeature(stateObj, VACUUM_SUPPORT_FAN_SPEED)\n        ? html`\n            <div>\n              <div class=\"flex-horizontal\">\n                <mwc-select\n                  .label=${this.hass!.localize(\n                    \"ui.dialogs.more_info_control.vacuum.fan_speed\"\n                  )}\n                  .disabled=${stateObj.state === UNAVAILABLE}\n                  .value=${stateObj.attributes.fan_speed}\n                  @selected=${this.handleFanSpeedChanged}\n                  fixedMenuPosition\n                  naturalMenuWidth\n                  @closed=${stopPropagation}\n                >\n                  ${stateObj.attributes.fan_speed_list!.map(\n                    (mode) => html`\n                      <mwc-list-item .value=${mode}>${mode}</mwc-list-item>\n                    `\n                  )}\n                </mwc-select>\n                <div\n                  style=\"justify-content: center; align-self: center; padding-top: 1.3em\"\n                >\n                  <span>\n                    <ha-svg-icon .path=${mdiFan}></ha-svg-icon>\n                    ${stateObj.attributes.fan_speed}\n                  </span>\n                </div>\n              </div>\n              <p></p>\n            </div>\n          `\n        : \"\"}\n\n      <ha-attributes\n        .hass=${this.hass}\n        .stateObj=${this.stateObj}\n        .extraFilters=${filterExtraAttributes}\n      ></ha-attributes>\n    `;\n  }\n\n  private callService(ev: CustomEvent) {\n    const entry = (ev.target! as any).entry as VacuumCommand;\n    this.hass.callService(\"vacuum\", entry.serviceName, {\n      entity_id: this.stateObj!.entity_id,\n    });\n  }\n\n  private handleFanSpeedChanged(ev) {\n    const oldVal = this.stateObj!.attributes.fan_speed;\n    const newVal = ev.target.value;\n\n    if (!newVal || oldVal === newVal) {\n      return;\n    }\n\n    this.hass.callService(\"vacuum\", \"set_fan_speed\", {\n      entity_id: this.stateObj!.entity_id,\n      fan_speed: newVal,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        line-height: 1.5;\n      }\n      .status-subtitle {\n        color: var(--secondary-text-color);\n      }\n      .flex-horizontal {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-vacuum\": MoreInfoVacuum;\n  }\n}\n"],"names":[],"sourceRoot":""}