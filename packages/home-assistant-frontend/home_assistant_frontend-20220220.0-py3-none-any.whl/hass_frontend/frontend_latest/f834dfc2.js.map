{"version":3,"file":"f834dfc2.js","mappings":";;AAiCA;AACA;;AAEA;;AA9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACcA;AAMA;AACA;AACA;;;;;AAKA;;AAIA;;AA3BA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsDA;AACA;AACA;AACA;AACA;AAGA;;;AAGA;AAGA;;;AAGA;AACA;AACA;;;;AAIA;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAxCA","sources":["webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-area-card-editor.ts"],"sourcesContent":["import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n      }\n\n      input {\n        text-align: var(--text-field-text-align);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"@material/mwc-select/mwc-select\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-select\n        .label=${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`}\n        .value=${this.value}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        <mwc-list-item value=\"remove\"\n          >${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.generic.no_theme\"\n          )}</mwc-list-item\n        >\n        ${Object.keys(this.hass!.themes.themes)\n          .sort()\n          .map(\n            (theme) =>\n              html` <mwc-list-item .value=${theme}>${theme}</mwc-list-item> `\n          )}\n      </mwc-select>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      mwc-select {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value === \"remove\" ? \"\" : ev.target.selected;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-area-picker\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { AreaCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-theme-select-editor\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { EditorTarget } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport \"../../../../components/ha-formfield\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    area: optional(string()),\n    navigation_path: optional(string()),\n    theme: optional(string()),\n    show_camera: optional(boolean()),\n  })\n);\n\n@customElement(\"hui-area-card-editor\")\nexport class HuiAreaCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: AreaCardConfig;\n\n  public setConfig(config: AreaCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _area(): string {\n    return this._config!.area || \"\";\n  }\n\n  get _navigation_path(): string {\n    return this._config!.navigation_path || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  get _show_camera(): boolean {\n    return this._config!.show_camera || false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <ha-area-picker\n          .hass=${this.hass}\n          .value=${this._area}\n          .placeholder=${this._area}\n          .configValue=${\"area\"}\n          .label=${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.area.name\"\n          )}\n          @value-changed=${this._valueChanged}\n        ></ha-area-picker>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.area.show_camera\"\n          )}\n          .dir=${computeRTLDirection(this.hass)}\n        >\n          <ha-switch\n            .checked=${this._show_camera}\n            .configValue=${\"show_camera\"}\n            @change=${this._valueChanged}\n          ></ha-switch>\n        </ha-formfield>\n        <paper-input\n          .label=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.action-editor.navigation_path\"\n          )}\n          .value=${this._navigation_path}\n          .configValue=${\"navigation_path\"}\n          @value-changed=${this._valueChanged}\n        >\n        </paper-input>\n        <hui-theme-select-editor\n          .hass=${this.hass}\n          .value=${this._theme}\n          .configValue=${\"theme\"}\n          @value-changed=${this._valueChanged}\n        ></hui-theme-select-editor>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value =\n      target.checked !== undefined ? target.checked : ev.detail.value;\n\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n\n    let newConfig;\n    if (target.configValue) {\n      if (!value) {\n        newConfig = { ...this._config };\n        delete newConfig[target.configValue!];\n      } else {\n        newConfig = {\n          ...this._config,\n          [target.configValue!]: value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: newConfig });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-area-card-editor\": HuiAreaCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}