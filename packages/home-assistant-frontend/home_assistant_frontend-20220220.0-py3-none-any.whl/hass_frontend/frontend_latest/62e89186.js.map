{"version":3,"file":"62e89186.js","mappings":";AA8GA;;;;;;AAMA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;;;AASA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;AAKA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAIA;AACA;AACA;;AAEA;AAEA;;;AAIA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAIA;;AAEA;AAEA;AAGA;AACA;AACA;;;;AAIA;AACA;;;;;;AA1LA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;ACwBA;AACA;;AAEA;AACA;;;AAfA;;;;AAAA;;ACGA;AACA;;AAEA;;AA9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnCA","sources":["webpack://home-assistant-frontend/./src/components/ha-base-time-input.ts","webpack://home-assistant-frontend/./src/components/ha-date-input.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/components/ha-time-input.ts"],"sourcesContent":["import { LitElement, html, TemplateResult, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"@material/mwc-select/mwc-select\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"./ha-textfield\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\n\nexport interface TimeChangedEvent {\n  hours: number;\n  minutes: number;\n  seconds: number;\n  milliseconds: number;\n  amPm?: \"AM\" | \"PM\";\n}\n\n@customElement(\"ha-base-time-input\")\nexport class HaBaseTimeInput extends LitElement {\n  /**\n   * Label for the input\n   */\n  @property() label?: string;\n\n  /**\n   * auto validate time inputs\n   */\n  @property({ type: Boolean }) autoValidate = false;\n\n  /**\n   * determines if inputs are required\n   */\n  @property({ type: Boolean }) public required?: boolean;\n\n  /**\n   * 12 or 24 hr format\n   */\n  @property({ type: Number }) format: 12 | 24 = 12;\n\n  /**\n   * disables the inputs\n   */\n  @property({ type: Boolean }) disabled = false;\n\n  /**\n   * hour\n   */\n  @property({ type: Number }) hours = 0;\n\n  /**\n   * minute\n   */\n  @property({ type: Number }) minutes = 0;\n\n  /**\n   * second\n   */\n  @property({ type: Number }) seconds = 0;\n\n  /**\n   * milli second\n   */\n  @property({ type: Number }) milliseconds = 0;\n\n  /**\n   * Label for the hour input\n   */\n  @property() hourLabel = \"\";\n\n  /**\n   * Label for the min input\n   */\n  @property() minLabel = \"\";\n\n  /**\n   * Label for the sec input\n   */\n  @property() secLabel = \"\";\n\n  /**\n   * Label for the milli sec input\n   */\n  @property() millisecLabel = \"\";\n\n  /**\n   * show the sec field\n   */\n  @property({ type: Boolean }) enableSecond = false;\n\n  /**\n   * show the milli sec field\n   */\n  @property({ type: Boolean }) enableMillisecond = false;\n\n  /**\n   * limit hours input\n   */\n  @property({ type: Boolean }) noHoursLimit = false;\n\n  /**\n   * AM or PM\n   */\n  @property() amPm: \"AM\" | \"PM\" = \"AM\";\n\n  /**\n   * Formatted time string\n   */\n  @property() value?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : \"\"}\n      <div class=\"time-input-wrap\">\n        <ha-textfield\n          id=\"hour\"\n          type=\"number\"\n          inputmode=\"numeric\"\n          .value=${this.hours}\n          .label=${this.hourLabel}\n          name=\"hours\"\n          @input=${this._valueChanged}\n          @focus=${this._onFocus}\n          no-spinner\n          .required=${this.required}\n          .autoValidate=${this.autoValidate}\n          maxlength=\"2\"\n          .max=${this._hourMax}\n          min=\"0\"\n          .disabled=${this.disabled}\n          suffix=\":\"\n          class=\"hasSuffix\"\n        >\n        </ha-textfield>\n        <ha-textfield\n          id=\"min\"\n          type=\"number\"\n          inputmode=\"numeric\"\n          .value=${this._formatValue(this.minutes)}\n          .label=${this.minLabel}\n          @input=${this._valueChanged}\n          @focus=${this._onFocus}\n          name=\"minutes\"\n          no-spinner\n          .required=${this.required}\n          .autoValidate=${this.autoValidate}\n          maxlength=\"2\"\n          max=\"59\"\n          min=\"0\"\n          .disabled=${this.disabled}\n          .suffix=${this.enableSecond ? \":\" : \"\"}\n          class=${this.enableSecond ? \"has-suffix\" : \"\"}\n        >\n        </ha-textfield>\n        ${this.enableSecond\n          ? html`<ha-textfield\n              id=\"sec\"\n              type=\"number\"\n              inputmode=\"numeric\"\n              .value=${this._formatValue(this.seconds)}\n              .label=${this.secLabel}\n              @input=${this._valueChanged}\n              @focus=${this._onFocus}\n              name=\"seconds\"\n              no-spinner\n              .required=${this.required}\n              .autoValidate=${this.autoValidate}\n              maxlength=\"2\"\n              max=\"59\"\n              min=\"0\"\n              .disabled=${this.disabled}\n              .suffix=${this.enableMillisecond ? \":\" : \"\"}\n              class=${this.enableMillisecond ? \"has-suffix\" : \"\"}\n            >\n            </ha-textfield>`\n          : \"\"}\n        ${this.enableMillisecond\n          ? html`<ha-textfield\n              id=\"millisec\"\n              type=\"number\"\n              .value=${this._formatValue(this.milliseconds, 3)}\n              .label=${this.millisecLabel}\n              @input=${this._valueChanged}\n              @focus=${this._onFocus}\n              name=\"milliseconds\"\n              no-spinner\n              .required=${this.required}\n              .autoValidate=${this.autoValidate}\n              maxlength=\"3\"\n              max=\"999\"\n              min=\"0\"\n              .disabled=${this.disabled}\n            >\n            </ha-textfield>`\n          : \"\"}\n        ${this.format === 24\n          ? \"\"\n          : html`<mwc-select\n              .required=${this.required}\n              .value=${this.amPm}\n              .disabled=${this.disabled}\n              name=\"amPm\"\n              naturalMenuWidth\n              fixedMenuPosition\n              @selected=${this._valueChanged}\n              @closed=${stopPropagation}\n            >\n              <mwc-list-item value=\"AM\">AM</mwc-list-item>\n              <mwc-list-item value=\"PM\">PM</mwc-list-item>\n            </mwc-select>`}\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev) {\n    this[ev.target.name] =\n      ev.target.name === \"amPm\" ? ev.target.value : Number(ev.target.value);\n    const value: TimeChangedEvent = {\n      hours: this.hours,\n      minutes: this.minutes,\n      seconds: this.seconds,\n      milliseconds: this.milliseconds,\n    };\n    if (this.format === 12) {\n      value.amPm = this.amPm;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  private _onFocus(ev) {\n    ev.target.select();\n  }\n\n  /**\n   * Format time fragments\n   */\n  private _formatValue(value: number, padding = 2) {\n    return value.toString().padStart(padding, \"0\");\n  }\n\n  /**\n   * 24 hour format has a max hr of 23\n   */\n  private get _hourMax() {\n    if (this.noHoursLimit) {\n      return null;\n    }\n    if (this.format === 12) {\n      return 12;\n    }\n    return 23;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n    }\n    .time-input-wrap {\n      display: flex;\n      border-radius: var(--mdc-shape-small, 4px) var(--mdc-shape-small, 4px) 0 0;\n      overflow: hidden;\n      position: relative;\n    }\n    ha-textfield {\n      width: 40px;\n      text-align: center;\n      --mdc-shape-small: 0;\n      --text-field-appearance: none;\n      --text-field-padding: 0 4px;\n      --text-field-suffix-padding-left: 2px;\n      --text-field-suffix-padding-right: 0;\n      --text-field-text-align: center;\n    }\n    ha-textfield.hasSuffix {\n      --text-field-padding: 0 0 0 4px;\n    }\n    ha-textfield:first-child {\n      --text-field-border-top-left-radius: var(--mdc-shape-medium);\n    }\n    ha-textfield:last-child {\n      --text-field-border-top-right-radius: var(--mdc-shape-medium);\n    }\n    mwc-select {\n      --mdc-shape-small: 0;\n      width: 85px;\n    }\n    label {\n      -moz-osx-font-smoothing: grayscale;\n      -webkit-font-smoothing: antialiased;\n      font-family: var(\n        --mdc-typography-body2-font-family,\n        var(--mdc-typography-font-family, Roboto, sans-serif)\n      );\n      font-size: var(--mdc-typography-body2-font-size, 0.875rem);\n      line-height: var(--mdc-typography-body2-line-height, 1.25rem);\n      font-weight: var(--mdc-typography-body2-font-weight, 400);\n      letter-spacing: var(\n        --mdc-typography-body2-letter-spacing,\n        0.0178571429em\n      );\n      text-decoration: var(--mdc-typography-body2-text-decoration, inherit);\n      text-transform: var(--mdc-typography-body2-text-transform, inherit);\n      color: var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87));\n      padding-left: 4px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-base-time-input\": HaBaseTimeInput;\n  }\n}\n","import { mdiCalendar } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { formatDateNumeric } from \"../common/datetime/format_date\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-svg-icon\";\nimport \"./ha-textfield\";\n\nconst loadDatePickerDialog = () => import(\"./ha-dialog-date-picker\");\n\nexport interface datePickerDialogParams {\n  value?: string;\n  min?: string;\n  max?: string;\n  locale?: string;\n  onChange: (value: string) => void;\n}\n\nconst showDatePickerDialog = (\n  element: HTMLElement,\n  dialogParams: datePickerDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"ha-dialog-date-picker\",\n    dialogImport: loadDatePickerDialog,\n    dialogParams,\n  });\n};\n@customElement(\"ha-date-input\")\nexport class HaDateInput extends LitElement {\n  @property({ attribute: false }) public locale!: HomeAssistant[\"locale\"];\n\n  @property() public value?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public label?: string;\n\n  render() {\n    return html`<ha-textfield\n      .label=${this.label}\n      .disabled=${this.disabled}\n      iconTrailing=\"calendar\"\n      @click=${this._openDialog}\n      .value=${this.value\n        ? formatDateNumeric(new Date(this.value), this.locale)\n        : \"\"}\n    >\n      <ha-svg-icon slot=\"trailingIcon\" .path=${mdiCalendar}></ha-svg-icon>\n    </ha-textfield>`;\n  }\n\n  private _openDialog() {\n    if (this.disabled) {\n      return;\n    }\n    showDatePickerDialog(this, {\n      min: \"1970-01-01\",\n      value: this.value,\n      onChange: (value) => this._valueChanged(value),\n      locale: this.locale.language,\n    });\n  }\n\n  private _valueChanged(value: string) {\n    if (this.value !== value) {\n      this.value = value;\n      fireEvent(this, \"change\");\n      fireEvent(this, \"value-changed\", { value });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-date-input\": HaDateInput;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n      }\n\n      input {\n        text-align: var(--text-field-text-align);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { useAmPm } from \"../common/datetime/use_am_pm\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-base-time-input\";\nimport { FrontendLocaleData } from \"../data/translation\";\nimport type { TimeChangedEvent } from \"./ha-base-time-input\";\n\n@customElement(\"ha-time-input\")\nexport class HaTimeInput extends LitElement {\n  @property({ attribute: false }) public locale!: FrontendLocaleData;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean, attribute: \"enable-second\" })\n  public enableSecond = false;\n\n  protected render() {\n    const useAMPM = useAmPm(this.locale);\n\n    const parts = this.value?.split(\":\") || [];\n    let hours = parts[0];\n    const numberHours = Number(parts[0]);\n    if (numberHours && useAMPM && numberHours > 12 && numberHours < 24) {\n      hours = String(numberHours - 12).padStart(2, \"0\");\n    }\n    if (useAMPM && numberHours === 0) {\n      hours = \"12\";\n    }\n\n    return html`\n      <ha-base-time-input\n        .label=${this.label}\n        .hours=${Number(hours)}\n        .minutes=${Number(parts[1])}\n        .seconds=${Number(parts[2])}\n        .format=${useAMPM ? 12 : 24}\n        .amPm=${useAMPM && (numberHours >= 12 ? \"PM\" : \"AM\")}\n        .disabled=${this.disabled}\n        @value-changed=${this._timeChanged}\n        .enableSecond=${this.enableSecond}\n      ></ha-base-time-input>\n    `;\n  }\n\n  private _timeChanged(ev: CustomEvent<{ value: TimeChangedEvent }>) {\n    ev.stopPropagation();\n    const eventValue = ev.detail.value;\n\n    const useAMPM = useAmPm(this.locale);\n    let hours = eventValue.hours || 0;\n    if (eventValue && useAMPM) {\n      if (eventValue.amPm === \"PM\" && hours < 12) {\n        hours += 12;\n      }\n      if (eventValue.amPm === \"AM\" && hours === 12) {\n        hours = 0;\n      }\n    }\n    const value = `${hours.toString().padStart(2, \"0\")}:${\n      eventValue.minutes ? eventValue.minutes.toString().padStart(2, \"0\") : \"00\"\n    }:${\n      eventValue.seconds ? eventValue.seconds.toString().padStart(2, \"0\") : \"00\"\n    }`;\n\n    if (value === this.value) {\n      return;\n    }\n\n    this.value = value;\n    fireEvent(this, \"change\");\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-time-input\": HaTimeInput;\n  }\n}\n"],"names":[],"sourceRoot":""}