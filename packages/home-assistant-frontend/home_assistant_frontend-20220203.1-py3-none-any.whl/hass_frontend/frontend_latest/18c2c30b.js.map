{"version":3,"file":"18c2c30b.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;;;;;AA4BA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;AAEA;;AAEA;AAGA;;AAEA;;AAGA;;;;;;AAxDA;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-picker.ts"],"sourcesContent":["import { mdiCheck, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { customIcons } from \"../data/custom_icons\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport \"./ha-icon\";\nimport \"./ha-icon-button\";\n\ntype IconItem = {\n  icon: string;\n  keywords: string[];\n};\nlet iconItems: IconItem[] = [];\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<IconItem> = (item) => html`<style>\n    paper-icon-item {\n      padding: 0;\n      margin: -8px;\n    }\n    #content {\n      display: flex;\n      align-items: center;\n    }\n    ha-svg-icon {\n      padding-left: 2px;\n      color: var(--secondary-text-color);\n    }\n    :host(:not([selected])) ha-svg-icon {\n      display: none;\n    }\n    :host([selected]) paper-icon-item {\n      margin-left: 0;\n    }\n  </style>\n\n  <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n  <paper-icon-item>\n    <ha-icon .icon=${item.icon} slot=\"item-icon\"></ha-icon>\n    <paper-item-body>${item.icon}</paper-item-body>\n  </paper-icon-item>`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public fallbackPath?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public invalid = false;\n\n  @state() private _opened = false;\n\n  @query(\"vaadin-combo-box-light\", true) private comboBox!: HTMLElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .filteredItems=${iconItems}\n        ${comboBoxRenderer(rowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n        <paper-input\n          .label=${this.label}\n          .placeholder=${this.placeholder}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n          .errorMessage=${this.errorMessage}\n          .invalid=${this.invalid}\n        >\n          ${this._value || this.placeholder\n            ? html`\n                <ha-icon .icon=${this._value || this.placeholder} slot=\"prefix\">\n                </ha-icon>\n              `\n            : this.fallbackPath\n            ? html`<ha-svg-icon\n                .path=${this.fallbackPath}\n                slot=\"prefix\"\n              ></ha-svg-icon>`\n            : \"\"}\n          <ha-icon-button\n            .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n            slot=\"suffix\"\n            class=\"toggle-button\"\n          ></ha-icon-button>\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private async _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    if (this._opened && !iconItems.length) {\n      const iconList = await import(\"../../build/mdi/iconList.json\");\n\n      iconItems = iconList.default.map((icon) => ({\n        icon: `mdi:${icon.name}`,\n        keywords: icon.keywords,\n      }));\n\n      (this.comboBox as any).filteredItems = iconItems;\n\n      Object.keys(customIcons).forEach((iconSet) => {\n        this._loadCustomIconItems(iconSet);\n      });\n    }\n  }\n\n  private async _loadCustomIconItems(iconsetPrefix: string) {\n    try {\n      const getIconList = customIcons[iconsetPrefix].getIconList;\n      if (typeof getIconList !== \"function\") {\n        return;\n      }\n      const iconList = await getIconList();\n      const customIconItems = iconList.map((icon) => ({\n        icon: `${iconsetPrefix}:${icon.name}`,\n        keywords: icon.keywords ?? [],\n      }));\n      iconItems.push(...customIconItems);\n      (this.comboBox as any).filteredItems = iconItems;\n    } catch (e) {\n      // eslint-disable-next-line\n      console.warn(`Unable to load icon list for ${iconsetPrefix} iconset`);\n    }\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    const characterCount = filterString.length;\n    if (characterCount >= 2) {\n      const filteredItems: IconItem[] = [];\n      const filteredItemsByKeywords: IconItem[] = [];\n\n      iconItems.forEach((item) => {\n        if (item.icon.includes(filterString)) {\n          filteredItems.push(item);\n          return;\n        }\n        if (item.keywords.some((t) => t.includes(filterString))) {\n          filteredItemsByKeywords.push(item);\n        }\n      });\n\n      filteredItems.push(...filteredItemsByKeywords);\n\n      if (filteredItems.length > 0) {\n        (this.comboBox as any).filteredItems = filteredItems;\n      } else {\n        (this.comboBox as any).filteredItems = [\n          { icon: filterString, keywords: [] },\n        ];\n      }\n    } else {\n      (this.comboBox as any).filteredItems = iconItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static get styles() {\n    return css`\n      ha-icon,\n      ha-svg-icon {\n        position: relative;\n        bottom: 2px;\n      }\n      *[slot=\"prefix\"] {\n        margin-right: 8px;\n      }\n      paper-input > ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n"],"names":[],"sourceRoot":""}