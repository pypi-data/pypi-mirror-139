{"version":3,"file":"437347ad.js","mappings":";;AAoBA;;;;;AAUA;;AAEA;;;AAGA;;AAIA;;;AA7BA;;;;;;;AAAA;;;AC6FA;AAKA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;AAGA;;AAMA;AACA;AACA;;;;;;AAMA;AAGA;;;AAGA;AACA;AACA;;;;;;AAMA;AAGA;;;AAGA;AACA;AACA;;;;;;;AAOA;AAGA;;;AAGA;AACA;AACA;;;;;;;AAOA;AAGA;;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;;AAhJA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-glance-card-editor.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-dropdown-menu\n        .label=${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`}\n        dynamic-align\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${this.value}\n          attr-for-selected=\"theme\"\n          @iron-select=${this._changed}\n        >\n          <paper-item theme=\"remove\"\n            >${this.hass!.localize(\n              \"ui.panel.lovelace.editor.card.generic.no_theme\"\n            )}</paper-item\n          >\n          ${Object.keys(this.hass!.themes.themes)\n            .sort()\n            .map(\n              (theme) =>\n                html` <paper-item theme=${theme}>${theme}</paper-item> `\n            )}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n      paper-item {\n        cursor: pointer;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.selected === \"\") {\n      return;\n    }\n    this.value = ev.target.selected === \"remove\" ? \"\" : ev.target.selected;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  array,\n  assert,\n  boolean,\n  number,\n  object,\n  optional,\n  string,\n  union,\n  assign,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-switch\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { ConfigEntity, GlanceCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../components/hui-theme-select-editor\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { EditorTarget, EntitiesEditorEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(union([string(), number()])),\n    theme: optional(string()),\n    columns: optional(number()),\n    show_name: optional(boolean()),\n    show_state: optional(boolean()),\n    show_icon: optional(boolean()),\n    state_color: optional(boolean()),\n    entities: array(entitiesConfigStruct),\n  })\n);\n\n@customElement(\"hui-glance-card-editor\")\nexport class HuiGlanceCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: GlanceCardConfig;\n\n  @state() private _configEntities?: ConfigEntity[];\n\n  public setConfig(config: GlanceCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  get _columns(): number {\n    return this._config!.columns || NaN;\n  }\n\n  get _show_name(): boolean {\n    return this._config!.show_name || true;\n  }\n\n  get _show_icon(): boolean {\n    return this._config!.show_icon || true;\n  }\n\n  get _show_state(): boolean {\n    return this._config!.show_state || true;\n  }\n\n  get _state_color(): boolean {\n    return this._config!.state_color ?? true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const dir = computeRTLDirection(this.hass!);\n\n    return html`\n      <div class=\"card-config\">\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <div class=\"side-by-side\">\n          <hui-theme-select-editor\n            .hass=${this.hass}\n            .value=${this._theme}\n            .configValue=${\"theme\"}\n            @value-changed=${this._valueChanged}\n          ></hui-theme-select-editor>\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.glance.columns\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            type=\"number\"\n            .value=${this._columns}\n            .configValue=${\"columns\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n        </div>\n        <div class=\"side-by-side\">\n          <div>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.card.generic.show_name\"\n              )}\n              .dir=${dir}\n            >\n              <ha-switch\n                .checked=${this._config!.show_name !== false}\n                .configValue=${\"show_name\"}\n                @change=${this._valueChanged}\n              ></ha-switch>\n            </ha-formfield>\n          </div>\n          <div>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.card.generic.show_icon\"\n              )}\n              .dir=${dir}\n            >\n              <ha-switch\n                .checked=${this._config!.show_icon !== false}\n                .configValue=${\"show_icon\"}\n                @change=${this._valueChanged}\n              >\n              </ha-switch>\n            </ha-formfield>\n          </div>\n          <div>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.card.generic.show_state\"\n              )}\n              .dir=${dir}\n            >\n              <ha-switch\n                .checked=${this._config!.show_state !== false}\n                .configValue=${\"show_state\"}\n                @change=${this._valueChanged}\n              >\n              </ha-switch>\n            </ha-formfield>\n          </div>\n        </div>\n        <ha-formfield\n          .label=${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.state_color\"\n          )}\n          .dir=${computeRTLDirection(this.hass)}\n        >\n          <ha-switch\n            .checked=${this._config!.state_color}\n            .configValue=${\"state_color\"}\n            @change=${this._valueChanged}\n          ></ha-switch>\n        </ha-formfield>\n      </div>\n      <hui-entity-editor\n        .hass=${this.hass}\n        .entities=${this._configEntities}\n        @entities-changed=${this._valueChanged}\n      ></hui-entity-editor>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (target.configValue && this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (ev.detail && ev.detail.entities) {\n      this._config = { ...this._config, entities: ev.detail.entities };\n\n      this._configEntities = processEditorEntities(this._config.entities);\n    } else if (target.configValue) {\n      if (\n        target.value === \"\" ||\n        (target.type === \"number\" && isNaN(Number(target.value)))\n      ) {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        let value: any = target.value;\n        if (target.type === \"number\") {\n          value = Number(value);\n        }\n        this._config = {\n          ...this._config,\n          [target.configValue!]:\n            target.checked !== undefined ? target.checked : value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-glance-card-editor\": HuiGlanceCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}