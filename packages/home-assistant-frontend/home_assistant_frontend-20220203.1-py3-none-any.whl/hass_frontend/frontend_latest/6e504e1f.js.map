{"version":3,"file":"6e504e1f.js","mappings":";AAwDA;;;AAKA;;AAGA;AACA;AACA;AACA;;;;;AAQA;;AAGA;;AAIA;;AAEA;;AA5BA;AAgCA;;AAKA;;AAGA;AAGA;;AAEA;AAEA;;;;AAKA;;;;;AAKA;;AAEA;AAEA;;;;;AAMA;AACA;AACA;;AAEA;;;AAKA;;;;;;;AAUA;;;;;AAKA;AACA;;AAEA;AAGA;;;;;AAMA;AAEA;;;;;;AAQA;;;;;AAKA;AACA;;AAEA;AAEA;;;;;AAMA;AAEA;;;;AAMA;AACA;AAGA;;;;AAIA;AACA;;;;AAIA","sources":["webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-media_player.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport {\n  mdiLoginVariant,\n  mdiMusicNote,\n  mdiPlayBoxMultiple,\n  mdiSend,\n  mdiVolumeHigh,\n  mdiVolumeMinus,\n  mdiVolumeOff,\n  mdiVolumePlus,\n} from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-paper-dropdown-menu\";\nimport \"../../../components/ha-slider\";\nimport { showMediaBrowserDialog } from \"../../../components/media-player/show-media-browser-dialog\";\nimport { UNAVAILABLE, UNAVAILABLE_STATES, UNKNOWN } from \"../../../data/entity\";\nimport {\n  computeMediaControls,\n  MediaPickedEvent,\n  MediaPlayerEntity,\n  SUPPORT_BROWSE_MEDIA,\n  SUPPORT_PLAY_MEDIA,\n  SUPPORT_SELECT_SOUND_MODE,\n  SUPPORT_SELECT_SOURCE,\n  SUPPORT_VOLUME_BUTTONS,\n  SUPPORT_VOLUME_MUTE,\n  SUPPORT_VOLUME_SET,\n} from \"../../../data/media-player\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"more-info-media_player\")\nclass MoreInfoMediaPlayer extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: MediaPlayerEntity;\n\n  @query(\"#ttsInput\") private _ttsInput?: HTMLInputElement;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html``;\n    }\n\n    const stateObj = this.stateObj;\n    const controls = computeMediaControls(stateObj);\n\n    return html`\n      ${!controls\n        ? \"\"\n        : html`\n            <div class=\"controls\">\n              <div class=\"basic-controls\">\n                ${controls!.map(\n                  (control) => html`\n                    <ha-icon-button\n                      action=${control.action}\n                      @click=${this._handleClick}\n                      .path=${control.icon}\n                      .label=${this.hass.localize(\n                        `ui.card.media_player.${control.action}`\n                      )}\n                    >\n                    </ha-icon-button>\n                  `\n                )}\n              </div>\n              ${supportsFeature(stateObj, SUPPORT_BROWSE_MEDIA)\n                ? html`\n                    <ha-icon-button\n                      .label=${this.hass.localize(\n                        \"ui.card.media_player.browse_media\"\n                      )}\n                      .path=${mdiPlayBoxMultiple}\n                      @click=${this._showBrowseMedia}\n                    ></ha-icon-button>\n                  `\n                : \"\"}\n            </div>\n          `}\n      ${(supportsFeature(stateObj, SUPPORT_VOLUME_SET) ||\n        supportsFeature(stateObj, SUPPORT_VOLUME_BUTTONS)) &&\n      ![UNAVAILABLE, UNKNOWN, \"off\"].includes(stateObj.state)\n        ? html`\n            <div class=\"volume\">\n              ${supportsFeature(stateObj, SUPPORT_VOLUME_MUTE)\n                ? html`\n                    <ha-icon-button\n                      .path=${stateObj.attributes.is_volume_muted\n                        ? mdiVolumeOff\n                        : mdiVolumeHigh}\n                      @click=${this._toggleMute}\n                    ></ha-icon-button>\n                  `\n                : \"\"}\n              ${supportsFeature(stateObj, SUPPORT_VOLUME_BUTTONS)\n                ? html`\n                    <ha-icon-button\n                      action=\"volume_down\"\n                      .path=${mdiVolumeMinus}\n                      @click=${this._handleClick}\n                    ></ha-icon-button>\n                    <ha-icon-button\n                      action=\"volume_up\"\n                      .path=${mdiVolumePlus}\n                      @click=${this._handleClick}\n                    ></ha-icon-button>\n                  `\n                : \"\"}\n              ${supportsFeature(stateObj, SUPPORT_VOLUME_SET)\n                ? html`\n                    <ha-slider\n                      id=\"input\"\n                      pin\n                      ignore-bar-touch\n                      .dir=${computeRTLDirection(this.hass!)}\n                      .value=${Number(stateObj.attributes.volume_level) * 100}\n                      @change=${this._selectedValueChanged}\n                    ></ha-slider>\n                  `\n                : \"\"}\n            </div>\n          `\n        : \"\"}\n      ${![UNAVAILABLE, UNKNOWN, \"off\"].includes(stateObj.state) &&\n      supportsFeature(stateObj, SUPPORT_SELECT_SOURCE) &&\n      stateObj.attributes.source_list?.length\n        ? html`\n            <div class=\"source-input\">\n              <ha-svg-icon\n                class=\"source-input\"\n                .path=${mdiLoginVariant}\n              ></ha-svg-icon>\n              <ha-paper-dropdown-menu\n                .label=${this.hass.localize(\"ui.card.media_player.source\")}\n              >\n                <paper-listbox\n                  slot=\"dropdown-content\"\n                  attr-for-selected=\"item-name\"\n                  .selected=${stateObj.attributes.source!}\n                  @iron-select=${this._handleSourceChanged}\n                >\n                  ${stateObj.attributes.source_list!.map(\n                    (source) =>\n                      html`\n                        <paper-item .itemName=${source}>${source}</paper-item>\n                      `\n                  )}\n                </paper-listbox>\n              </ha-paper-dropdown-menu>\n            </div>\n          `\n        : \"\"}\n      ${supportsFeature(stateObj, SUPPORT_SELECT_SOUND_MODE) &&\n      stateObj.attributes.sound_mode_list?.length\n        ? html`\n            <div class=\"sound-input\">\n              <ha-svg-icon .path=${mdiMusicNote}></ha-svg-icon>\n              <ha-paper-dropdown-menu\n                dynamic-align\n                label-float\n                .label=${this.hass.localize(\"ui.card.media_player.sound_mode\")}\n              >\n                <paper-listbox\n                  slot=\"dropdown-content\"\n                  attr-for-selected=\"item-name\"\n                  .selected=${stateObj.attributes.sound_mode!}\n                  @iron-select=${this._handleSoundModeChanged}\n                >\n                  ${stateObj.attributes.sound_mode_list.map(\n                    (mode) => html`\n                      <paper-item .itemName=${mode}>${mode}</paper-item>\n                    `\n                  )}\n                </paper-listbox>\n              </ha-paper-dropdown-menu>\n            </div>\n          `\n        : \"\"}\n      ${isComponentLoaded(this.hass, \"tts\") &&\n      supportsFeature(stateObj, SUPPORT_PLAY_MEDIA)\n        ? html`\n            <div class=\"tts\">\n              <paper-input\n                id=\"ttsInput\"\n                .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                .label=${this.hass.localize(\n                  \"ui.card.media_player.text_to_speak\"\n                )}\n                @keydown=${this._ttsCheckForEnter}\n              ></paper-input>\n              <ha-icon-button\n                .path=${mdiSend}\n                .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                @click=${this._sendTTS}\n              ></ha-icon-button>\n            </div>\n          </div>\n          `\n        : \"\"}\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-icon-button[action=\"turn_off\"],\n      ha-icon-button[action=\"turn_on\"],\n      ha-slider,\n      #ttsInput {\n        flex-grow: 1;\n      }\n\n      .controls {\n        display: flex;\n        align-items: center;\n      }\n\n      .basic-controls {\n        flex-grow: 1;\n      }\n\n      .volume,\n      .source-input,\n      .sound-input,\n      .tts {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n      }\n\n      .source-input ha-svg-icon,\n      .sound-input ha-svg-icon {\n        padding: 7px;\n        margin-top: 24px;\n      }\n\n      .source-input ha-paper-dropdown-menu,\n      .sound-input ha-paper-dropdown-menu {\n        margin-left: 10px;\n        flex-grow: 1;\n      }\n\n      paper-item {\n        cursor: pointer;\n      }\n    `;\n  }\n\n  private _handleClick(e: MouseEvent): void {\n    this.hass!.callService(\n      \"media_player\",\n      (e.currentTarget! as HTMLElement).getAttribute(\"action\")!,\n      {\n        entity_id: this.stateObj!.entity_id,\n      }\n    );\n  }\n\n  private _toggleMute() {\n    this.hass!.callService(\"media_player\", \"volume_mute\", {\n      entity_id: this.stateObj!.entity_id,\n      is_volume_muted: !this.stateObj!.attributes.is_volume_muted,\n    });\n  }\n\n  private _selectedValueChanged(e: Event): void {\n    this.hass!.callService(\"media_player\", \"volume_set\", {\n      entity_id: this.stateObj!.entity_id,\n      volume_level:\n        Number((e.currentTarget! as HTMLElement).getAttribute(\"value\")!) / 100,\n    });\n  }\n\n  private _handleSourceChanged(e: CustomEvent) {\n    const newVal = e.detail.item.itemName;\n\n    if (!newVal || this.stateObj!.attributes.source === newVal) {\n      return;\n    }\n\n    this.hass.callService(\"media_player\", \"select_source\", {\n      entity_id: this.stateObj!.entity_id,\n      source: newVal,\n    });\n  }\n\n  private _handleSoundModeChanged(e: CustomEvent) {\n    const newVal = e.detail.item.itemName;\n\n    if (!newVal || this.stateObj?.attributes.sound_mode === newVal) {\n      return;\n    }\n\n    this.hass.callService(\"media_player\", \"select_sound_mode\", {\n      entity_id: this.stateObj!.entity_id,\n      sound_mode: newVal,\n    });\n  }\n\n  private _ttsCheckForEnter(e: KeyboardEvent) {\n    if (e.keyCode === 13) this._sendTTS();\n  }\n\n  private _sendTTS() {\n    const ttsInput = this._ttsInput;\n    if (!ttsInput) {\n      return;\n    }\n\n    const services = this.hass.services.tts;\n    const serviceKeys = Object.keys(services).sort();\n\n    const service = serviceKeys.find((key) => key.indexOf(\"_say\") !== -1);\n\n    if (!service) {\n      return;\n    }\n\n    this.hass.callService(\"tts\", service, {\n      entity_id: this.stateObj!.entity_id,\n      message: ttsInput.value,\n    });\n    ttsInput.value = \"\";\n  }\n\n  private _showBrowseMedia(): void {\n    showMediaBrowserDialog(this, {\n      action: \"play\",\n      entityId: this.stateObj!.entity_id,\n      mediaPickedCallback: (pickedMedia: MediaPickedEvent) =>\n        this._playMedia(\n          pickedMedia.item.media_content_id,\n          pickedMedia.item.media_content_type\n        ),\n    });\n  }\n\n  private _playMedia(media_content_id: string, media_content_type: string) {\n    this.hass!.callService(\"media_player\", \"play_media\", {\n      entity_id: this.stateObj!.entity_id,\n      media_content_id,\n      media_content_type,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-media_player\": MoreInfoMediaPlayer;\n  }\n}\n"],"names":[],"sourceRoot":""}