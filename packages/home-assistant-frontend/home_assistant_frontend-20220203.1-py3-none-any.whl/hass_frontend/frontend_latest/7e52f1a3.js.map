{"version":3,"file":"7e52f1a3.js","mappings":";;;;AAqBA;;ACiEA;;;;AAOA;;;;;;;;AAUA;;;;;AAOA;;;;AAOA;;;;;AAOA;;;;AAMA;AACA;;AAEA;;;AAGA;AACA;;;;;AAOA;;;;AAKA;AAEA;AAIA;;;AAIA;AAIA;AAGA;;AAGA;;AAIA;AAEA;;AAKA;;AAIA;;AAKA;;;AAKA;;;AAOA;AAGA;;;AAIA;;;AAOA;AAGA;;;;AAKA;AAGA;AAnDA","sources":["webpack://home-assistant-frontend/./src/components/ha-code-editor.ts","webpack://home-assistant-frontend/./src/panels/developer-tools/template/developer-tools-template.ts"],"sourcesContent":["import type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport { css, CSSResultGroup, PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { loadCodeMirror } from \"../resources/codemirror.ondemand\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property() public error = false;\n\n  @state() private _value = \"\";\n\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.HighlightStyle.get(\n      this.codemirror.state,\n      this._loadedCodeMirror.tags.comment\n    );\n    return !!this.shadowRoot!.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.langCompartment!.reconfigure(\n          this._mode\n        ),\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.dispatch({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._blockKeyboardShortcuts();\n    this._load();\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private async _load(): Promise<void> {\n    this._loadedCodeMirror = await loadCodeMirror();\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions: [\n          this._loadedCodeMirror.lineNumbers(),\n          this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n          this._loadedCodeMirror.history(),\n          this._loadedCodeMirror.highlightSelectionMatches(),\n          this._loadedCodeMirror.highlightActiveLine(),\n          this._loadedCodeMirror.drawSelection(),\n          this._loadedCodeMirror.rectangularSelection(),\n          this._loadedCodeMirror.keymap.of([\n            ...this._loadedCodeMirror.defaultKeymap,\n            ...this._loadedCodeMirror.searchKeymap,\n            ...this._loadedCodeMirror.historyKeymap,\n            ...this._loadedCodeMirror.tabKeyBindings,\n            saveKeyBinding,\n          ] as KeyBinding[]),\n          this._loadedCodeMirror.langCompartment.of(this._mode),\n          this._loadedCodeMirror.theme,\n          this._loadedCodeMirror.Prec.fallback(\n            this._loadedCodeMirror.highlightStyle\n          ),\n          this._loadedCodeMirror.readonlyCompartment.of(\n            this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n          ),\n          this._loadedCodeMirror.EditorView.updateListener.of((update) =>\n            this._onUpdate(update)\n          ),\n        ],\n      }),\n      root: this.shadowRoot!,\n      parent: this.shadowRoot!,\n    });\n  }\n\n  private _blockKeyboardShortcuts() {\n    this.addEventListener(\"keydown\", (ev) => ev.stopPropagation());\n  }\n\n  private _onUpdate(update: ViewUpdate): void {\n    if (!update.docChanged) {\n      return;\n    }\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  // Only Lit 2.0 will use this\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.error-state) div.cm-wrap .cm-gutters {\n        border-color: var(--error-state-color, red);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-code-editor\";\nimport {\n  RenderTemplateResult,\n  subscribeRenderTemplate,\n} from \"../../../data/ws-templates\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\n\nconst DEMO_TEMPLATE = `{## Imitate available variables: ##}\n{% set my_test_json = {\n  \"temperature\": 25,\n  \"unit\": \"Â°C\"\n} %}\n\nThe temperature is {{ my_test_json.temperature }} {{ my_test_json.unit }}.\n\n{% if is_state(\"sun.sun\", \"above_horizon\") -%}\n  The sun rose {{ relative_time(states.sun.sun.last_changed) }} ago.\n{%- else -%}\n  The sun will rise at {{ as_timestamp(state_attr(\"sun.sun\", \"next_rising\")) | timestamp_local }}.\n{%- endif %}\n\nFor loop example getting entity values in the weather domain:\n\n{% for state in states.weather -%}\n  {%- if loop.first %}The {% elif loop.last %} and the {% else %}, the {% endif -%}\n  {{ state.name | lower }} is {{state.state_with_unit}}\n{%- endfor %}.`;\n\n@customElement(\"developer-tools-template\")\nclass HaPanelDevTemplate extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @state() private _error?: string;\n\n  @state() private _rendering = false;\n\n  @state() private _templateResult?: RenderTemplateResult;\n\n  @state() private _unsubRenderTemplate?: Promise<UnsubscribeFunc>;\n\n  private _template = \"\";\n\n  private _inited = false;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this._template && !this._unsubRenderTemplate) {\n      this._subscribeTemplate();\n    }\n  }\n\n  public disconnectedCallback() {\n    this._unsubscribeTemplate();\n  }\n\n  protected firstUpdated() {\n    if (localStorage && localStorage[\"panel-dev-template-template\"]) {\n      this._template = localStorage[\"panel-dev-template-template\"];\n    } else {\n      this._template = DEMO_TEMPLATE;\n    }\n    this._subscribeTemplate();\n    this._inited = true;\n  }\n\n  protected render() {\n    const type = typeof this._templateResult?.result;\n    const resultType =\n      type === \"object\"\n        ? Array.isArray(this._templateResult?.result)\n          ? \"list\"\n          : \"dict\"\n        : type;\n    return html`\n      <div\n        class=\"content ${classMap({\n          layout: !this.narrow,\n          horizontal: !this.narrow,\n        })}\"\n      >\n        <div class=\"edit-pane\">\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.developer-tools.tabs.templates.description\"\n            )}\n          </p>\n          <ul>\n            <li>\n              <a\n                href=\"https://jinja.palletsprojects.com/en/latest/templates/\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                >${this.hass.localize(\n                  \"ui.panel.developer-tools.tabs.templates.jinja_documentation\"\n                )}\n              </a>\n            </li>\n            <li>\n              <a\n                href=${documentationUrl(\n                  this.hass,\n                  \"/docs/configuration/templating/\"\n                )}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                ${this.hass.localize(\n                  \"ui.panel.developer-tools.tabs.templates.template_extensions\"\n                )}</a\n              >\n            </li>\n          </ul>\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.developer-tools.tabs.templates.editor\"\n            )}\n          </p>\n          <ha-code-editor\n            mode=\"jinja2\"\n            .value=${this._template}\n            .error=${this._error}\n            autofocus\n            @value-changed=${this._templateChanged}\n            dir=\"ltr\"\n          ></ha-code-editor>\n          <mwc-button @click=${this._restoreDemo}>\n            ${this.hass.localize(\n              \"ui.panel.developer-tools.tabs.templates.reset\"\n            )}\n          </mwc-button>\n        </div>\n\n        <div class=\"render-pane\">\n          ${this._rendering\n            ? html`<ha-circular-progress\n                class=\"render-spinner\"\n                active\n                size=\"small\"\n              ></ha-circular-progress>`\n            : \"\"}\n          ${this._templateResult\n            ? html`${this.hass.localize(\n                \"ui.panel.developer-tools.tabs.templates.result_type\"\n              )}:\n              ${resultType}`\n            : \"\"}\n          <!-- prettier-ignore -->\n          <pre\n            class=\"rendered ${classMap({\n            error: Boolean(this._error),\n            [resultType]: resultType,\n          })}\"\n          >${this._error}${type === \"object\"\n            ? JSON.stringify(this._templateResult!.result, null, 2)\n            : this._templateResult?.result}</pre>\n          ${this._templateResult?.listeners.time\n            ? html`\n                <p>\n                  ${this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.templates.time\"\n                  )}\n                </p>\n              `\n            : \"\"}\n          ${!this._templateResult?.listeners\n            ? \"\"\n            : this._templateResult.listeners.all\n            ? html`\n                <p class=\"all_listeners\">\n                  ${this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.templates.all_listeners\"\n                  )}\n                </p>\n              `\n            : this._templateResult.listeners.domains.length ||\n              this._templateResult.listeners.entities.length\n            ? html`\n                <p>\n                  ${this.hass.localize(\n                    \"ui.panel.developer-tools.tabs.templates.listeners\"\n                  )}\n                </p>\n                <ul>\n                  ${this._templateResult.listeners.domains\n                    .sort()\n                    .map(\n                      (domain) =>\n                        html`\n                          <li>\n                            <b\n                              >${this.hass.localize(\n                                \"ui.panel.developer-tools.tabs.templates.domain\"\n                              )}</b\n                            >: ${domain}\n                          </li>\n                        `\n                    )}\n                  ${this._templateResult.listeners.entities\n                    .sort()\n                    .map(\n                      (entity_id) =>\n                        html`\n                          <li>\n                            <b\n                              >${this.hass.localize(\n                                \"ui.panel.developer-tools.tabs.templates.entity\"\n                              )}</b\n                            >: ${entity_id}\n                          </li>\n                        `\n                    )}\n                </ul>\n              `\n            : !this._templateResult?.listeners.time\n            ? html` <span class=\"all_listeners\">\n                ${this.hass.localize(\n                  \"ui.panel.developer-tools.tabs.templates.no_listeners\"\n                )}\n              </span>`\n            : html``}\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .content {\n          padding: 16px;\n          direction: ltr;\n        }\n\n        .edit-pane {\n          margin-right: 16px;\n        }\n\n        .edit-pane a {\n          color: var(--primary-color);\n        }\n\n        .horizontal .edit-pane {\n          max-width: 50%;\n        }\n\n        .render-pane {\n          position: relative;\n          max-width: 50%;\n        }\n\n        .render-spinner {\n          position: absolute;\n          top: 8px;\n          right: 8px;\n        }\n\n        .rendered {\n          @apply --paper-font-code1;\n          clear: both;\n          white-space: pre-wrap;\n          background-color: var(--secondary-background-color);\n          padding: 8px;\n        }\n\n        .all_listeners {\n          color: var(--warning-color);\n        }\n\n        .rendered.error {\n          color: var(--error-color);\n        }\n      `,\n    ];\n  }\n\n  private _debounceRender = debounce(\n    () => {\n      this._subscribeTemplate();\n      this._storeTemplate();\n    },\n    500,\n    false\n  );\n\n  private _templateChanged(ev) {\n    this._template = ev.detail.value;\n    if (this._error) {\n      this._error = undefined;\n    }\n    this._debounceRender();\n  }\n\n  private async _subscribeTemplate() {\n    this._rendering = true;\n    await this._unsubscribeTemplate();\n    try {\n      this._unsubRenderTemplate = subscribeRenderTemplate(\n        this.hass.connection,\n        (result) => {\n          this._templateResult = result;\n          this._error = undefined;\n        },\n        {\n          template: this._template,\n          timeout: 3,\n        }\n      );\n      await this._unsubRenderTemplate;\n    } catch (err: any) {\n      this._error = \"Unknown error\";\n      if (err.message) {\n        this._error = err.message;\n        this._templateResult = undefined;\n      }\n      this._unsubRenderTemplate = undefined;\n    } finally {\n      this._rendering = false;\n    }\n  }\n\n  private async _unsubscribeTemplate(): Promise<void> {\n    if (!this._unsubRenderTemplate) {\n      return;\n    }\n\n    try {\n      const unsub = await this._unsubRenderTemplate;\n      unsub();\n      this._unsubRenderTemplate = undefined;\n    } catch (err: any) {\n      if (err.code === \"not_found\") {\n        // If we get here, the connection was probably already closed. Ignore.\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  private _storeTemplate() {\n    if (!this._inited) {\n      return;\n    }\n    localStorage[\"panel-dev-template-template\"] = this._template;\n  }\n\n  private _restoreDemo() {\n    this._template = DEMO_TEMPLATE;\n    this._subscribeTemplate();\n    delete localStorage[\"panel-dev-template-template\"];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"developer-tools-template\": HaPanelDevTemplate;\n  }\n}\n"],"names":[],"sourceRoot":""}