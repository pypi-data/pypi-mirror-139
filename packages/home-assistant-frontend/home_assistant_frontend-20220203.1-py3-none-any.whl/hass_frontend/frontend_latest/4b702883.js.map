{"version":3,"file":"4b702883.js","mappings":";AAsBA;;AAEA;AACA;;;;AAIA;;;;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAzBA;;;;;;;;;;;;;;;;;ACFA;ACuEA;AAGA;AACA;;AAUA;;;AAKA;AACA;;AAEA;AACA;;AAbA;AAkBA;;AAUA;;;AAGA;AACA;;AAEA;;AAVA;AAeA;;AAUA;;;AAGA;AACA;;AAEA;;AAVA;AAeA;;AAGA;;;AAGA;;;AASA;AACA;;;AAGA;;;AATA;;AAeA;AAEA;AAEA;;AAEA;;;;AASA;AACA;;AAEA;;;AATA;;AAeA;AAEA;AAEA;;AAEA;;;;AAUA;AACA;;AAEA;;;AATA;;AAeA;AAEA;;AAGA;;;AAGA;;;;AAUA;AACA;;AAEA;;;AATA;;AAgBA;AAEA;;AAGA;;;AAGA;;;;AAUA;AACA;;AAEA;;;AATA;;AAeA;AA3MA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/CA;AC8FA;;AAGA;AAGA;AAIA;AAGA;;;AAKA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAGA;;AAEA;AAGA;;;;;AAOA;AACA;;AAEA;AAEA;AACA;;;;AAOA;;AAGA;AACA;AACA;;AAIA;AACA;;AAEA;AAEA;AACA;AACA;;;;AAKA;AACA;AACA;;;;;AAKA;;;AAKA;AASA;AAGA;;;;;AAOA;AAEA;;;;AAMA;;AAIA;AAEA;AAGA;AAGA;AAGA;;AAGA;AACA;AACA;AACA;AAGA;;AAEA;;;;;AAMA;AACA;;AAGA;;;AAGA;AACA;;AAEA;;;AA1OA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AC2BA;;AAIA;AACA;;;;;;AAMA;;;;;AAKA;;AAEA;;;AAIA;;AAIA;;AAEA;;;AAIA;AACA;AACA;;;;AAIA;;;AAKA;;AAGA;AACA;;;;;;AAOA;;;;;AAKA;;AAlGA;AA6GA;AAOA;;AAIA;AAMA;;;AAGA;;;AAKA;;;AAIA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/IA","sources":["webpack://home-assistant-frontend/./src/components/ha-expansion-panel.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/components/ha-related-items.ts","webpack://home-assistant-frontend/./src/panels/config/entities/entity-registry-settings.ts","webpack://home-assistant-frontend/./src/panels/config/entities/dialog-entity-editor.ts"],"sourcesContent":["import { mdiChevronDown } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { nextRender } from \"../common/util/render-status\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-expansion-panel\")\nclass HaExpansionPanel extends LitElement {\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  @property({ type: Boolean, reflect: true }) outlined = false;\n\n  @property() header?: string;\n\n  @property() secondary?: string;\n\n  @query(\".container\") private _container!: HTMLDivElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"summary\" @click=${this._toggleContainer}>\n        <slot class=\"header\" name=\"header\">\n          ${this.header}\n          <slot class=\"secondary\" name=\"secondary\">${this.secondary}</slot>\n        </slot>\n        <ha-svg-icon\n          .path=${mdiChevronDown}\n          class=\"summary-icon ${classMap({ expanded: this.expanded })}\"\n        ></ha-svg-icon>\n      </div>\n      <div\n        class=\"container ${classMap({ expanded: this.expanded })}\"\n        @transitionend=${this._handleTransitionEnd}\n      >\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  private _handleTransitionEnd() {\n    this._container.style.removeProperty(\"height\");\n  }\n\n  private async _toggleContainer(): Promise<void> {\n    const newExpanded = !this.expanded;\n    fireEvent(this, \"expanded-will-change\", { expanded: newExpanded });\n\n    if (newExpanded) {\n      // allow for dynamic content to be rendered\n      await nextRender();\n    }\n\n    const scrollHeight = this._container.scrollHeight;\n    this._container.style.height = `${scrollHeight}px`;\n\n    if (!newExpanded) {\n      setTimeout(() => {\n        this._container.style.height = \"0px\";\n      }, 0);\n    }\n\n    this.expanded = newExpanded;\n    fireEvent(this, \"expanded-changed\", { expanded: this.expanded });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: 1px;\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        padding: 0 8px;\n      }\n\n      .summary {\n        display: flex;\n        padding: var(--expansion-panel-summary-padding, 0);\n        min-height: 48px;\n        align-items: center;\n        cursor: pointer;\n        overflow: hidden;\n        font-weight: 500;\n      }\n\n      .summary-icon {\n        transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n        margin-left: auto;\n      }\n\n      .summary-icon.expanded {\n        transform: rotate(180deg);\n      }\n\n      .container {\n        overflow: hidden;\n        transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1);\n        height: 0px;\n      }\n\n      .container.expanded {\n        height: auto;\n      }\n\n      .header {\n        display: block;\n      }\n\n      .secondary {\n        display: block;\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-expansion-panel\": HaExpansionPanel;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"expanded-changed\": {\n      expanded: boolean;\n    };\n    \"expanded-will-change\": {\n      expanded: boolean;\n    };\n  }\n}\n","import { Switch } from \"@material/mwc-switch/deprecated\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\n// @ts-expect-error\nexport class HaSwitch extends Switch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      Switch.styles,\n      css`\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport { ConfigEntry, getConfigEntries } from \"../data/config_entries\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport { SceneEntity } from \"../data/scene\";\nimport { findRelated, ItemType, RelatedResult } from \"../data/search\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-switch\";\n\n@customElement(\"ha-related-items\")\nexport class HaRelatedItems extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public itemType!: ItemType;\n\n  @property() public itemId!: string;\n\n  @state() private _entries?: ConfigEntry[];\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _areas?: AreaRegistryEntry[];\n\n  @state() private _related?: RelatedResult;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._devices = devices;\n      }),\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this._areas = areas;\n      }),\n    ];\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    getConfigEntries(this.hass).then((configEntries) => {\n      this._entries = configEntries;\n    });\n    this.hass.loadBackendTranslation(\"title\");\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (\n      (changedProps.has(\"itemId\") || changedProps.has(\"itemType\")) &&\n      this.itemId &&\n      this.itemType\n    ) {\n      this._findRelated();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._related) {\n      return html``;\n    }\n    if (Object.keys(this._related).length === 0) {\n      return html`\n        ${this.hass.localize(\"ui.components.related-items.no_related_found\")}\n      `;\n    }\n    return html`\n      ${this._related.config_entry && this._entries\n        ? this._related.config_entry.map((relatedConfigEntryId) => {\n            const entry: ConfigEntry | undefined = this._entries!.find(\n              (configEntry) => configEntry.entry_id === relatedConfigEntryId\n            );\n            if (!entry) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\n                  \"ui.components.related-items.integration\"\n                )}:\n              </h3>\n              <a\n                href=${`/config/integrations#config_entry=${relatedConfigEntryId}`}\n                @click=${this._navigateAwayClose}\n              >\n                ${this.hass.localize(`component.${entry.domain}.title`)}:\n                ${entry.title}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.device && this._devices\n        ? this._related.device.map((relatedDeviceId) => {\n            const device: DeviceRegistryEntry | undefined = this._devices!.find(\n              (dev) => dev.id === relatedDeviceId\n            );\n            if (!device) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\"ui.components.related-items.device\")}:\n              </h3>\n              <a\n                href=\"/config/devices/device/${relatedDeviceId}\"\n                @click=${this._navigateAwayClose}\n              >\n                ${device.name_by_user || device.name}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.area && this._areas\n        ? this._related.area.map((relatedAreaId) => {\n            const area: AreaRegistryEntry | undefined = this._areas!.find(\n              (ar) => ar.area_id === relatedAreaId\n            );\n            if (!area) {\n              return \"\";\n            }\n            return html`\n              <h3>\n                ${this.hass.localize(\"ui.components.related-items.area\")}:\n              </h3>\n              <a\n                href=\"/config/areas/area/${relatedAreaId}\"\n                @click=${this._navigateAwayClose}\n              >\n                ${area.name}\n              </a>\n            `;\n          })\n        : \"\"}\n      ${this._related.entity\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.entity\")}:\n            </h3>\n            <ul>\n              ${this._related.entity.map((entityId) => {\n                const entity: HassEntity | undefined =\n                  this.hass.states[entityId];\n                if (!entity) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      @click=${this._openMoreInfo}\n                      .entityId=${entityId}\n                      class=\"link\"\n                    >\n                      ${entity.attributes.friendly_name || entityId}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.group\n        ? html`\n            <h3>${this.hass.localize(\"ui.components.related-items.group\")}:</h3>\n            <ul>\n              ${this._related.group.map((groupId) => {\n                const group: HassEntity | undefined = this.hass.states[groupId];\n                if (!group) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${groupId}\n                    >\n                      ${group.attributes.friendly_name || group.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.scene\n        ? html`\n            <h3>${this.hass.localize(\"ui.components.related-items.scene\")}:</h3>\n            <ul>\n              ${this._related.scene.map((sceneId) => {\n                const scene: SceneEntity | undefined =\n                  this.hass.states[sceneId];\n                if (!scene) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${sceneId}\n                    >\n                      ${scene.attributes.friendly_name || scene.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.automation\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.automation\")}:\n            </h3>\n            <ul>\n              ${this._related.automation.map((automationId) => {\n                const automation: HassEntity | undefined =\n                  this.hass.states[automationId];\n                if (!automation) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${automationId}\n                    >\n                      ${automation.attributes.friendly_name ||\n                      automation.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n      ${this._related.script\n        ? html`\n            <h3>\n              ${this.hass.localize(\"ui.components.related-items.script\")}:\n            </h3>\n            <ul>\n              ${this._related.script.map((scriptId) => {\n                const script: HassEntity | undefined =\n                  this.hass.states[scriptId];\n                if (!script) {\n                  return \"\";\n                }\n                return html`\n                  <li>\n                    <button\n                      class=\"link\"\n                      @click=${this._openMoreInfo}\n                      .entityId=${scriptId}\n                    >\n                      ${script.attributes.friendly_name || script.entity_id}\n                    </button>\n                  </li>\n                `;\n              })}\n            </ul>\n          `\n        : \"\"}\n    `;\n  }\n\n  private async _navigateAwayClose() {\n    // allow new page to open before closing dialog\n    await new Promise((resolve) => setTimeout(resolve, 0));\n    fireEvent(this, \"close-dialog\");\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, this.itemType, this.itemId);\n    await this.updateComplete;\n    fireEvent(this, \"iron-resize\");\n  }\n\n  private _openMoreInfo(ev: CustomEvent) {\n    const entityId = (ev.target as any).entityId;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        color: var(--primary-color);\n      }\n      button.link {\n        color: var(--primary-color);\n        text-align: left;\n        cursor: pointer;\n        background: none;\n        border-width: initial;\n        border-style: none;\n        border-color: initial;\n        border-image: initial;\n        padding: 0px;\n        font: inherit;\n        text-decoration: underline;\n      }\n      h3 {\n        font-family: var(--paper-font-title_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-title_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-title_-_font-size);\n        font-weight: var(--paper-font-headline-_font-weight);\n        letter-spacing: var(--paper-font-title_-_letter-spacing);\n        line-height: var(--paper-font-title_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-related-items\": HaRelatedItems;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperItemElement } from \"@polymer/paper-item/paper-item\";\nimport { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../../common/entity/domain_icon\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-paper-dropdown-menu\";\nimport \"../../../components/ha-switch\";\nimport type { HaSwitch } from \"../../../components/ha-switch\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n  updateDeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntryUpdateParams,\n  ExtEntityRegistryEntry,\n  removeEntityRegistryEntry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport type { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { showDeviceRegistryDetailDialog } from \"../devices/device-registry-detail/show-dialog-device-registry-detail\";\n\nconst OVERRIDE_DEVICE_CLASSES = {\n  cover: [\"window\", \"door\", \"garage\", \"gate\"],\n  binary_sensor: [\"window\", \"door\", \"garage_door\", \"opening\"],\n};\n\n@customElement(\"entity-registry-settings\")\nexport class EntityRegistrySettings extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entry!: ExtEntityRegistryEntry;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _entityId!: string;\n\n  @state() private _deviceClass?: string;\n\n  @state() private _areaId?: string | null;\n\n  @state() private _disabledBy!: string | null;\n\n  private _deviceLookup?: Record<string, DeviceRegistryEntry>;\n\n  @state() private _device?: DeviceRegistryEntry;\n\n  @state() private _error?: string;\n\n  @state() private _submitting?: boolean;\n\n  private _origEntityId!: string;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._deviceLookup = {};\n        for (const device of devices) {\n          this._deviceLookup[device.id] = device;\n        }\n        if (this.entry.device_id) {\n          this._device = this._deviceLookup[this.entry.device_id];\n        }\n      }),\n    ];\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"entry\")) {\n      this._error = undefined;\n      this._name = this.entry.name || \"\";\n      this._icon = this.entry.icon || \"\";\n      this._deviceClass =\n        this.entry.device_class || this.entry.original_device_class;\n      this._origEntityId = this.entry.entity_id;\n      this._areaId = this.entry.area_id;\n      this._entityId = this.entry.entity_id;\n      this._disabledBy = this.entry.disabled_by;\n      this._device =\n        this.entry.device_id && this._deviceLookup\n          ? this._deviceLookup[this.entry.device_id]\n          : undefined;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this.entry.entity_id !== this._origEntityId) {\n      return html``;\n    }\n    const stateObj: HassEntity | undefined =\n      this.hass.states[this.entry.entity_id];\n\n    const domain = computeDomain(this.entry.entity_id);\n\n    const invalidDomainUpdate = computeDomain(this._entityId.trim()) !== domain;\n\n    return html`\n      ${!stateObj\n        ? html`\n            <div class=\"container warning\">\n              ${this.hass!.localize(\n                \"ui.dialogs.entity_registry.editor.unavailable\"\n              )}\n              ${this._device?.disabled_by\n                ? html`<br />${this.hass!.localize(\n                      \"ui.dialogs.entity_registry.editor.device_disabled\"\n                    )}<br /><mwc-button @click=${this._openDeviceSettings}>\n                      ${this.hass!.localize(\n                        \"ui.dialogs.entity_registry.editor.open_device_settings\"\n                      )}\n                    </mwc-button>`\n                : \"\"}\n            </div>\n          `\n        : \"\"}\n      ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n      <div class=\"form container\">\n        <paper-input\n          .value=${this._name}\n          @value-changed=${this._nameChanged}\n          .label=${this.hass.localize(\"ui.dialogs.entity_registry.editor.name\")}\n          .placeholder=${this.entry.original_name}\n          .disabled=${this._submitting}\n        ></paper-input>\n        <ha-icon-picker\n          .value=${this._icon}\n          @value-changed=${this._iconChanged}\n          .label=${this.hass.localize(\"ui.dialogs.entity_registry.editor.icon\")}\n          .placeholder=${this.entry.original_icon || stateObj?.attributes.icon}\n          .fallbackPath=${!this._icon && !stateObj?.attributes.icon && stateObj\n            ? domainIcon(computeDomain(stateObj.entity_id), stateObj)\n            : undefined}\n          .disabled=${this._submitting}\n        ></ha-icon-picker>\n        ${OVERRIDE_DEVICE_CLASSES[domain]?.includes(this._deviceClass) ||\n        (domain === \"cover\" && this.entry.original_device_class === null)\n          ? html`<ha-paper-dropdown-menu\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.device_class\"\n              )}\n            >\n              <paper-listbox\n                slot=\"dropdown-content\"\n                attr-for-selected=\"item-value\"\n                .selected=${this._deviceClass}\n                @selected-item-changed=${this._deviceClassChanged}\n              >\n                ${OVERRIDE_DEVICE_CLASSES[domain].map(\n                  (deviceClass: string) => html`\n                    <paper-item .itemValue=${deviceClass}>\n                      ${this.hass.localize(\n                        `ui.dialogs.entity_registry.editor.device_classes.${domain}.${deviceClass}`\n                      )}\n                    </paper-item>\n                  `\n                )}\n              </paper-listbox>\n            </ha-paper-dropdown-menu>`\n          : \"\"}\n        <paper-input\n          .value=${this._entityId}\n          @value-changed=${this._entityIdChanged}\n          .label=${this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.entity_id\"\n          )}\n          error-message=\"Domain needs to stay the same\"\n          .invalid=${invalidDomainUpdate}\n          .disabled=${this._submitting}\n        ></paper-input>\n        ${!this.entry.device_id\n          ? html`<ha-area-picker\n              .hass=${this.hass}\n              .value=${this._areaId}\n              @value-changed=${this._areaPicked}\n            ></ha-area-picker>`\n          : \"\"}\n        <div class=\"row\">\n          <ha-switch\n            .checked=${!this._disabledBy}\n            .disabled=${this._device?.disabled_by}\n            @change=${this._disabledByChanged}\n          >\n          </ha-switch>\n          <div>\n            <div>\n              ${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.enabled_label\"\n              )}\n            </div>\n            <div class=\"secondary\">\n              ${this._disabledBy && this._disabledBy !== \"user\"\n                ? this.hass.localize(\n                    \"ui.dialogs.entity_registry.editor.enabled_cause\",\n                    \"cause\",\n                    this.hass.localize(\n                      `config_entry.disabled_by.${this._disabledBy}`\n                    )\n                  )\n                : \"\"}\n              ${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.enabled_description\"\n              )}\n              <br />${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.note\"\n              )}\n            </div>\n          </div>\n        </div>\n\n        ${this.entry.device_id\n          ? html`<ha-expansion-panel\n              .header=${this.hass.localize(\n                \"ui.dialogs.entity_registry.editor.advanced\"\n              )}\n              outlined\n            >\n              <p>\n                ${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.area_note\"\n                )}\n              </p>\n              ${this._areaId\n                ? html`<mwc-button @click=${this._clearArea}\n                    >${this.hass.localize(\n                      \"ui.dialogs.entity_registry.editor.follow_device_area\"\n                    )}</mwc-button\n                  >`\n                : this._device\n                ? html`<mwc-button @click=${this._openDeviceSettings}\n                    >${this.hass.localize(\n                      \"ui.dialogs.entity_registry.editor.change_device_area\"\n                    )}</mwc-button\n                  >`\n                : \"\"}\n              <ha-area-picker\n                .hass=${this.hass}\n                .value=${this._areaId}\n                .placeholder=${this._device?.area_id}\n                .label=${this.hass.localize(\n                  \"ui.dialogs.entity_registry.editor.area\"\n                )}\n                @value-changed=${this._areaPicked}\n              ></ha-area-picker\n            ></ha-expansion-panel>`\n          : \"\"}\n      </div>\n      <div class=\"buttons\">\n        <mwc-button\n          class=\"warning\"\n          @click=${this._confirmDeleteEntry}\n          .disabled=${this._submitting ||\n          !(stateObj && stateObj.attributes.restored)}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.delete\")}\n        </mwc-button>\n        <mwc-button\n          @click=${this._updateEntry}\n          .disabled=${invalidDomainUpdate || this._submitting}\n        >\n          ${this.hass.localize(\"ui.dialogs.entity_registry.editor.update\")}\n        </mwc-button>\n      </div>\n    `;\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._name = ev.detail.value;\n  }\n\n  private _iconChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _entityIdChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._entityId = ev.detail.value;\n  }\n\n  private _deviceClassChanged(ev: PolymerChangedEvent<PaperItemElement>): void {\n    this._error = undefined;\n    if (ev.detail.value === null) {\n      return;\n    }\n    this._deviceClass = (ev.detail.value as any).itemValue;\n  }\n\n  private _areaPicked(ev: CustomEvent) {\n    this._error = undefined;\n    this._areaId = ev.detail.value;\n  }\n\n  private _clearArea() {\n    this._error = undefined;\n    this._areaId = null;\n  }\n\n  private _openDeviceSettings() {\n    showDeviceRegistryDetailDialog(this, {\n      device: this._device!,\n      updateEntry: async (updates) => {\n        await updateDeviceRegistryEntry(this.hass, this._device!.id, updates);\n      },\n    });\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    const params: Partial<EntityRegistryEntryUpdateParams> = {\n      name: this._name.trim() || null,\n      icon: this._icon.trim() || null,\n      area_id: this._areaId || null,\n      device_class: this._deviceClass || null,\n      new_entity_id: this._entityId.trim(),\n    };\n    if (\n      this.entry.disabled_by !== this._disabledBy &&\n      (this._disabledBy === null || this._disabledBy === \"user\")\n    ) {\n      params.disabled_by = this._disabledBy;\n    }\n    try {\n      const result = await updateEntityRegistryEntry(\n        this.hass!,\n        this._origEntityId,\n        params\n      );\n      if (result.require_restart) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_restart_confirm\"\n          ),\n        });\n      }\n      if (result.reload_delay) {\n        showAlertDialog(this, {\n          text: this.hass.localize(\n            \"ui.dialogs.entity_registry.editor.enabled_delay_confirm\",\n            \"delay\",\n            result.reload_delay\n          ),\n        });\n      }\n      fireEvent(this as HTMLElement, \"close-dialog\");\n    } catch (err: any) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _confirmDeleteEntry(): Promise<void> {\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.dialogs.entity_registry.editor.confirm_delete\"\n        ),\n      }))\n    ) {\n      return;\n    }\n\n    this._submitting = true;\n\n    try {\n      await removeEntityRegistryEntry(this.hass!, this._origEntityId);\n      fireEvent(this, \"close-dialog\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _disabledByChanged(ev: Event): void {\n    this._disabledBy = (ev.target as HaSwitch).checked ? null : \"user\";\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        .container {\n          padding: 20px 24px;\n        }\n        .form {\n          margin-bottom: 53px;\n        }\n        .buttons {\n          position: absolute;\n          bottom: 0;\n          width: 100%;\n          box-sizing: border-box;\n          border-top: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n          display: flex;\n          justify-content: space-between;\n          padding: 8px;\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n          background-color: var(--mdc-theme-surface, #fff);\n        }\n        ha-paper-dropdown-menu {\n          width: 100%;\n        }\n        ha-switch {\n          margin-right: 16px;\n        }\n        .row {\n          margin: 8px 0;\n          color: var(--primary-text-color);\n          display: flex;\n          align-items: center;\n        }\n        p {\n          margin: 8px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"entity-registry-settings\": EntityRegistrySettings;\n  }\n}\n","import \"@material/mwc-tab\";\nimport \"@material/mwc-tab-bar\";\nimport { mdiClose, mdiTune } from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { dynamicElement } from \"../../../common/dom/dynamic-element-directive\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-header-bar\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-related-items\";\nimport {\n  EntityRegistryEntry,\n  ExtEntityRegistryEntry,\n  getExtendedEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { replaceDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { PLATFORMS_WITH_SETTINGS_TAB } from \"./const\";\nimport \"./entity-registry-settings\";\nimport type { EntityRegistryDetailDialogParams } from \"./show-dialog-entity-editor\";\n\ninterface Tabs {\n  [key: string]: Tab;\n}\n\ninterface Tab {\n  component: string;\n  translationKey: string;\n}\n\n@customElement(\"dialog-entity-editor\")\nexport class DialogEntityEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: EntityRegistryDetailDialogParams;\n\n  @state() private _entry?: EntityRegistryEntry | ExtEntityRegistryEntry | null;\n\n  @state() private _curTab = \"tab-settings\";\n\n  @state() private _extraTabs: Tabs = {};\n\n  @state() private _settingsElementTag?: string;\n\n  private _curTabIndex = 0;\n\n  public showDialog(params: EntityRegistryDetailDialogParams): void {\n    this._params = params;\n    this._entry = undefined;\n    this._settingsElementTag = undefined;\n    this._extraTabs = {};\n    this._getEntityReg();\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || this._entry === undefined) {\n      return html``;\n    }\n    const entityId = this._params.entity_id;\n    const entry = this._entry;\n    const stateObj: HassEntity | undefined = this.hass.states[entityId];\n\n    return html`\n      <ha-dialog\n        open\n        .heading=${stateObj\n          ? computeStateName(stateObj)\n          : entry?.name || entityId}\n        hideActions\n        @closed=${this.closeDialog}\n        @close-dialog=${this.closeDialog}\n      >\n        <div slot=\"heading\">\n          <ha-header-bar>\n            <ha-icon-button\n              slot=\"navigationIcon\"\n              .label=${this.hass.localize(\"ui.dialogs.entity_registry.dismiss\")}\n              .path=${mdiClose}\n              dialogAction=\"cancel\"\n            ></ha-icon-button>\n            <span slot=\"title\">\n              ${stateObj ? computeStateName(stateObj) : entry?.name || entityId}\n            </span>\n            ${stateObj\n              ? html`\n                  <ha-icon-button\n                    slot=\"actionItems\"\n                    .label=${this.hass.localize(\n                      \"ui.dialogs.entity_registry.control\"\n                    )}\n                    .path=${mdiTune}\n                    @click=${this._openMoreInfo}\n                  ></ha-icon-button>\n                `\n              : \"\"}\n          </ha-header-bar>\n          <mwc-tab-bar\n            .activeIndex=${this._curTabIndex}\n            @MDCTabBar:activated=${this._handleTabActivated}\n            @MDCTab:interacted=${this._handleTabInteracted}\n          >\n            <mwc-tab\n              id=\"tab-settings\"\n              .label=${this.hass.localize(\n                \"ui.dialogs.entity_registry.settings\"\n              )}\n            >\n            </mwc-tab>\n            ${Object.entries(this._extraTabs).map(\n              ([key, tab]) => html`\n                <mwc-tab\n                  id=${key}\n                  .label=${this.hass.localize(tab.translationKey) || key}\n                >\n                </mwc-tab>\n              `\n            )}\n            <mwc-tab\n              id=\"tab-related\"\n              .label=${this.hass.localize(\"ui.dialogs.entity_registry.related\")}\n            >\n            </mwc-tab>\n          </mwc-tab-bar>\n        </div>\n        <div class=\"wrapper\">${cache(this._renderTab())}</div>\n      </ha-dialog>\n    `;\n  }\n\n  private _renderTab() {\n    switch (this._curTab) {\n      case \"tab-settings\":\n        if (this._entry) {\n          if (this._settingsElementTag) {\n            return html`\n              ${dynamicElement(this._settingsElementTag, {\n                hass: this.hass,\n                entry: this._entry,\n                entityId: this._params!.entity_id,\n              })}\n            `;\n          }\n          return html``;\n        }\n        return html`\n          <div class=\"content\">\n            ${this.hass.localize(\n              \"ui.dialogs.entity_registry.no_unique_id\",\n              \"entity_id\",\n              this._params!.entity_id,\n              \"faq_link\",\n              html`<a\n                href=${documentationUrl(this.hass, \"/faq/unique_id\")}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                >${this.hass.localize(\"ui.dialogs.entity_registry.faq\")}</a\n              >`\n            )}\n          </div>\n        `;\n      case \"tab-related\":\n        return html`\n          <ha-related-items\n            class=\"content\"\n            .hass=${this.hass}\n            .itemId=${this._params!.entity_id}\n            itemType=\"entity\"\n          ></ha-related-items>\n        `;\n      default:\n        return html``;\n    }\n  }\n\n  private async _getEntityReg() {\n    try {\n      this._entry = await getExtendedEntityRegistryEntry(\n        this.hass,\n        this._params!.entity_id\n      );\n      this._loadPlatformSettingTabs();\n    } catch {\n      this._entry = null;\n    }\n  }\n\n  private _handleTabActivated(ev: CustomEvent): void {\n    this._curTabIndex = ev.detail.index;\n  }\n\n  private _handleTabInteracted(ev: CustomEvent): void {\n    this._curTab = ev.detail.tabId;\n  }\n\n  private async _loadPlatformSettingTabs(): Promise<void> {\n    if (!this._entry) {\n      return;\n    }\n    if (\n      !Object.keys(PLATFORMS_WITH_SETTINGS_TAB).includes(this._entry.platform)\n    ) {\n      this._settingsElementTag = \"entity-registry-settings\";\n      return;\n    }\n    const tag = PLATFORMS_WITH_SETTINGS_TAB[this._entry.platform];\n    await import(`./editor-tabs/settings/${tag}`);\n    this._settingsElementTag = tag;\n  }\n\n  private _openMoreInfo(): void {\n    replaceDialog();\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this._params!.entity_id,\n    });\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n        }\n\n        mwc-tab-bar {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n\n        ha-dialog {\n          --dialog-content-position: static;\n          --dialog-content-padding: 0;\n          --dialog-z-index: 6;\n        }\n\n        @media all and (min-width: 451px) and (min-height: 501px) {\n          .wrapper {\n            min-width: 400px;\n          }\n        }\n\n        .content {\n          display: block;\n          padding: 20px 24px;\n        }\n\n        /* overrule the ha-style-dialog max-height on small screens */\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-header-bar {\n            --mdc-theme-primary: var(--app-header-background-color);\n            --mdc-theme-on-primary: var(--app-header-text-color, white);\n          }\n        }\n\n        mwc-button.warning {\n          --mdc-theme-primary: var(--error-color);\n        }\n\n        :host([rtl]) app-toolbar {\n          direction: rtl;\n          text-align: right;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-entity-editor\": DialogEntityEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}