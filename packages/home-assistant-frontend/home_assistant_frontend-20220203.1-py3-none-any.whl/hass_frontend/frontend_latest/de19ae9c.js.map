{"version":3,"file":"de19ae9c.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;;ACmCA;AAKA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;AACA;;AAEA;;;;AAIA;AAKA;AACA;;;;AAIA;;AAEA;;;;AAIA;AAKA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;AACA;;;;;AAKA;AAKA;AACA;AACA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAnLA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item-body.js","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-picture-glance-card-editor.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","import \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { array, assert, object, optional, string, assign } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport { ActionConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { PictureGlanceCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-action-editor\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../components/hui-theme-select-editor\";\nimport { EntityConfig } from \"../../entity-rows/types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { EditorTarget } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(string()),\n    entity: optional(string()),\n    image: optional(string()),\n    camera_image: optional(string()),\n    camera_view: optional(string()),\n    aspect_ratio: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    entities: array(entitiesConfigStruct),\n    theme: optional(string()),\n  })\n);\n\nconst includeDomains = [\"camera\"];\n\n@customElement(\"hui-picture-glance-card-editor\")\nexport class HuiPictureGlanceCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: PictureGlanceCardConfig;\n\n  @state() private _configEntities?: EntityConfig[];\n\n  public setConfig(config: PictureGlanceCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = processEditorEntities(config.entities);\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _image(): string {\n    return (\n      this._config!.image ||\n      (this._camera_image\n        ? \"\"\n        : \"https://www.home-assistant.io/images/merchandise/shirt-frontpage.png\")\n    );\n  }\n\n  get _camera_image(): string {\n    return this._config!.camera_image || \"\";\n  }\n\n  get _camera_view(): string {\n    return this._config!.camera_view || \"auto\";\n  }\n\n  get _state_image(): Record<string, unknown> {\n    return this._config!.state_image || {};\n  }\n\n  get _aspect_ratio(): string {\n    return this._config!.aspect_ratio || \"\";\n  }\n\n  get _tap_action(): ActionConfig {\n    return this._config!.tap_action || { action: \"toggle\" };\n  }\n\n  get _hold_action(): ActionConfig {\n    return this._config!.hold_action || { action: \"more-info\" };\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const actions = [\"more-info\", \"toggle\", \"navigate\", \"call-service\", \"none\"];\n    const views = [\"auto\", \"live\"];\n\n    return html`\n      <div class=\"card-config\">\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.image\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._image}\n          .configValue=${\"image\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.camera_image\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .hass=${this.hass}\n          .value=${this._camera_image}\n          .configValue=${\"camera_image\"}\n          @value-changed=${this._valueChanged}\n          allow-custom-entity\n          .includeDomains=${includeDomains}\n        ></ha-entity-picker>\n        <div class=\"side-by-side\">\n          <paper-dropdown-menu\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.camera_view\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .configValue=${\"camera_view\"}\n            @value-changed=${this._valueChanged}\n          >\n            <paper-listbox\n              slot=\"dropdown-content\"\n              .selected=${views.indexOf(this._camera_view)}\n            >\n              ${views.map((view) => html` <paper-item>${view}</paper-item> `)}\n            </paper-listbox>\n          </paper-dropdown-menu>\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.aspect_ratio\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._aspect_ratio}\n            .configValue=${\"aspect_ratio\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n        </div>\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.picture-glance.state_entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .hass=${this.hass}\n          .value=${this._entity}\n          .configValue=${\"entity\"}\n          @value-changed=${this._valueChanged}\n          allow-custom-entity\n        ></ha-entity-picker>\n        <div class=\"side-by-side\">\n          <hui-action-editor\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.tap_action\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .hass=${this.hass}\n            .config=${this._tap_action}\n            .actions=${actions}\n            .configValue=${\"tap_action\"}\n            @value-changed=${this._valueChanged}\n          ></hui-action-editor>\n          <hui-action-editor\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.hold_action\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .hass=${this.hass}\n            .config=${this._hold_action}\n            .actions=${actions}\n            .configValue=${\"hold_action\"}\n            @value-changed=${this._valueChanged}\n          ></hui-action-editor>\n        </div>\n        <hui-entity-editor\n          .hass=${this.hass}\n          .entities=${this._configEntities}\n          @entities-changed=${this._valueChanged}\n        ></hui-entity-editor>\n        <hui-theme-select-editor\n          .hass=${this.hass}\n          .value=${this._theme}\n          .configValue=${\"theme\"}\n          @value-changed=${this._valueChanged}\n        ></hui-theme-select-editor>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value = ev.detail.value;\n\n    if (ev.detail && ev.detail.entities) {\n      this._config = { ...this._config, entities: ev.detail.entities };\n\n      this._configEntities = processEditorEntities(this._config.entities);\n    } else if (target.configValue) {\n      if (this[`_${target.configValue}`] === value) {\n        return;\n      }\n\n      if (value !== false && !value) {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-picture-glance-card-editor\": HuiPictureGlanceCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}