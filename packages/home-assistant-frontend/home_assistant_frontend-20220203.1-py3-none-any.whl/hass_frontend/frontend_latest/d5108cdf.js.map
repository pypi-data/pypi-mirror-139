{"version":3,"file":"d5108cdf.js","mappings":";;;;AAqBA;ACmCA;;AAEA;;AAEA;AACA;;;AA1CA;;;;AC4CA;AACA;;;AAKA;;AAGA;;AAGA;AACA;;;;AAKA;AAEA;;;AAIA;;;AAGA;;AAGA;AACA;;AAIA;AAEA;AACA;;;;AAMA;AACA;;AAEA;;;;;;AAOA;;;;AA5DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxCA","sources":["webpack://home-assistant-frontend/./src/components/ha-code-editor.ts","webpack://home-assistant-frontend/./src/components/ha-yaml-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/card-editor/hui-dialog-suggest-card.ts"],"sourcesContent":["import type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport { css, CSSResultGroup, PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { loadCodeMirror } from \"../resources/codemirror.ondemand\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property() public error = false;\n\n  @state() private _value = \"\";\n\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.HighlightStyle.get(\n      this.codemirror.state,\n      this._loadedCodeMirror.tags.comment\n    );\n    return !!this.shadowRoot!.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.langCompartment!.reconfigure(\n          this._mode\n        ),\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.dispatch({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._blockKeyboardShortcuts();\n    this._load();\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private async _load(): Promise<void> {\n    this._loadedCodeMirror = await loadCodeMirror();\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions: [\n          this._loadedCodeMirror.lineNumbers(),\n          this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n          this._loadedCodeMirror.history(),\n          this._loadedCodeMirror.highlightSelectionMatches(),\n          this._loadedCodeMirror.highlightActiveLine(),\n          this._loadedCodeMirror.drawSelection(),\n          this._loadedCodeMirror.rectangularSelection(),\n          this._loadedCodeMirror.keymap.of([\n            ...this._loadedCodeMirror.defaultKeymap,\n            ...this._loadedCodeMirror.searchKeymap,\n            ...this._loadedCodeMirror.historyKeymap,\n            ...this._loadedCodeMirror.tabKeyBindings,\n            saveKeyBinding,\n          ] as KeyBinding[]),\n          this._loadedCodeMirror.langCompartment.of(this._mode),\n          this._loadedCodeMirror.theme,\n          this._loadedCodeMirror.Prec.fallback(\n            this._loadedCodeMirror.highlightStyle\n          ),\n          this._loadedCodeMirror.readonlyCompartment.of(\n            this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n          ),\n          this._loadedCodeMirror.EditorView.updateListener.of((update) =>\n            this._onUpdate(update)\n          ),\n        ],\n      }),\n      root: this.shadowRoot!,\n      parent: this.shadowRoot!,\n    });\n  }\n\n  private _blockKeyboardShortcuts() {\n    this.addEventListener(\"keydown\", (ev) => ev.stopPropagation());\n  }\n\n  private _onUpdate(update: ViewUpdate): void {\n    if (!update.docChanged) {\n      return;\n    }\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  // Only Lit 2.0 will use this\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.error-state) div.cm-wrap .cm-gutters {\n        border-color: var(--error-state-color, red);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { DEFAULT_SCHEMA, dump, load, Schema } from \"js-yaml\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-code-editor\";\n\nconst isEmpty = (obj: Record<string, unknown>): boolean => {\n  if (typeof obj !== \"object\") {\n    return false;\n  }\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n@customElement(\"ha-yaml-editor\")\nexport class HaYamlEditor extends LitElement {\n  @property() public value?: any;\n\n  @property({ attribute: false }) public yamlSchema: Schema = DEFAULT_SCHEMA;\n\n  @property() public defaultValue?: any;\n\n  @property() public isValid = true;\n\n  @property() public label?: string;\n\n  @state() private _yaml = \"\";\n\n  public setValue(value): void {\n    try {\n      this._yaml =\n        value && !isEmpty(value)\n          ? dump(value, { schema: this.yamlSchema })\n          : \"\";\n    } catch (err: any) {\n      // eslint-disable-next-line no-console\n      console.error(err, value);\n      alert(`There was an error converting to YAML: ${err}`);\n    }\n  }\n\n  protected firstUpdated(): void {\n    if (this.defaultValue) {\n      this.setValue(this.defaultValue);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._yaml === undefined) {\n      return html``;\n    }\n    return html`\n      ${this.label ? html`<p>${this.label}</p>` : \"\"}\n      <ha-code-editor\n        .value=${this._yaml}\n        mode=\"yaml\"\n        .error=${this.isValid === false}\n        @value-changed=${this._onChange}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n  }\n\n  private _onChange(ev: CustomEvent): void {\n    ev.stopPropagation();\n    this._yaml = ev.detail.value;\n    let parsed;\n    let isValid = true;\n\n    if (this._yaml) {\n      try {\n        parsed = load(this._yaml, { schema: this.yamlSchema });\n      } catch (err: any) {\n        // Invalid YAML\n        isValid = false;\n      }\n    } else {\n      parsed = {};\n    }\n\n    this.value = parsed;\n    this.isValid = isValid;\n\n    fireEvent(this, \"value-changed\", { value: parsed, isValid } as any);\n  }\n\n  get yaml() {\n    return this._yaml;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-yaml-editor\": HaYamlEditor;\n  }\n}\n","import deepFreeze from \"deep-freeze\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../../components/ha-yaml-editor\";\nimport { LovelaceCardConfig } from \"../../../../data/lovelace\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { showSaveSuccessToast } from \"../../../../util/toast-saved-success\";\nimport { computeCards } from \"../../common/generate-lovelace-config\";\nimport { addCards } from \"../config-util\";\nimport \"./hui-card-preview\";\nimport { showCreateCardDialog } from \"./show-create-card-dialog\";\nimport { SuggestCardDialogParams } from \"./show-suggest-card-dialog\";\n\n@customElement(\"hui-dialog-suggest-card\")\nexport class HuiDialogSuggestCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: SuggestCardDialogParams;\n\n  @state() private _cardConfig?: LovelaceCardConfig[];\n\n  @state() private _saving = false;\n\n  @query(\"ha-yaml-editor\") private _yamlEditor?: HaYamlEditor;\n\n  public showDialog(params: SuggestCardDialogParams): void {\n    this._params = params;\n    this._cardConfig =\n      params.cardConfig ||\n      computeCards(\n        params.entities.map((entityId) => [\n          entityId,\n          this.hass.states[entityId],\n        ]),\n        {\n          title: params.cardTitle,\n        }\n      );\n    if (!Object.isFrozen(this._cardConfig)) {\n      this._cardConfig = deepFreeze(this._cardConfig);\n    }\n    if (this._yamlEditor) {\n      this._yamlEditor.setValue(this._cardConfig);\n    }\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    this._cardConfig = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${this.hass!.localize(\n          \"ui.panel.lovelace.editor.suggest_card.header\"\n        )}\n      >\n        <div>\n          ${this._cardConfig\n            ? html`\n                <div class=\"element-preview\">\n                  ${this._cardConfig.map(\n                    (cardConfig) => html`\n                      <hui-card-preview\n                        .hass=${this.hass}\n                        .config=${cardConfig}\n                      ></hui-card-preview>\n                    `\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this._params.yaml && this._cardConfig\n            ? html`\n                <div class=\"editor\">\n                  <ha-yaml-editor\n                    .defaultValue=${this._cardConfig}\n                  ></ha-yaml-editor>\n                </div>\n              `\n            : \"\"}\n        </div>\n        <mwc-button slot=\"secondaryAction\" @click=${this.closeDialog}>\n          ${this._params.yaml\n            ? this.hass!.localize(\"ui.common.close\")\n            : this.hass!.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        ${!this._params.yaml\n          ? html`\n              <mwc-button slot=\"primaryAction\" @click=${this._pickCard}\n                >${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.suggest_card.create_own\"\n                )}</mwc-button\n              >\n              <mwc-button\n                slot=\"primaryAction\"\n                .disabled=${this._saving}\n                @click=${this._save}\n              >\n                ${this._saving\n                  ? html`\n                      <ha-circular-progress\n                        active\n                        title=\"Saving\"\n                        size=\"small\"\n                      ></ha-circular-progress>\n                    `\n                  : this.hass!.localize(\n                      \"ui.panel.lovelace.editor.suggest_card.add\"\n                    )}\n              </mwc-button>\n            `\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* overrule the ha-style-dialog max-height on small screens */\n          ha-dialog {\n            max-height: 100%;\n            height: 100%;\n          }\n        }\n        @media all and (min-width: 850px) {\n          ha-dialog {\n            width: 845px;\n          }\n        }\n        ha-dialog {\n          max-width: 845px;\n          --dialog-z-index: 5;\n        }\n        .hidden {\n          display: none;\n        }\n        .element-preview {\n          position: relative;\n        }\n        hui-card-preview {\n          padding-top: 8px;\n          margin: 4px auto;\n          max-width: 390px;\n          display: block;\n          width: 100%;\n        }\n        .editor {\n          padding-top: 16px;\n        }\n      `,\n    ];\n  }\n\n  private _pickCard(): void {\n    if (\n      !this._params?.lovelaceConfig ||\n      !this._params?.path ||\n      !this._params?.saveConfig\n    ) {\n      return;\n    }\n\n    showCreateCardDialog(this, {\n      lovelaceConfig: this._params!.lovelaceConfig,\n      saveConfig: this._params!.saveConfig,\n      path: this._params!.path,\n      entities: this._params!.entities,\n    });\n    this.closeDialog();\n  }\n\n  private async _save(): Promise<void> {\n    if (\n      !this._params?.lovelaceConfig ||\n      !this._params?.path ||\n      !this._params?.saveConfig ||\n      !this._cardConfig\n    ) {\n      return;\n    }\n    this._saving = true;\n    await this._params!.saveConfig(\n      addCards(\n        this._params!.lovelaceConfig,\n        this._params!.path as [number],\n        this._cardConfig\n      )\n    );\n    this._saving = false;\n    showSaveSuccessToast(this, this.hass);\n    this.closeDialog();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-suggest-card\": HuiDialogSuggestCard;\n  }\n}\n"],"names":[],"sourceRoot":""}