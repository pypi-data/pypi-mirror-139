{"version":3,"file":"9d5bfe66.js","mappings":";;;;AAMA;ACMA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;;;AAKA;;;AAGA;AACA;;;;;;ACMA;AACA;AAEA;AAGA;AAEA;;;AAKA;;;AAKA;AACA;;;AAGA;AACA;AACA;;;;;;;;AASA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjDA;ACAA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;AAjBA;ACiCA;;AAEA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;AAKA;;AAGA;AACA;;;;;;;;;;;;;;;;;;;AA5CA;;ACIA;;;;;;;;;;;AApBA;;ACqBA;;;;AAMA;AAEA;AACA;;;;;AAKA;;;;;AAUA;;;;AAKA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5CA;ACgEA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;;AAKA;;AAKA;AACA;;;;;AAKA;;;;AASA;;;AAlBA;;AAyBA;AAGA;AAGA;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhGA;;ACjBA;;;;AAIA;;;;;;;;;;AAjBA;;;ACuMA;;;;;;AAMA;;AAMA;AACA;AACA;AACA;AACA;;AAEA;;AAOA;;;AAKA;;AAEA;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;;AAEA;;AAKA;AACA;;;AAGA;;AAGA;AACA;AACA;AACA;AACA;;;;;;AAtGA;;;;;;;;;;;;;;AAvIA","sources":["webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-abort.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-create-entry.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-external.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-form.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-loading.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-pick-flow.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-pick-handler.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/step-flow-progress.ts","webpack://home-assistant-frontend/./src/dialogs/config-flow/dialog-data-entry-flow.ts"],"sourcesContent":["import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__actions span:nth-child(1) {\n          flex: var(--secondary-action-button-flex, unset);\n        }\n        .mdc-dialog__actions span:nth-child(2) {\n          flex: var(--primary-action-button-flex, unset);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n          border-radius: var(\n            --ha-dialog-border-radius,\n            var(--ha-card-border-radius, 4px)\n          );\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { DataEntryFlowStepAbort } from \"../../data/data_entry_flow\";\nimport { HomeAssistant } from \"../../types\";\nimport { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-abort\")\nclass StepFlowAbort extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public step!: DataEntryFlowStepAbort;\n\n  protected render(): TemplateResult {\n    return html`\n      <h2>\n        ${this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.aborted\"\n        )}\n      </h2>\n      <div class=\"content\">\n        ${this.flowConfig.renderAbortDescription(this.hass, this.step)}\n      </div>\n      <div class=\"buttons\">\n        <mwc-button @click=${this._flowDone}\n          >${this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.close\"\n          )}</mwc-button\n        >\n      </div>\n    `;\n  }\n\n  private _flowDone(): void {\n    fireEvent(this, \"flow-update\", { step: undefined });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configFlowContentStyles;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-abort\": StepFlowAbort;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu-light\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-area-picker\";\nimport { DataEntryFlowStepCreateEntry } from \"../../data/data_entry_flow\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  updateDeviceRegistryEntry,\n} from \"../../data/device_registry\";\nimport { HomeAssistant } from \"../../types\";\nimport { showAlertDialog } from \"../generic/show-dialog-box\";\nimport { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-create-entry\")\nclass StepFlowCreateEntry extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public step!: DataEntryFlowStepCreateEntry;\n\n  @property({ attribute: false }) public devices!: DeviceRegistryEntry[];\n\n  protected render(): TemplateResult {\n    const localize = this.hass.localize;\n\n    return html`\n      <h2>Success!</h2>\n      <div class=\"content\">\n        ${this.flowConfig.renderCreateEntryDescription(this.hass, this.step)}\n        ${this.step.result?.state === \"not_loaded\"\n          ? html`<span class=\"error\"\n              >${localize(\n                \"ui.panel.config.integrations.config_flow.not_loaded\"\n              )}</span\n            >`\n          : \"\"}\n        ${this.devices.length === 0\n          ? \"\"\n          : html`\n              <p>We found the following devices:</p>\n              <div class=\"devices\">\n                ${this.devices.map(\n                  (device) =>\n                    html`\n                      <div class=\"device\">\n                        <div>\n                          <b>${computeDeviceName(device, this.hass)}</b><br />\n                          ${device.model} (${device.manufacturer})\n                        </div>\n                        <ha-area-picker\n                          .hass=${this.hass}\n                          .device=${device.id}\n                          @value-changed=${this._areaPicked}\n                        ></ha-area-picker>\n                      </div>\n                    `\n                )}\n              </div>\n            `}\n      </div>\n      <div class=\"buttons\">\n        <mwc-button @click=${this._flowDone}\n          >${localize(\n            \"ui.panel.config.integrations.config_flow.finish\"\n          )}</mwc-button\n        >\n      </div>\n    `;\n  }\n\n  private _flowDone(): void {\n    fireEvent(this, \"flow-update\", { step: undefined });\n  }\n\n  private async _areaPicked(ev: CustomEvent) {\n    const picker = ev.currentTarget as any;\n    const device = picker.device;\n\n    const area = ev.detail.value;\n    try {\n      await updateDeviceRegistryEntry(this.hass, device, {\n        area_id: area,\n      });\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.error_saving_area\",\n          \"error\",\n          err.message\n        ),\n      });\n      picker.value = null;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        .devices {\n          display: flex;\n          flex-wrap: wrap;\n          margin: -4px;\n          max-height: 600px;\n          overflow-y: auto;\n        }\n        .device {\n          border: 1px solid var(--divider-color);\n          padding: 5px;\n          border-radius: 4px;\n          margin: 4px;\n          display: inline-block;\n          width: 250px;\n        }\n        .buttons > *:last-child {\n          margin-left: auto;\n        }\n        paper-dropdown-menu-light {\n          cursor: pointer;\n        }\n        paper-item {\n          cursor: pointer;\n          white-space: nowrap;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          .device {\n            width: 100%;\n          }\n        }\n        .error {\n          color: var(--error-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-create-entry\": StepFlowCreateEntry;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { DataEntryFlowStepExternal } from \"../../data/data_entry_flow\";\nimport { HomeAssistant } from \"../../types\";\nimport { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-external\")\nclass StepFlowExternal extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public step!: DataEntryFlowStepExternal;\n\n  protected render(): TemplateResult {\n    const localize = this.hass.localize;\n\n    return html`\n      <h2>${this.flowConfig.renderExternalStepHeader(this.hass, this.step)}</h2>\n      <div class=\"content\">\n        ${this.flowConfig.renderExternalStepDescription(this.hass, this.step)}\n        <div class=\"open-button\">\n          <a href=${this.step.url} target=\"_blank\" rel=\"noreferrer\">\n            <mwc-button raised>\n              ${localize(\n                \"ui.panel.config.integrations.config_flow.external_step.open_site\"\n              )}\n            </mwc-button>\n          </a>\n        </div>\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    window.open(this.step.url);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        .open-button {\n          text-align: center;\n          padding: 24px 0;\n        }\n        .open-button a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-external\": StepFlowExternal;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-circular-progress\";\nimport { computeInitialHaFormData } from \"../../components/ha-form/compute-initial-ha-form-data\";\nimport type { HaFormSchema } from \"../../components/ha-form/types\";\nimport \"../../components/ha-form/ha-form\";\nimport \"../../components/ha-markdown\";\nimport \"../../components/ha-alert\";\nimport type { DataEntryFlowStepForm } from \"../../data/data_entry_flow\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-form\")\nclass StepFlowForm extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public step!: DataEntryFlowStepForm;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loading = false;\n\n  @state() private _stepData?: Record<string, any>;\n\n  @state() private _errorMsg?: string;\n\n  protected render(): TemplateResult {\n    const step = this.step;\n    const stepData = this._stepDataProcessed;\n\n    return html`\n      <h2>${this.flowConfig.renderShowFormStepHeader(this.hass, this.step)}</h2>\n      <div class=\"content\">\n        ${this.flowConfig.renderShowFormStepDescription(this.hass, this.step)}\n        ${this._errorMsg\n          ? html`<ha-alert alert-type=\"error\">${this._errorMsg}</ha-alert>`\n          : \"\"}\n        <ha-form\n          .data=${stepData}\n          .disabled=${this._loading}\n          @value-changed=${this._stepDataChanged}\n          .schema=${step.data_schema}\n          .error=${step.errors}\n          .computeLabel=${this._labelCallback}\n          .computeError=${this._errorCallback}\n        ></ha-form>\n      </div>\n      <div class=\"buttons\">\n        ${this._loading\n          ? html`\n              <div class=\"submit-spinner\">\n                <ha-circular-progress active></ha-circular-progress>\n              </div>\n            `\n          : html`\n              <div>\n                <mwc-button @click=${this._submitStep}>\n                  ${this.hass.localize(\n                    `ui.panel.config.integrations.config_flow.${\n                      this.step.last_step === false ? \"next\" : \"submit\"\n                    }`\n                  )}\n                </mwc-button>\n              </div>\n            `}\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    setTimeout(() => this.shadowRoot!.querySelector(\"ha-form\")!.focus(), 0);\n    this.addEventListener(\"keypress\", (ev) => {\n      if (ev.keyCode === 13) {\n        this._submitStep();\n      }\n    });\n  }\n\n  private get _stepDataProcessed() {\n    if (this._stepData !== undefined) {\n      return this._stepData;\n    }\n\n    this._stepData = computeInitialHaFormData(this.step.data_schema);\n    return this._stepData;\n  }\n\n  private async _submitStep(): Promise<void> {\n    const stepData = this._stepData || {};\n\n    const allRequiredInfoFilledIn =\n      stepData === undefined\n        ? // If no data filled in, just check that any field is required\n          this.step.data_schema.find((field) => !field.optional) === undefined\n        : // If data is filled in, make sure all required fields are\n          stepData &&\n          this.step.data_schema.every(\n            (field) =>\n              field.optional || ![\"\", undefined].includes(stepData![field.name])\n          );\n\n    if (!allRequiredInfoFilledIn) {\n      this._errorMsg = this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.not_all_required_fields\"\n      );\n      return;\n    }\n\n    this._loading = true;\n    this._errorMsg = undefined;\n\n    const flowId = this.step.flow_id;\n\n    const toSendData = {};\n    Object.keys(stepData).forEach((key) => {\n      const value = stepData[key];\n      const isEmpty = [undefined, \"\"].includes(value);\n\n      if (!isEmpty) {\n        toSendData[key] = value;\n      }\n    });\n\n    try {\n      const step = await this.flowConfig.handleFlowStep(\n        this.hass,\n        this.step.flow_id,\n        toSendData\n      );\n\n      // make sure we're still showing the same step as when we\n      // fired off request.\n      if (!this.step || flowId !== this.step.flow_id) {\n        return;\n      }\n\n      fireEvent(this, \"flow-update\", {\n        step,\n      });\n    } catch (err: any) {\n      this._errorMsg =\n        (err && err.body && err.body.message) || \"Unknown error occurred\";\n    } finally {\n      this._loading = false;\n    }\n  }\n\n  private _stepDataChanged(ev: CustomEvent): void {\n    this._stepData = ev.detail.value;\n  }\n\n  private _labelCallback = (field: HaFormSchema): string =>\n    this.flowConfig.renderShowFormStepFieldLabel(this.hass, this.step, field);\n\n  private _errorCallback = (error: string) =>\n    this.flowConfig.renderShowFormStepFieldError(this.hass, this.step, error);\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        .error {\n          color: red;\n        }\n\n        .submit-spinner {\n          margin-right: 16px;\n        }\n\n        ha-alert,\n        ha-form {\n          margin-top: 24px;\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-form\": StepFlowForm;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../components/ha-circular-progress\";\nimport { DataEntryFlowStep } from \"../../data/data_entry_flow\";\nimport { HomeAssistant } from \"../../types\";\nimport { FlowConfig, LoadingReason } from \"./show-dialog-data-entry-flow\";\n\n@customElement(\"step-flow-loading\")\nclass StepFlowLoading extends LitElement {\n  @property({ attribute: false }) public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public loadingReason!: LoadingReason;\n\n  @property() public handler?: string;\n\n  @property({ attribute: false }) public step?: DataEntryFlowStep | null;\n\n  protected render(): TemplateResult {\n    const description = this.flowConfig.renderLoadingDescription(\n      this.hass,\n      this.loadingReason,\n      this.handler,\n      this.step\n    );\n    return html`\n      <div class=\"init-spinner\">\n        ${description ? html`<div>${description}</div>` : \"\"}\n        <ha-circular-progress active></ha-circular-progress>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .init-spinner {\n        padding: 50px 100px;\n        text-align: center;\n      }\n      ha-circular-progress {\n        margin-top: 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-loading\": StepFlowLoading;\n  }\n}\n","import \"@polymer/paper-item\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-icon-next\";\nimport { localizeConfigFlowTitle } from \"../../data/config_flow\";\nimport { DataEntryFlowProgress } from \"../../data/data_entry_flow\";\nimport { domainToName } from \"../../data/integration\";\nimport { HomeAssistant } from \"../../types\";\nimport { brandsUrl } from \"../../util/brands-url\";\nimport { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-pick-flow\")\nclass StepFlowPickFlow extends LitElement {\n  public flowConfig!: FlowConfig;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public flowsInProgress!: DataEntryFlowProgress[];\n\n  @property() public handler!: string;\n\n  protected render(): TemplateResult {\n    return html`\n      <h2>\n        ${this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.pick_flow_step.title\"\n        )}\n      </h2>\n\n      <div>\n        ${this.flowsInProgress.map(\n          (flow) => html` <paper-icon-item\n            @click=${this._flowInProgressPicked}\n            .flow=${flow}\n          >\n            <img\n              slot=\"item-icon\"\n              loading=\"lazy\"\n              src=${brandsUrl({\n                domain: flow.handler,\n                type: \"icon\",\n                useFallback: true,\n                darkOptimized: this.hass.themes?.darkMode,\n              })}\n              referrerpolicy=\"no-referrer\"\n            />\n\n            <paper-item-body>\n              ${localizeConfigFlowTitle(this.hass.localize, flow)}\n            </paper-item-body>\n            <ha-icon-next></ha-icon-next>\n          </paper-icon-item>`\n        )}\n        <paper-item @click=${this._startNewFlowPicked} .handler=${this.handler}>\n          <paper-item-body>\n            ${this.hass.localize(\n              \"ui.panel.config.integrations.config_flow.pick_flow_step.new_flow\",\n              \"integration\",\n              domainToName(this.hass.localize, this.handler)\n            )}\n          </paper-item-body>\n          <ha-icon-next></ha-icon-next>\n        </paper-item>\n      </div>\n    `;\n  }\n\n  private _startNewFlowPicked(ev) {\n    this._startFlow(ev.currentTarget.handler);\n  }\n\n  private _startFlow(handler: string) {\n    fireEvent(this, \"flow-update\", {\n      stepPromise: this.flowConfig.createFlow(this.hass, handler),\n    });\n  }\n\n  private _flowInProgressPicked(ev) {\n    const flow: DataEntryFlowProgress = ev.currentTarget.flow;\n    fireEvent(this, \"flow-update\", {\n      stepPromise: this.flowConfig.fetchFlow(this.hass, flow.flow_id),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        img {\n          width: 40px;\n          height: 40px;\n        }\n        ha-icon-next {\n          margin-right: 8px;\n        }\n        div {\n          overflow: auto;\n          max-height: 600px;\n          margin: 16px 0;\n        }\n        h2 {\n          padding-right: 66px;\n        }\n        @media all and (max-height: 900px) {\n          div {\n            max-height: calc(100vh - 134px);\n          }\n        }\n        paper-icon-item,\n        paper-item {\n          cursor: pointer;\n          margin-bottom: 4px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-pick-flow\": StepFlowPickFlow;\n  }\n}\n","import \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport Fuse from \"fuse.js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../common/search/search-input\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport { LocalizeFunc } from \"../../common/translations/localize\";\nimport \"../../components/ha-icon-next\";\nimport { domainToName } from \"../../data/integration\";\nimport { HomeAssistant } from \"../../types\";\nimport { brandsUrl } from \"../../util/brands-url\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport { configFlowContentStyles } from \"./styles\";\n\ninterface HandlerObj {\n  name: string;\n  slug: string;\n}\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"handler-picked\": {\n      handler: string;\n    };\n  }\n}\n\n@customElement(\"step-flow-pick-handler\")\nclass StepFlowPickHandler extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public handlers!: string[];\n\n  @property() public initialFilter?: string;\n\n  @state() private _filter?: string;\n\n  private _width?: number;\n\n  private _height?: number;\n\n  private _filterHandlers = memoizeOne(\n    (h: string[], filter?: string, _localize?: LocalizeFunc) => {\n      const handlers: HandlerObj[] = h.map((handler) => ({\n        name: domainToName(this.hass.localize, handler),\n        slug: handler,\n      }));\n\n      if (filter) {\n        const options: Fuse.IFuseOptions<HandlerObj> = {\n          keys: [\"name\", \"slug\"],\n          isCaseSensitive: false,\n          minMatchCharLength: 2,\n          threshold: 0.2,\n        };\n        const fuse = new Fuse(handlers, options);\n        return fuse.search(filter).map((result) => result.item);\n      }\n      return handlers.sort((a, b) =>\n        caseInsensitiveStringCompare(a.name, b.name)\n      );\n    }\n  );\n\n  protected render(): TemplateResult {\n    const handlers = this._getHandlers();\n\n    return html`\n      <h2>${this.hass.localize(\"ui.panel.config.integrations.new\")}</h2>\n      <search-input\n        .hass=${this.hass}\n        autofocus\n        .filter=${this._filter}\n        @value-changed=${this._filterChanged}\n        .label=${this.hass.localize(\"ui.panel.config.integrations.search\")}\n        @keypress=${this._maybeSubmit}\n      ></search-input>\n      <div\n        style=${styleMap({\n          width: `${this._width}px`,\n          height: `${this._height}px`,\n        })}\n      >\n        ${handlers.length\n          ? handlers.map(\n              (handler: HandlerObj) =>\n                html`\n                  <paper-icon-item\n                    @click=${this._handlerPicked}\n                    .handler=${handler}\n                  >\n                    <img\n                      slot=\"item-icon\"\n                      loading=\"lazy\"\n                      src=${brandsUrl({\n                        domain: handler.slug,\n                        type: \"icon\",\n                        useFallback: true,\n                        darkOptimized: this.hass.themes?.darkMode,\n                      })}\n                      referrerpolicy=\"no-referrer\"\n                    />\n\n                    <paper-item-body> ${handler.name} </paper-item-body>\n                    <ha-icon-next></ha-icon-next>\n                  </paper-icon-item>\n                `\n            )\n          : html`\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.integrations.note_about_integrations\"\n                )}<br />\n                ${this.hass.localize(\n                  \"ui.panel.config.integrations.note_about_website_reference\"\n                )}<a\n                  href=${documentationUrl(\n                    this.hass,\n                    `/integrations/${\n                      this._filter ? `#search/${this._filter}` : \"\"\n                    }`\n                  )}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  >${this.hass.localize(\n                    \"ui.panel.config.integrations.home_assistant_website\"\n                  )}</a\n                >.\n              </p>\n            `}\n      </div>\n    `;\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    if (this._filter === undefined && this.initialFilter !== undefined) {\n      this._filter = this.initialFilter;\n    }\n    super.willUpdate(changedProps);\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    setTimeout(\n      () => this.shadowRoot!.querySelector(\"search-input\")!.focus(),\n      0\n    );\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    // Store the width and height so that when we search, box doesn't jump\n    const div = this.shadowRoot!.querySelector(\"div\")!;\n    if (!this._width) {\n      const width = div.clientWidth;\n      if (width) {\n        this._width = width;\n      }\n    }\n    if (!this._height) {\n      const height = div.clientHeight;\n      if (height) {\n        this._height = height;\n      }\n    }\n  }\n\n  private _getHandlers() {\n    return this._filterHandlers(\n      this.handlers,\n      this._filter,\n      this.hass.localize\n    );\n  }\n\n  private async _filterChanged(e) {\n    this._filter = e.detail.value;\n  }\n\n  private async _handlerPicked(ev) {\n    fireEvent(this, \"handler-picked\", {\n      handler: ev.currentTarget.handler.slug,\n    });\n  }\n\n  private _maybeSubmit(ev: KeyboardEvent) {\n    if (ev.key !== \"Enter\") {\n      return;\n    }\n\n    const handlers = this._getHandlers();\n\n    if (handlers.length > 0) {\n      fireEvent(this, \"handler-picked\", {\n        handler: handlers[0].slug,\n      });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        img {\n          width: 40px;\n          height: 40px;\n        }\n        search-input {\n          display: block;\n          margin: -12px 16px 0;\n        }\n        ha-icon-next {\n          margin-right: 8px;\n        }\n        div {\n          overflow: auto;\n          max-height: 600px;\n        }\n        h2 {\n          padding-right: 66px;\n        }\n        @media all and (max-height: 900px) {\n          div {\n            max-height: calc(100vh - 134px);\n          }\n        }\n        paper-icon-item {\n          cursor: pointer;\n          margin-bottom: 4px;\n        }\n        p {\n          text-align: center;\n          padding: 16px;\n          margin: 0;\n        }\n        p > a {\n          color: var(--primary-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-pick-handler\": StepFlowPickHandler;\n  }\n}\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../components/ha-circular-progress\";\nimport { DataEntryFlowStepProgress } from \"../../data/data_entry_flow\";\nimport { HomeAssistant } from \"../../types\";\nimport { FlowConfig } from \"./show-dialog-data-entry-flow\";\nimport { configFlowContentStyles } from \"./styles\";\n\n@customElement(\"step-flow-progress\")\nclass StepFlowProgress extends LitElement {\n  @property({ attribute: false })\n  public flowConfig!: FlowConfig;\n\n  @property({ attribute: false })\n  public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public step!: DataEntryFlowStepProgress;\n\n  protected render(): TemplateResult {\n    return html`\n      <h2>\n        ${this.flowConfig.renderShowFormProgressHeader(this.hass, this.step)}\n      </h2>\n      <div class=\"content\">\n        <ha-circular-progress active></ha-circular-progress>\n        ${this.flowConfig.renderShowFormProgressDescription(\n          this.hass,\n          this.step\n        )}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configFlowContentStyles,\n      css`\n        .content {\n          padding: 50px 100px;\n          text-align: center;\n        }\n        ha-circular-progress {\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"step-flow-progress\": StepFlowProgress;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiClose } from \"@mdi/js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { fireEvent, HASSDomEvent } from \"../../common/dom/fire_event\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-form/ha-form\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-markdown\";\nimport {\n  AreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../../data/area_registry\";\nimport { fetchConfigFlowInProgress } from \"../../data/config_flow\";\nimport {\n  DataEntryFlowProgress,\n  DataEntryFlowStep,\n  subscribeDataEntryFlowProgressed,\n} from \"../../data/data_entry_flow\";\nimport {\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../data/device_registry\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { showAlertDialog } from \"../generic/show-dialog-box\";\nimport {\n  DataEntryFlowDialogParams,\n  LoadingReason,\n} from \"./show-dialog-data-entry-flow\";\nimport \"./step-flow-abort\";\nimport \"./step-flow-create-entry\";\nimport \"./step-flow-external\";\nimport \"./step-flow-form\";\nimport \"./step-flow-loading\";\nimport \"./step-flow-pick-flow\";\nimport \"./step-flow-pick-handler\";\nimport \"./step-flow-progress\";\n\nlet instance = 0;\n\ninterface FlowUpdateEvent {\n  step?: DataEntryFlowStep;\n  stepPromise?: Promise<DataEntryFlowStep>;\n}\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"flow-update\": FlowUpdateEvent;\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"flow-update\": HASSDomEvent<FlowUpdateEvent>;\n  }\n}\n\n@customElement(\"dialog-data-entry-flow\")\nclass DataEntryFlowDialog extends LitElement {\n  public hass!: HomeAssistant;\n\n  @state() private _params?: DataEntryFlowDialogParams;\n\n  @state() private _loading?: LoadingReason;\n\n  private _instance = instance;\n\n  @state() private _step:\n    | DataEntryFlowStep\n    | undefined\n    // Null means we need to pick a config flow\n    | null;\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _areas?: AreaRegistryEntry[];\n\n  @state() private _handlers?: string[];\n\n  @state() private _handler?: string;\n\n  @state() private _flowsInProgress?: DataEntryFlowProgress[];\n\n  private _unsubAreas?: UnsubscribeFunc;\n\n  private _unsubDevices?: UnsubscribeFunc;\n\n  private _unsubDataEntryFlowProgressed?: Promise<UnsubscribeFunc>;\n\n  public async showDialog(params: DataEntryFlowDialogParams): Promise<void> {\n    this._params = params;\n    this._instance = instance++;\n\n    if (params.startFlowHandler) {\n      this._checkFlowsInProgress(params.startFlowHandler);\n      return;\n    }\n\n    if (params.continueFlowId) {\n      this._loading = \"loading_flow\";\n      const curInstance = this._instance;\n      let step: DataEntryFlowStep;\n      try {\n        step = await params.flowConfig.fetchFlow(\n          this.hass,\n          params.continueFlowId\n        );\n      } catch (err: any) {\n        this.closeDialog();\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.error\"\n          ),\n          text: `${this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.could_not_load\"\n          )}: ${err.message || err.body}`,\n        });\n        return;\n      }\n\n      // Happens if second showDialog called\n      if (curInstance !== this._instance) {\n        return;\n      }\n\n      this._processStep(step);\n      this._loading = undefined;\n      return;\n    }\n\n    // Create a new config flow. Show picker\n    if (!params.flowConfig.getFlowHandlers) {\n      throw new Error(\"No getFlowHandlers defined in flow config\");\n    }\n    this._step = null;\n\n    // We only load the handlers once\n    if (this._handlers === undefined) {\n      this._loading = \"loading_handlers\";\n      try {\n        this._handlers = await params.flowConfig.getFlowHandlers(this.hass);\n      } finally {\n        this._loading = undefined;\n      }\n    }\n  }\n\n  public closeDialog() {\n    if (!this._params) {\n      return;\n    }\n    const flowFinished = Boolean(\n      this._step && [\"create_entry\", \"abort\"].includes(this._step.type)\n    );\n\n    // If we created this flow, delete it now.\n    if (this._step && !flowFinished && !this._params.continueFlowId) {\n      this._params.flowConfig.deleteFlow(this.hass, this._step.flow_id);\n    }\n\n    if (this._step && this._params.dialogClosedCallback) {\n      this._params.dialogClosedCallback({\n        flowFinished,\n        entryId:\n          \"result\" in this._step ? this._step.result?.entry_id : undefined,\n      });\n    }\n\n    this._loading = undefined;\n    this._step = undefined;\n    this._params = undefined;\n    this._devices = undefined;\n    this._flowsInProgress = undefined;\n    this._handler = undefined;\n    if (this._unsubAreas) {\n      this._unsubAreas();\n      this._unsubAreas = undefined;\n    }\n    if (this._unsubDevices) {\n      this._unsubDevices();\n      this._unsubDevices = undefined;\n    }\n    if (this._unsubDataEntryFlowProgressed) {\n      this._unsubDataEntryFlowProgressed.then((unsub) => {\n        unsub();\n      });\n      this._unsubDataEntryFlowProgressed = undefined;\n    }\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        hideActions\n      >\n        <div>\n          ${this._loading ||\n          (this._step === null &&\n            this._handlers === undefined &&\n            this._handler === undefined)\n            ? html`\n                <step-flow-loading\n                  .flowConfig=${this._params.flowConfig}\n                  .hass=${this.hass}\n                  .loadingReason=${this._loading || \"loading_handlers\"}\n                  .handler=${this._handler}\n                  .step=${this._step}\n                ></step-flow-loading>\n              `\n            : this._step === undefined\n            ? // When we are going to next step, we render 1 round of empty\n              // to reset the element.\n              \"\"\n            : html`\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.integrations.config_flow.dismiss\"\n                  )}\n                  .path=${mdiClose}\n                  dialogAction=\"close\"\n                  ?rtl=${computeRTL(this.hass)}\n                ></ha-icon-button>\n                ${this._step === null\n                  ? this._handler\n                    ? html`<step-flow-pick-flow\n                        .flowConfig=${this._params.flowConfig}\n                        .hass=${this.hass}\n                        .handler=${this._handler}\n                        .flowsInProgress=${this._flowsInProgress}\n                      ></step-flow-pick-flow>`\n                    : // Show handler picker\n                      html`\n                        <step-flow-pick-handler\n                          .hass=${this.hass}\n                          .handlers=${this._handlers}\n                          .initialFilter=${this._params.searchQuery}\n                          @handler-picked=${this._handlerPicked}\n                        ></step-flow-pick-handler>\n                      `\n                  : this._step.type === \"form\"\n                  ? html`\n                      <step-flow-form\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                      ></step-flow-form>\n                    `\n                  : this._step.type === \"external\"\n                  ? html`\n                      <step-flow-external\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                      ></step-flow-external>\n                    `\n                  : this._step.type === \"abort\"\n                  ? html`\n                      <step-flow-abort\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                      ></step-flow-abort>\n                    `\n                  : this._step.type === \"progress\"\n                  ? html`\n                      <step-flow-progress\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                      ></step-flow-progress>\n                    `\n                  : this._devices === undefined || this._areas === undefined\n                  ? // When it's a create entry result, we will fetch device & area registry\n                    html`\n                      <step-flow-loading\n                        .flowConfig=${this._params.flowConfig}\n                        .hass=${this.hass}\n                        loadingReason=\"loading_devices_areas\"\n                      ></step-flow-loading>\n                    `\n                  : html`\n                      <step-flow-create-entry\n                        .flowConfig=${this._params.flowConfig}\n                        .step=${this._step}\n                        .hass=${this.hass}\n                        .devices=${this._devices}\n                        .areas=${this._areas}\n                      ></step-flow-create-entry>\n                    `}\n              `}\n        </div>\n      </ha-dialog>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this.addEventListener(\"flow-update\", (ev) => {\n      const { step, stepPromise } = ev.detail;\n      this._processStep(step || stepPromise);\n    });\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (!changedProps.has(\"_step\") || !this._step) {\n      return;\n    }\n    if ([\"external\", \"progress\"].includes(this._step.type)) {\n      // external and progress step will send update event from the backend, so we should subscribe to them\n      this._subscribeDataEntryFlowProgressed();\n    }\n    if (this._step.type === \"create_entry\") {\n      if (this._step.result && this._params!.flowConfig.loadDevicesAndAreas) {\n        this._fetchDevices(this._step.result.entry_id);\n        this._fetchAreas();\n      } else {\n        this._devices = [];\n        this._areas = [];\n      }\n    }\n  }\n\n  private async _fetchDevices(configEntryId) {\n    this._unsubDevices = subscribeDeviceRegistry(\n      this.hass.connection,\n      (devices) => {\n        this._devices = devices.filter((device) =>\n          device.config_entries.includes(configEntryId)\n        );\n      }\n    );\n  }\n\n  private async _fetchAreas() {\n    this._unsubAreas = subscribeAreaRegistry(this.hass.connection, (areas) => {\n      this._areas = areas;\n    });\n  }\n\n  private async _checkFlowsInProgress(handler: string) {\n    this._loading = \"loading_handlers\";\n    this._handler = handler;\n\n    const flowsInProgress = (\n      await fetchConfigFlowInProgress(this.hass.connection)\n    ).filter((flow) => flow.handler === handler);\n\n    if (!flowsInProgress.length) {\n      // No flows in progress, create a new flow\n      this._loading = \"loading_flow\";\n      let step: DataEntryFlowStep;\n      try {\n        step = await this._params!.flowConfig.createFlow(this.hass, handler);\n      } catch (err: any) {\n        this.closeDialog();\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.error\"\n          ),\n          text: `${this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.could_not_load\"\n          )}: ${err.message || err.body}`,\n        });\n        return;\n      } finally {\n        this._handler = undefined;\n      }\n      this._processStep(step);\n    } else {\n      this._step = null;\n      this._flowsInProgress = flowsInProgress;\n    }\n    this._loading = undefined;\n  }\n\n  private _handlerPicked(ev) {\n    this._checkFlowsInProgress(ev.detail.handler);\n  }\n\n  private async _processStep(\n    step: DataEntryFlowStep | undefined | Promise<DataEntryFlowStep>\n  ): Promise<void> {\n    if (step instanceof Promise) {\n      this._loading = \"loading_step\";\n      try {\n        this._step = await step;\n      } catch (err: any) {\n        this.closeDialog();\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.integrations.config_flow.error\"\n          ),\n          text: err.message || err.body,\n        });\n        return;\n      } finally {\n        this._loading = undefined;\n      }\n      return;\n    }\n\n    if (step === undefined) {\n      this.closeDialog();\n      return;\n    }\n    this._step = undefined;\n    await this.updateComplete;\n    this._step = step;\n  }\n\n  private _subscribeDataEntryFlowProgressed() {\n    if (this._unsubDataEntryFlowProgressed) {\n      return;\n    }\n    this._unsubDataEntryFlowProgressed = subscribeDataEntryFlowProgressed(\n      this.hass.connection,\n      async (ev) => {\n        if (ev.data.flow_id !== this._step?.flow_id) {\n          return;\n        }\n        this._processStep(\n          this._params!.flowConfig.fetchFlow(this.hass, this._step?.flow_id)\n        );\n      }\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0;\n        }\n        ha-icon-button {\n          padding: 16px;\n          position: absolute;\n          top: 0;\n          right: 0;\n        }\n        ha-icon-button[rtl] {\n          right: auto;\n          left: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-data-entry-flow\": DataEntryFlowDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}