{"version":3,"file":"760999b8.js","mappings":";AAYA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;ACjBA;;;;;;;;;;;;;;;;;ACAA;;;ACqEA;;;AAGA;;;AAaA;AASA;;;AAKA;AACA;AACA;AAGA;AAGA;AACA;;;;AAMA;AACA;AACA;;AAIA;;AAGA;AACA;AACA;AAGA;AAGA;;AAEA;;;AAIA;AAGA;;;AAGA;AACA;;;;;;;AAOA;AAGA;;;AAGA;AACA;;;;;;;;AAQA;AAEA;;;;AAKA;AACA;;AAEA;;AAIA;;;AAIA;AACA;;AAGA;;AAQA;;;AAIA;AACA;;AAEA;;;AA5LA;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/panels/config/lovelace/dashboards/dialog-lovelace-dashboard-detail.ts"],"sourcesContent":["import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__actions span:nth-child(1) {\n          flex: var(--secondary-action-button-flex, unset);\n        }\n        .mdc-dialog__actions span:nth-child(2) {\n          flex: var(--primary-action-button-flex, unset);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n          border-radius: var(\n            --ha-dialog-border-radius,\n            var(--ha-card-border-radius, 4px)\n          );\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { Formfield } from \"@material/mwc-formfield\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\n// @ts-expect-error\nexport class HaFormfield extends Formfield {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Formfield.styles,\n      css`\n        :host(:not([alignEnd])) ::slotted(ha-switch) {\n          margin-right: 10px;\n        }\n        :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n          margin-left: 10px;\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { Switch } from \"@material/mwc-switch/deprecated\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\n// @ts-expect-error\nexport class HaSwitch extends Switch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      Switch.styles,\n      css`\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { slugify } from \"../../../../common/string/slugify\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-switch\";\nimport type { HaSwitch } from \"../../../../components/ha-switch\";\nimport {\n  LovelaceDashboard,\n  LovelaceDashboardCreateParams,\n  LovelaceDashboardMutableParams,\n} from \"../../../../data/lovelace\";\nimport { DEFAULT_PANEL, setDefaultPanel } from \"../../../../data/panel\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceDashboardDetailsDialogParams } from \"./show-dialog-lovelace-dashboard-detail\";\n\n@customElement(\"dialog-lovelace-dashboard-detail\")\nexport class DialogLovelaceDashboardDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: LovelaceDashboardDetailsDialogParams;\n\n  @state() private _urlPath!: LovelaceDashboard[\"url_path\"];\n\n  @state() private _showInSidebar!: boolean;\n\n  @state() private _icon!: string;\n\n  @state() private _title!: string;\n\n  @state()\n  private _requireAdmin!: LovelaceDashboard[\"require_admin\"];\n\n  @state() private _error?: string;\n\n  @state() private _submitting = false;\n\n  public async showDialog(\n    params: LovelaceDashboardDetailsDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._urlPath = this._params.urlPath || \"\";\n    if (this._params.dashboard) {\n      this._showInSidebar = !!this._params.dashboard.show_in_sidebar;\n      this._icon = this._params.dashboard.icon || \"\";\n      this._title = this._params.dashboard.title || \"\";\n      this._requireAdmin = this._params.dashboard.require_admin || false;\n    } else {\n      this._showInSidebar = true;\n      this._icon = \"\";\n      this._title = \"\";\n      this._requireAdmin = false;\n    }\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const defaultPanelUrlPath = this.hass.defaultPanel;\n    const urlInvalid =\n      this._params.urlPath !== \"lovelace\" &&\n      !/^[a-zA-Z0-9_-]+-[a-zA-Z0-9_-]+$/.test(this._urlPath);\n    const titleInvalid = !this._title.trim();\n    const dir = computeRTLDirection(this.hass);\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.urlPath\n            ? this._title ||\n                this.hass.localize(\n                  \"ui.panel.config.lovelace.dashboards.detail.edit_dashboard\"\n                )\n            : this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.detail.new_dashboard\"\n              )\n        )}\n      >\n        <div>\n          ${this._params.dashboard && !this._params.dashboard.id\n            ? this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.cant_edit_yaml\"\n              )\n            : this._params.urlPath === \"lovelace\"\n            ? this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.cant_edit_default\"\n              )\n            : html`\n                ${this._error\n                  ? html` <div class=\"error\">${this._error}</div> `\n                  : \"\"}\n                <div class=\"form\">\n                  <paper-input\n                    .value=${this._title}\n                    @value-changed=${this._titleChanged}\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.title\"\n                    )}\n                    @blur=${this.hass.userData?.showAdvanced\n                      ? this._fillUrlPath\n                      : undefined}\n                    .invalid=${titleInvalid}\n                    .errorMessage=${this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.title_required\"\n                    )}\n                    dialogInitialFocus\n                  ></paper-input>\n                  <ha-icon-picker\n                    .value=${this._icon}\n                    @value-changed=${this._iconChanged}\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.icon\"\n                    )}\n                  ></ha-icon-picker>\n                  ${!this._params.dashboard && this.hass.userData?.showAdvanced\n                    ? html`\n                        <paper-input\n                          .value=${this._urlPath}\n                          @value-changed=${this._urlChanged}\n                          .label=${this.hass.localize(\n                            \"ui.panel.config.lovelace.dashboards.detail.url\"\n                          )}\n                          .errorMessage=${this.hass.localize(\n                            \"ui.panel.config.lovelace.dashboards.detail.url_error_msg\"\n                          )}\n                          .invalid=${urlInvalid}\n                        ></paper-input>\n                      `\n                    : \"\"}\n                  <div>\n                    <ha-formfield\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.lovelace.dashboards.detail.show_sidebar\"\n                      )}\n                      .dir=${dir}\n                    >\n                      <ha-switch\n                        .checked=${this._showInSidebar}\n                        @change=${this._showSidebarChanged}\n                      >\n                      </ha-switch>\n                    </ha-formfield>\n                  </div>\n                  <div>\n                    <ha-formfield\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.lovelace.dashboards.detail.require_admin\"\n                      )}\n                      .dir=${dir}\n                    >\n                      <ha-switch\n                        .checked=${this._requireAdmin}\n                        @change=${this._requireAdminChanged}\n                      >\n                      </ha-switch>\n                    </ha-formfield>\n                  </div>\n                </div>\n              `}\n        </div>\n        ${this._params.urlPath\n          ? html`\n              ${this._params.dashboard?.id\n                ? html`\n                    <mwc-button\n                      slot=\"secondaryAction\"\n                      class=\"warning\"\n                      @click=${this._deleteDashboard}\n                      .disabled=${this._submitting}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.lovelace.dashboards.detail.delete\"\n                      )}\n                    </mwc-button>\n                  `\n                : \"\"}\n              <mwc-button\n                slot=\"secondaryAction\"\n                @click=${this._toggleDefault}\n                .disabled=${this._params.urlPath === \"lovelace\" &&\n                defaultPanelUrlPath === \"lovelace\"}\n              >\n                ${this._params.urlPath === defaultPanelUrlPath\n                  ? this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.remove_default\"\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.lovelace.dashboards.detail.set_default\"\n                    )}\n              </mwc-button>\n            `\n          : \"\"}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateDashboard}\n          .disabled=${urlInvalid || titleInvalid || this._submitting}\n        >\n          ${this._params.urlPath\n            ? this._params.dashboard?.id\n              ? this.hass.localize(\n                  \"ui.panel.config.lovelace.dashboards.detail.update\"\n                )\n              : this.hass.localize(\"ui.common.close\")\n            : this.hass.localize(\n                \"ui.panel.config.lovelace.dashboards.detail.create\"\n              )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _urlChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._urlPath = ev.detail.value;\n  }\n\n  private _iconChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _titleChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._title = ev.detail.value;\n    if (!this.hass.userData?.showAdvanced) {\n      this._fillUrlPath();\n    }\n  }\n\n  private _fillUrlPath() {\n    if ((this.hass.userData?.showAdvanced && this._urlPath) || !this._title) {\n      return;\n    }\n\n    const slugifyTitle = slugify(this._title, \"-\");\n    this._urlPath = slugifyTitle.includes(\"-\")\n      ? slugifyTitle\n      : `lovelace-${slugifyTitle}`;\n  }\n\n  private _showSidebarChanged(ev: Event) {\n    this._showInSidebar = (ev.target as HaSwitch).checked;\n  }\n\n  private _requireAdminChanged(ev: Event) {\n    this._requireAdmin = (ev.target as HaSwitch).checked;\n  }\n\n  private _toggleDefault() {\n    const urlPath = this._params?.urlPath;\n    if (!urlPath) {\n      return;\n    }\n    setDefaultPanel(\n      this,\n      urlPath === this.hass.defaultPanel ? DEFAULT_PANEL : urlPath\n    );\n  }\n\n  private async _updateDashboard() {\n    if (this._params?.urlPath && !this._params.dashboard?.id) {\n      this._close();\n    }\n    this._submitting = true;\n    try {\n      const values: Partial<LovelaceDashboardMutableParams> = {\n        require_admin: this._requireAdmin,\n        show_in_sidebar: this._showInSidebar,\n        icon: this._icon || undefined,\n        title: this._title,\n      };\n      if (this._params!.dashboard) {\n        await this._params!.updateDashboard(values);\n      } else {\n        (values as LovelaceDashboardCreateParams).url_path =\n          this._urlPath.trim();\n        (values as LovelaceDashboardCreateParams).mode = \"storage\";\n        await this._params!.createDashboard(\n          values as LovelaceDashboardCreateParams\n        );\n      }\n      this._close();\n    } catch (err: any) {\n      this._error = err?.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteDashboard() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeDashboard()) {\n        this._close();\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _close(): void {\n    this._params = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-switch {\n          padding: 16px 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-lovelace-dashboard-detail\": DialogLovelaceDashboardDetail;\n  }\n}\n"],"names":[],"sourceRoot":""}