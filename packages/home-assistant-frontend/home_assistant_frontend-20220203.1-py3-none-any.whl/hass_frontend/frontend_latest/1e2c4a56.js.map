{"version":3,"file":"1e2c4a56.js","mappings":";;AAqFA;AApEA","sources":["webpack://home-assistant-frontend/../src/lib/lit-virtualizer.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { scroll } from './scroll.js';\nimport { scrollerRef, ContainerElement } from './uni-virtualizer/lib/VirtualScroller.js';\nimport { LayoutSpecifier, Layout, LayoutConstructor } from './uni-virtualizer/lib/layouts/Layout.js';\n\n/**\n * A LitElement wrapper of the scroll directive.\n *\n * Import this module to declare the lit-virtualizer custom element.\n * Pass an items array, renderItem method, and scroll target as properties\n * to the <lit-virtualizer> element.\n */\n@customElement('lit-virtualizer')\nexport class LitVirtualizer extends LitElement {\n    @property()\n    renderItem?: ((item: any, index?: number) => TemplateResult);\n\n    @property({attribute: false})\n    items: Array<unknown> = [];\n\n    @property({attribute: false})\n    scrollTarget: Element | Window = this;\n\n    @property()\n    keyFunction: ((item:unknown) => unknown) | undefined = undefined;\n\n    private _layout: Layout | LayoutConstructor | LayoutSpecifier | null = null;\n\n    private _scrollToIndex: {index: number, position: string} | null = null;\n  \n    createRenderRoot() {\n        return this;\n    }\n\n    // get items() {\n    //     return this._items;\n    // }\n\n    // set items(items) {\n    //     this._items = items;\n    //     this._scroller.totalItems = items.length;\n    // }\n\n    /**\n     * The method used for rendering each item.\n     */\n    // get renderItem() {\n    //     return this._renderItem;\n    // }\n    // set renderItem(renderItem) {\n    //     if (renderItem !== this.renderItem) {\n    //         this._renderItem = renderItem;\n    //         this.requestUpdate();\n    //     }\n    // }\n\n    @property({attribute:false})\n    set layout(layout: Layout | LayoutConstructor | LayoutSpecifier | null) {\n        // TODO (graynorton): Shouldn't have to set this here\n        this._layout = layout;\n        this.requestUpdate();\n    }\n\n    get layout(): Layout | LayoutConstructor | LayoutSpecifier | null {\n        return (this as ContainerElement)[scrollerRef]!.layout;\n    }\n    \n    \n    /**\n     * Scroll to the specified index, placing that item at the given position\n     * in the scroll view.\n     */\n    async scrollToIndex(index: number, position: string = 'start') {\n        this._scrollToIndex = {index, position};\n        this.requestUpdate();\n        await this.updateComplete;\n        this._scrollToIndex = null;\n    }\n\n    render(): TemplateResult {\n        const { items, renderItem, keyFunction, scrollTarget } = this;\n        const layout = this._layout;\n        return html`\n            ${scroll({ items, renderItem, layout, keyFunction, scrollTarget, scrollToIndex: this._scrollToIndex })}\n        `;\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'lit-virtualizer': LitVirtualizer;\n    }\n}"],"names":[],"sourceRoot":""}