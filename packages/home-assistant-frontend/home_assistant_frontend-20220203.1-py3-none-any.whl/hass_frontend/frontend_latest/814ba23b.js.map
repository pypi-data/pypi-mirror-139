{"version":3,"file":"814ba23b.js","mappings":";;;;AAiBA;AACA;AACA;;AAZA;;;;;AAAA;;;AC0DA;AACA;AACA;;;;;AAKA;;AAEA;AACA;;AAIA;AAEA;AACA;;;;;AAQA;AAEA;AACA;;AAGA;;AAGA;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AAGA;AACA;AACA;;AAEA;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;AAtEA;;;;;;;AApCA;;ACHA;;;;;AAUA;;AAEA;;;AAGA;;AAIA;;;AA7BA;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-help-tooltip.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-action-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-theme-select-editor.ts"],"sourcesContent":["import { mdiHelpCircle } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-help-tooltip\")\nexport class HaHelpTooltip extends LitElement {\n  @property() public label!: string;\n\n  @property() public position = \"top\";\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-svg-icon .path=${mdiHelpCircle}></ha-svg-icon>\n      <paper-tooltip\n        offset=\"4\"\n        .position=${this.position}\n        .fitToVisibleBounds=${true}\n        >${this.label}</paper-tooltip\n      >\n    `;\n  }\n\n  static get styles() {\n    return css`\n      ha-svg-icon {\n        --mdc-icon-size: var(--ha-help-tooltip-size, 14px);\n        color: var(--ha-help-tooltip-color, var(--disabled-text-color));\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-help-tooltip\": HaHelpTooltip;\n  }\n}\n","import \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport type { PaperListboxElement } from \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-help-tooltip\";\nimport \"../../../components/ha-service-control\";\nimport {\n  ActionConfig,\n  CallServiceActionConfig,\n  NavigateActionConfig,\n  UrlActionConfig,\n} from \"../../../data/lovelace\";\nimport { ServiceAction } from \"../../../data/script\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EditorTarget } from \"../editor/types\";\n\n@customElement(\"hui-action-editor\")\nexport class HuiActionEditor extends LitElement {\n  @property() public config?: ActionConfig;\n\n  @property() public label?: string;\n\n  @property() public actions?: string[];\n\n  @property() public tooltipText?: string;\n\n  @property() protected hass?: HomeAssistant;\n\n  get _navigation_path(): string {\n    const config = this.config as NavigateActionConfig | undefined;\n    return config?.navigation_path || \"\";\n  }\n\n  get _url_path(): string {\n    const config = this.config as UrlActionConfig | undefined;\n    return config?.url_path || \"\";\n  }\n\n  get _service(): string {\n    const config = this.config as CallServiceActionConfig;\n    return config?.service || \"\";\n  }\n\n  private _serviceAction = memoizeOne(\n    (config: CallServiceActionConfig): ServiceAction => ({\n      service: this._service,\n      data: config.service_data,\n      target: config.target,\n    })\n  );\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.actions) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"dropdown\">\n        <paper-dropdown-menu\n          .label=${this.label}\n          .configValue=${\"action\"}\n          @iron-select=${this._actionPicked}\n        >\n          <paper-listbox\n            slot=\"dropdown-content\"\n            attr-for-selected=\"value\"\n            .selected=${this.config?.action ?? \"default\"}\n          >\n            <paper-item .value=${\"default\"}\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.action-editor.actions.default_action\"\n              )}</paper-item\n            >\n            ${this.actions.map(\n              (action) => html`\n                <paper-item .value=${action}\n                  >${this.hass!.localize(\n                    `ui.panel.lovelace.editor.action-editor.actions.${action}`\n                  )}</paper-item\n                >\n              `\n            )}\n          </paper-listbox>\n        </paper-dropdown-menu>\n        ${this.tooltipText\n          ? html`\n              <ha-help-tooltip .label=${this.tooltipText}></ha-help-tooltip>\n            `\n          : \"\"}\n      </div>\n      ${this.config?.action === \"navigate\"\n        ? html`\n            <paper-input\n              label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.action-editor.navigation_path\"\n              )}\n              .value=${this._navigation_path}\n              .configValue=${\"navigation_path\"}\n              @value-changed=${this._valueChanged}\n            ></paper-input>\n          `\n        : \"\"}\n      ${this.config?.action === \"url\"\n        ? html`\n            <paper-input\n              label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.action-editor.url_path\"\n              )}\n              .value=${this._url_path}\n              .configValue=${\"url_path\"}\n              @value-changed=${this._valueChanged}\n            ></paper-input>\n          `\n        : \"\"}\n      ${this.config?.action === \"call-service\"\n        ? html`\n            <ha-service-control\n              .hass=${this.hass}\n              .value=${this._serviceAction(this.config)}\n              .showAdvanced=${this.hass.userData?.showAdvanced}\n              narrow\n              @value-changed=${this._serviceValueChanged}\n            ></ha-service-control>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _actionPicked(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this.hass) {\n      return;\n    }\n    const item = ev.detail.item;\n    const value = item.value;\n    if (this.config?.action === value) {\n      return;\n    }\n    if (value === \"default\") {\n      fireEvent(this, \"value-changed\", { value: undefined });\n      if (this.config?.action) {\n        (\n          this.shadowRoot!.querySelector(\"paper-listbox\") as PaperListboxElement\n        ).select(this.config.action);\n      }\n      return;\n    }\n\n    let data;\n    switch (value) {\n      case \"url\": {\n        data = { url_path: this._url_path };\n        break;\n      }\n      case \"call-service\": {\n        data = { service: this._service };\n        break;\n      }\n      case \"navigate\": {\n        data = { navigation_path: this._navigation_path };\n        break;\n      }\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: { action: value, ...data },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value = ev.detail.value;\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n    if (target.configValue) {\n      fireEvent(this, \"value-changed\", {\n        value: { ...this.config!, [target.configValue!]: value },\n      });\n    }\n  }\n\n  private _serviceValueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.config!,\n        service: ev.detail.value.service || \"\",\n        service_data: ev.detail.value.data || {},\n        target: ev.detail.value.target || {},\n      },\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .dropdown {\n        display: flex;\n      }\n      ha-service-control {\n        --service-control-padding: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-action-editor\": HuiActionEditor;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-dropdown-menu\n        .label=${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`}\n        dynamic-align\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${this.value}\n          attr-for-selected=\"theme\"\n          @iron-select=${this._changed}\n        >\n          <paper-item theme=\"remove\"\n            >${this.hass!.localize(\n              \"ui.panel.lovelace.editor.card.generic.no_theme\"\n            )}</paper-item\n          >\n          ${Object.keys(this.hass!.themes.themes)\n            .sort()\n            .map(\n              (theme) =>\n                html` <paper-item theme=${theme}>${theme}</paper-item> `\n            )}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n      paper-item {\n        cursor: pointer;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.selected === \"\") {\n      return;\n    }\n    this.value = ev.target.selected === \"remove\" ? \"\" : ev.target.selected;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}