{"version":3,"file":"c6c9dff8.js","mappings":";AA4CA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAlBA;;AAEA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-input-text-entity-row.ts"],"sourcesContent":["import { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { UNAVAILABLE, UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { setValue } from \"../../../data/input_text\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { EntityConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-input-text-entity-row\")\nclass HuiInputTextEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        <paper-input\n          no-label-float\n          .disabled=${stateObj.state === UNAVAILABLE}\n          .value=${stateObj.state}\n          .minlength=${stateObj.attributes.min}\n          .maxlength=${stateObj.attributes.max}\n          .autoValidate=${stateObj.attributes.pattern}\n          .pattern=${stateObj.attributes.pattern}\n          .type=${stateObj.attributes.mode}\n          @change=${this._selectedValueChanged}\n          placeholder=\"(empty value)\"\n        ></paper-input>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  private get _inputEl(): PaperInputElement {\n    return this.shadowRoot!.querySelector(\"paper-input\") as PaperInputElement;\n  }\n\n  private _selectedValueChanged(ev): void {\n    const element = this._inputEl;\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    // Filter out invalid text states\n    if (element.value && UNAVAILABLE_STATES.includes(element.value)) {\n      element.value = stateObj.state;\n      return;\n    }\n\n    if (element.value !== stateObj.state) {\n      setValue(this.hass!, stateObj.entity_id, element.value!);\n    }\n\n    ev.target.blur();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-text-entity-row\": HuiInputTextEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}