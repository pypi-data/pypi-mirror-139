{"version":3,"file":"b580c40c.js","mappings":";AAYA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;AC8BA;;;AAGA;;;;;;AASA;;;;;AAUA;;;;;;AAQA;AACA;;;AAGA;;AAIA;AAQA;AACA;;;;;;;;AASA;AAGA;AACA;;;;;;AAMA;AACA;AAGA;;;;;AApGA;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/cloud/account/dialog-cloud-tts-try.ts"],"sourcesContent":["import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__actions span:nth-child(1) {\n          flex: var(--secondary-action-button-flex, unset);\n        }\n        .mdc-dialog__actions span:nth-child(2) {\n          flex: var(--primary-action-button-flex, unset);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n          border-radius: var(\n            --ha-dialog-border-radius,\n            var(--ha-card-border-radius, 4px)\n          );\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiPlayCircleOutline, mdiRobot } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport type { PaperTextareaElement } from \"@polymer/paper-input/paper-textarea\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { LocalStorage } from \"../../../../common/decorators/local-storage\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeStateDomain } from \"../../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { supportsFeature } from \"../../../../common/entity/supports-feature\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-paper-dropdown-menu\";\nimport { showAutomationEditor } from \"../../../../data/automation\";\nimport { SUPPORT_PLAY_MEDIA } from \"../../../../data/media-player\";\nimport { convertTextToSpeech } from \"../../../../data/tts\";\nimport { showAlertDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { TryTtsDialogParams } from \"./show-dialog-cloud-tts-try\";\n\n@customElement(\"dialog-cloud-try-tts\")\nexport class DialogTryTts extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loadingExample = false;\n\n  @state() private _params?: TryTtsDialogParams;\n\n  @query(\"#message\") private _messageInput?: PaperTextareaElement;\n\n  @LocalStorage(\"cloudTtsTryMessage\", false, false) private _message!: string;\n\n  @LocalStorage(\"cloudTtsTryTarget\", false, false) private _target!: string;\n\n  public showDialog(params: TryTtsDialogParams) {\n    this._params = params;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const target = this._target || \"browser\";\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.cloud.account.tts.dialog.header\")\n        )}\n      >\n        <div>\n          <paper-textarea\n            id=\"message\"\n            label=\"Message\"\n            .value=${this._message ||\n            this.hass.localize(\n              \"ui.panel.config.cloud.account.tts.dialog.example_message\",\n              \"name\",\n              this.hass.user!.name\n            )}\n          >\n          </paper-textarea>\n\n          <ha-paper-dropdown-menu\n            .label=${this.hass.localize(\n              \"ui.panel.config.cloud.account.tts.dialog.target\"\n            )}\n          >\n            <paper-listbox\n              id=\"target\"\n              slot=\"dropdown-content\"\n              attr-for-selected=\"item-value\"\n              .selected=${target}\n              @selected-changed=${this._handleTargetChanged}\n            >\n              <paper-item item-value=\"browser\">\n                ${this.hass.localize(\n                  \"ui.panel.config.cloud.account.tts.dialog.target_browser\"\n                )}\n              </paper-item>\n              ${Object.values(this.hass.states)\n                .filter(\n                  (entity) =>\n                    computeStateDomain(entity) === \"media_player\" &&\n                    supportsFeature(entity, SUPPORT_PLAY_MEDIA)\n                )\n                .map(\n                  (entity) => html`\n                    <paper-item .itemValue=${entity.entity_id}>\n                      ${computeStateName(entity)}\n                    </paper-item>\n                  `\n                )}\n            </paper-listbox>\n          </ha-paper-dropdown-menu>\n        </div>\n        <mwc-button\n          slot=\"primaryAction\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.cloud.account.tts.dialog.play\"\n          )}\n          @click=${this._playExample}\n          .disabled=${this._loadingExample}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlayCircleOutline}></ha-svg-icon>\n        </mwc-button>\n        <mwc-button\n          slot=\"secondaryAction\"\n          .disabled=${target === \"browser\"}\n          .label=${this.hass.localize(\n            \"ui.panel.config.cloud.account.tts.dialog.create_automation\"\n          )}\n          @click=${this._createAutomation}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiRobot}></ha-svg-icon>\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _handleTargetChanged(ev) {\n    this._target = ev.detail.value;\n    this.requestUpdate(\"_target\");\n  }\n\n  private async _playExample() {\n    const message = this._messageInput?.value;\n    if (!message) {\n      return;\n    }\n    this._message = message;\n\n    if (this._target === \"browser\") {\n      // We create the audio element here + do a play, because iOS requires it to be done by user action\n      const audio = new Audio();\n      audio.play();\n      this._playBrowser(message, audio);\n    } else {\n      this.hass.callService(\"tts\", \"cloud_say\", {\n        entity_id: this._target,\n        message,\n      });\n    }\n  }\n\n  private _createAutomation() {\n    const message = this._messageInput!.value!;\n    this._message = message;\n    showAutomationEditor({\n      action: [\n        {\n          service: \"tts.cloud_say\",\n          data: {\n            entity_id: this._target,\n            message: message,\n          },\n        },\n      ],\n    });\n    this.closeDialog();\n  }\n\n  private async _playBrowser(message: string, audio: HTMLAudioElement) {\n    this._loadingExample = true;\n\n    const language = this._params!.defaultVoice[0];\n    const gender = this._params!.defaultVoice[1];\n\n    let url;\n    try {\n      const result = await convertTextToSpeech(this.hass, {\n        platform: \"cloud\",\n        message,\n        language,\n        options: { gender },\n      });\n      url = result.path;\n    } catch (err: any) {\n      this._loadingExample = false;\n      showAlertDialog(this, {\n        text: `Unable to load example. ${err.error || err.body || err}`,\n        warning: true,\n      });\n      return;\n    }\n    audio.src = url;\n    audio.addEventListener(\"canplaythrough\", () => {\n      audio.play();\n    });\n    audio.addEventListener(\"playing\", () => {\n      this._loadingExample = false;\n    });\n    audio.addEventListener(\"error\", () => {\n      showAlertDialog(this, { title: \"Error playing audio.\" });\n      this._loadingExample = false;\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --mdc-dialog-max-width: 500px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-cloud-try-tts\": DialogTryTts;\n  }\n}\n"],"names":[],"sourceRoot":""}