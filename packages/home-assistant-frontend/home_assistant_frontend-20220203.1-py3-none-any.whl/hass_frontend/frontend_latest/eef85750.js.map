{"version":3,"file":"eef85750.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC0EA","sources":["webpack://home-assistant-frontend/./src/components/ha-labeled-slider.js","webpack://home-assistant-frontend/./src/dialogs/more-info/controls/more-info-fan.js"],"sourcesContent":["import { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport \"./ha-icon\";\nimport \"./ha-slider\";\n\nclass HaLabeledSlider extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n        }\n\n        .title {\n          margin: 5px 0 8px;\n          color: var(--primary-text-color);\n        }\n\n        .slider-container {\n          display: flex;\n        }\n\n        ha-icon {\n          margin-top: 4px;\n          color: var(--secondary-text-color);\n        }\n\n        ha-slider {\n          flex-grow: 1;\n          background-image: var(--ha-slider-background);\n          border-radius: 4px;\n        }\n      </style>\n\n      <div class=\"title\">[[caption]]</div>\n      <div class=\"extra-container\"><slot name=\"extra\"></slot></div>\n      <div class=\"slider-container\">\n        <ha-icon icon=\"[[icon]]\" hidden$=\"[[!icon]]\"></ha-icon>\n        <ha-slider\n          min=\"[[min]]\"\n          max=\"[[max]]\"\n          step=\"[[step]]\"\n          pin=\"[[pin]]\"\n          disabled=\"[[disabled]]\"\n          value=\"{{value}}\"\n        ></ha-slider>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      caption: String,\n      disabled: Boolean,\n      min: Number,\n      max: Number,\n      pin: Boolean,\n      step: Number,\n\n      extra: {\n        type: Boolean,\n        value: false,\n      },\n      ignoreBarTouch: {\n        type: Boolean,\n        value: true,\n      },\n      icon: {\n        type: String,\n        value: \"\",\n      },\n      value: {\n        type: Number,\n        notify: true,\n      },\n    };\n  }\n}\n\ncustomElements.define(\"ha-labeled-slider\", HaLabeledSlider);\n","import \"@polymer/iron-flex-layout/iron-flex-layout-classes\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { attributeClassNames } from \"../../../common/entity/attribute_class_names\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport \"../../../components/ha-attributes\";\nimport \"../../../components/ha-icon\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-labeled-slider\";\nimport \"../../../components/ha-paper-dropdown-menu\";\nimport \"../../../components/ha-switch\";\nimport { SUPPORT_SET_SPEED } from \"../../../data/fan\";\nimport { EventsMixin } from \"../../../mixins/events-mixin\";\nimport LocalizeMixin from \"../../../mixins/localize-mixin\";\n\n/*\n * @appliesMixin EventsMixin\n */\nclass MoreInfoFan extends LocalizeMixin(EventsMixin(PolymerElement)) {\n  static get template() {\n    return html`\n      <style include=\"iron-flex\"></style>\n      <style>\n        .container-preset_modes,\n        .container-direction,\n        .container-percentage,\n        .container-oscillating {\n          display: none;\n        }\n\n        .has-percentage .container-percentage,\n        .has-preset_modes .container-preset_modes,\n        .has-direction .container-direction,\n        .has-oscillating .container-oscillating {\n          display: block;\n        }\n\n        ha-paper-dropdown-menu {\n          width: 100%;\n        }\n\n        paper-item {\n          cursor: pointer;\n        }\n      </style>\n\n      <div class$=\"[[computeClassNames(stateObj)]]\">\n        <div class=\"container-percentage\">\n          <ha-labeled-slider\n            caption=\"[[localize('ui.card.fan.speed')]]\"\n            min=\"0\"\n            max=\"100\"\n            step=\"[[computePercentageStepSize(stateObj)]]\"\n            value=\"{{percentageSliderValue}}\"\n            on-change=\"percentageChanged\"\n            pin=\"\"\n            extra=\"\"\n          ></ha-labeled-slider>\n        </div>\n\n        <div class=\"container-preset_modes\">\n          <ha-paper-dropdown-menu\n            label-float=\"\"\n            dynamic-align=\"\"\n            label=\"[[localize('ui.card.fan.preset_mode')]]\"\n          >\n            <paper-listbox\n              slot=\"dropdown-content\"\n              selected=\"[[stateObj.attributes.preset_mode]]\"\n              on-selected-changed=\"presetModeChanged\"\n              attr-for-selected=\"item-name\"\n            >\n              <template\n                is=\"dom-repeat\"\n                items=\"[[stateObj.attributes.preset_modes]]\"\n              >\n                <paper-item item-name$=\"[[item]]\">[[item]]</paper-item>\n              </template>\n            </paper-listbox>\n          </ha-paper-dropdown-menu>\n        </div>\n\n        <div class=\"container-oscillating\">\n          <div class=\"center horizontal layout single-row\">\n            <div class=\"flex\">[[localize('ui.card.fan.oscillate')]]</div>\n            <ha-switch\n              checked=\"[[oscillationToggleChecked]]\"\n              on-change=\"oscillationToggleChanged\"\n            >\n            </ha-switch>\n          </div>\n        </div>\n\n        <div class=\"container-direction\">\n          <div class=\"direction\">\n            <div>[[localize('ui.card.fan.direction')]]</div>\n            <ha-icon-button\n              on-click=\"onDirectionReverse\"\n              title=\"[[localize('ui.card.fan.reverse')]]\"\n              disabled=\"[[computeIsRotatingReverse(stateObj)]]\"\n            >\n              <ha-icon icon=\"hass:rotate-left\"></ha-icon>\n            </ha-icon-button>\n            <ha-icon-button\n              on-click=\"onDirectionForward\"\n              title=\"[[localize('ui.card.fan.forward')]]\"\n              disabled=\"[[computeIsRotatingForward(stateObj)]]\"\n            >\n              <ha-icon icon=\"hass:rotate-right\"></ha-icon>\n            </ha-icon-button>\n          </div>\n        </div>\n      </div>\n\n      <ha-attributes\n        hass=\"[[hass]]\"\n        state-obj=\"[[stateObj]]\"\n        extra-filters=\"percentage_step,speed,preset_mode,preset_modes,speed_list,percentage,oscillating,direction\"\n      ></ha-attributes>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      stateObj: {\n        type: Object,\n        observer: \"stateObjChanged\",\n      },\n\n      oscillationToggleChecked: {\n        type: Boolean,\n      },\n\n      percentageSliderValue: {\n        type: Number,\n      },\n    };\n  }\n\n  stateObjChanged(newVal, oldVal) {\n    if (newVal) {\n      this.setProperties({\n        oscillationToggleChecked: newVal.attributes.oscillating,\n        percentageSliderValue: newVal.attributes.percentage,\n      });\n    }\n\n    if (oldVal) {\n      setTimeout(() => {\n        this.fire(\"iron-resize\");\n      }, 500);\n    }\n  }\n\n  computePercentageStepSize(stateObj) {\n    if (stateObj.attributes.percentage_step) {\n      return stateObj.attributes.percentage_step;\n    }\n    return 1;\n  }\n\n  computeClassNames(stateObj) {\n    return (\n      \"more-info-fan \" +\n      (supportsFeature(stateObj, SUPPORT_SET_SPEED) ? \"has-percentage \" : \"\") +\n      (stateObj.attributes.preset_modes &&\n      stateObj.attributes.preset_modes.length\n        ? \"has-preset_modes \"\n        : \"\") +\n      attributeClassNames(stateObj, [\"oscillating\", \"direction\"])\n    );\n  }\n\n  presetModeChanged(ev) {\n    const oldVal = this.stateObj.attributes.preset_mode;\n    const newVal = ev.detail.value;\n\n    if (!newVal || oldVal === newVal) return;\n\n    this.hass.callService(\"fan\", \"set_preset_mode\", {\n      entity_id: this.stateObj.entity_id,\n      preset_mode: newVal,\n    });\n  }\n\n  percentageChanged(ev) {\n    const oldVal = parseInt(this.stateObj.attributes.percentage, 10);\n    const newVal = ev.target.value;\n\n    if (isNaN(newVal) || oldVal === newVal) return;\n\n    this.hass.callService(\"fan\", \"set_percentage\", {\n      entity_id: this.stateObj.entity_id,\n      percentage: newVal,\n    });\n  }\n\n  oscillationToggleChanged(ev) {\n    const oldVal = this.stateObj.attributes.oscillating;\n    const newVal = ev.target.checked;\n\n    if (oldVal === newVal) return;\n\n    this.hass.callService(\"fan\", \"oscillate\", {\n      entity_id: this.stateObj.entity_id,\n      oscillating: newVal,\n    });\n  }\n\n  onDirectionReverse() {\n    this.hass.callService(\"fan\", \"set_direction\", {\n      entity_id: this.stateObj.entity_id,\n      direction: \"reverse\",\n    });\n  }\n\n  onDirectionForward() {\n    this.hass.callService(\"fan\", \"set_direction\", {\n      entity_id: this.stateObj.entity_id,\n      direction: \"forward\",\n    });\n  }\n\n  computeIsRotatingReverse(stateObj) {\n    return stateObj.attributes.direction === \"reverse\";\n  }\n\n  computeIsRotatingForward(stateObj) {\n    return stateObj.attributes.direction === \"forward\";\n  }\n}\n\ncustomElements.define(\"more-info-fan\", MoreInfoFan);\n"],"names":[],"sourceRoot":""}