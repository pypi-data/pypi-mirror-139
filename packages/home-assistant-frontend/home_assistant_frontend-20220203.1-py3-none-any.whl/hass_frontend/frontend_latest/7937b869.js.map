{"version":3,"file":"7937b869.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AAOA;AACA;AAKA;AACA;AACA;AAzCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACyBA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;;;;;;;;;;;;;;;;;;;;;;;AC4CA;AACA;;;;;;AAgRA;AACA;AACA;AACA;AACA;;;AAGA;AAGA;AAGA;;;;;;;AAOA;;AAGA;;;;AAMA;;AAEA;;;AAIA;AACA;;;;;;AA3CA;;;;;;;;;AArQA;;AC7BA;AAEA;;;;;AAKA;;AAEA;;;AAGA;;AAIA;AAEA;AACA;;;;;AAvBA;;;;;;;;;;;;;AAhCA;ACMA;AACA;AACA;AANA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+FA;ACsDA;AACA;AAIA;AACA;;;AAGA;AACA;;;AAIA;AAEA;;;AAIA;;AAEA;AAEA;AACA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAIA;;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;;;;;;AArMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/entity/state-badge.ts","webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-area-picker.ts","webpack://home-assistant-frontend/./src/components/ha-blueprint-picker.ts","webpack://home-assistant-frontend/./src/components/ha-markdown.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/layouts/hass-tabs-subpage-data-table.ts"],"sourcesContent":["import { mdiAlert } from \"@mdi/js\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeActiveState } from \"../../common/entity/compute_active_state\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { iconColorCSS } from \"../../common/style/icon_color_css\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-state-icon\";\n\nexport class StateBadge extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property() public overrideIcon?: string;\n\n  @property() public overrideImage?: string;\n\n  @property({ type: Boolean }) public stateColor?: boolean;\n\n  @property({ type: Boolean, reflect: true, attribute: \"icon\" })\n  private _showIcon = true;\n\n  @state() private _iconStyle: { [name: string]: string } = {};\n\n  protected render(): TemplateResult {\n    const stateObj = this.stateObj;\n\n    // We either need a `stateObj` or one override\n    if (!stateObj && !this.overrideIcon && !this.overrideImage) {\n      return html`<div class=\"missing\">\n        <ha-svg-icon .path=${mdiAlert}></ha-svg-icon>\n      </div>`;\n    }\n\n    if (!this._showIcon) {\n      return html``;\n    }\n\n    const domain = stateObj ? computeStateDomain(stateObj) : undefined;\n\n    return html`<ha-state-icon\n      style=${styleMap(this._iconStyle)}\n      data-domain=${ifDefined(\n        this.stateColor || (domain === \"light\" && this.stateColor !== false)\n          ? domain\n          : undefined\n      )}\n      data-state=${stateObj ? computeActiveState(stateObj) : \"\"}\n      .icon=${this.overrideIcon}\n      .state=${stateObj}\n    ></ha-state-icon>`;\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (\n      !changedProps.has(\"stateObj\") &&\n      !changedProps.has(\"overrideImage\") &&\n      !changedProps.has(\"overrideIcon\")\n    ) {\n      return;\n    }\n    const stateObj = this.stateObj;\n\n    const iconStyle: { [name: string]: string } = {};\n    const hostStyle: Partial<CSSStyleDeclaration> = {\n      backgroundImage: \"\",\n    };\n\n    this._showIcon = true;\n\n    if (stateObj && this.overrideImage === undefined) {\n      // hide icon if we have entity picture\n      if (\n        (stateObj.attributes.entity_picture_local ||\n          stateObj.attributes.entity_picture) &&\n        !this.overrideIcon\n      ) {\n        let imageUrl =\n          stateObj.attributes.entity_picture_local ||\n          stateObj.attributes.entity_picture;\n        if (this.hass) {\n          imageUrl = this.hass.hassUrl(imageUrl);\n        }\n        hostStyle.backgroundImage = `url(${imageUrl})`;\n        this._showIcon = false;\n      } else if (stateObj.state === \"on\") {\n        if (this.stateColor !== false && stateObj.attributes.rgb_color) {\n          iconStyle.color = `rgb(${stateObj.attributes.rgb_color.join(\",\")})`;\n        }\n        if (stateObj.attributes.brightness && this.stateColor !== false) {\n          const brightness = stateObj.attributes.brightness;\n          if (typeof brightness !== \"number\") {\n            const errorMessage = `Type error: state-badge expected number, but type of ${\n              stateObj.entity_id\n            }.attributes.brightness is ${typeof brightness} (${brightness})`;\n            // eslint-disable-next-line\n            console.warn(errorMessage);\n          }\n          // lowest brightness will be around 50% (that's pretty dark)\n          iconStyle.filter = `brightness(${(brightness + 245) / 5}%)`;\n        }\n      }\n    } else if (this.overrideImage) {\n      let imageUrl = this.overrideImage;\n      if (this.hass) {\n        imageUrl = this.hass.hassUrl(imageUrl);\n      }\n      hostStyle.backgroundImage = `url(${imageUrl})`;\n      this._showIcon = false;\n    }\n\n    this._iconStyle = iconStyle;\n    Object.assign(this.style, hostStyle);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      iconColorCSS,\n      css`\n        :host {\n          position: relative;\n          display: inline-block;\n          width: 40px;\n          color: var(--paper-item-icon-color, #44739e);\n          border-radius: 50%;\n          height: 40px;\n          text-align: center;\n          background-size: cover;\n          line-height: 40px;\n          vertical-align: middle;\n          box-sizing: border-box;\n        }\n        :host(:focus) {\n          outline: none;\n        }\n        :host(:not([icon]):focus) {\n          border: 2px solid var(--divider-color);\n        }\n        :host([icon]:focus) {\n          background: var(--divider-color);\n        }\n        ha-state-icon {\n          transition: color 0.3s ease-in-out, filter 0.3s ease-in-out;\n        }\n        .missing {\n          color: #fce588;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-badge\": StateBadge;\n  }\n}\n\ncustomElements.define(\"state-badge\", StateBadge);\n","import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import { mdiCheck, mdiClose, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport {\n  AreaRegistryEntry,\n  createAreaRegistryEntry,\n  subscribeAreaRegistry,\n} from \"../data/area_registry\";\nimport {\n  DeviceEntityLookup,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../data/entity_registry\";\nimport {\n  showAlertDialog,\n  showPromptDialog,\n} from \"../dialogs/generic/show-dialog-box\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst rowRenderer: ComboBoxLitRenderer<AreaRegistryEntry> = (\n  item\n  // eslint-disable-next-line lit/prefer-static-styles\n) => html`<style>\n    paper-item {\n      padding: 0;\n      margin: -10px;\n      margin-left: 0;\n    }\n    #content {\n      display: flex;\n      align-items: center;\n    }\n    ha-svg-icon {\n      padding-left: 2px;\n      margin-right: -2px;\n      color: var(--secondary-text-color);\n    }\n    :host(:not([selected])) ha-svg-icon {\n      display: none;\n    }\n    :host([selected]) paper-item {\n      margin-left: 10px;\n    }\n  </style>\n  <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n  <paper-item class=${classMap({ \"add-new\": item.area_id === \"add_new\" })}>\n    <paper-item-body two-line>${item.name}</paper-item-body>\n  </paper-item>`;\n\n@customElement(\"ha-area-picker\")\nexport class HaAreaPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd?: boolean;\n\n  /**\n   * Show only areas with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no areas with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only areas with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property() public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property() public entityFilter?: (entity: EntityRegistryEntry) => boolean;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @state() private _areas?: AreaRegistryEntry[];\n\n  @state() private _devices?: DeviceRegistryEntry[];\n\n  @state() private _entities?: EntityRegistryEntry[];\n\n  @state() private _opened?: boolean;\n\n  @query(\"vaadin-combo-box-light\", true) public comboBox!: HTMLElement;\n\n  private _init = false;\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeAreaRegistry(this.hass.connection!, (areas) => {\n        this._areas = areas;\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._devices = devices;\n      }),\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._entities = entities;\n      }),\n    ];\n  }\n\n  public open() {\n    this.updateComplete.then(() => {\n      (this.shadowRoot?.querySelector(\"vaadin-combo-box-light\") as any)?.open();\n    });\n  }\n\n  public focus() {\n    this.updateComplete.then(() => {\n      this.shadowRoot?.querySelector(\"paper-input\")?.focus();\n    });\n  }\n\n  private _getAreas = memoizeOne(\n    (\n      areas: AreaRegistryEntry[],\n      devices: DeviceRegistryEntry[],\n      entities: EntityRegistryEntry[],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"],\n      entityFilter: this[\"entityFilter\"],\n      noAdd: this[\"noAdd\"]\n    ): AreaRegistryEntry[] => {\n      if (!areas.length) {\n        return [\n          {\n            area_id: \"\",\n            name: this.hass.localize(\"ui.components.area-picker.no_areas\"),\n            picture: null,\n          },\n        ];\n      }\n\n      const deviceEntityLookup: DeviceEntityLookup = {};\n      let inputDevices: DeviceRegistryEntry[] | undefined;\n      let inputEntities: EntityRegistryEntry[] | undefined;\n\n      if (includeDomains || excludeDomains || includeDeviceClasses) {\n        for (const entity of entities) {\n          if (!entity.device_id) {\n            continue;\n          }\n          if (!(entity.device_id in deviceEntityLookup)) {\n            deviceEntityLookup[entity.device_id] = [];\n          }\n          deviceEntityLookup[entity.device_id].push(entity);\n        }\n        inputDevices = devices;\n        inputEntities = entities.filter((entity) => entity.area_id);\n      } else {\n        if (deviceFilter) {\n          inputDevices = devices;\n        }\n        if (entityFilter) {\n          inputEntities = entities.filter((entity) => entity.area_id);\n        }\n      }\n\n      if (includeDomains) {\n        inputDevices = inputDevices!.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n        inputEntities = inputEntities!.filter((entity) =>\n          includeDomains.includes(computeDomain(entity.entity_id))\n        );\n      }\n\n      if (excludeDomains) {\n        inputDevices = inputDevices!.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return true;\n          }\n          return entities.every(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        });\n        inputEntities = inputEntities!.filter(\n          (entity) => !excludeDomains.includes(computeDomain(entity.entity_id))\n        );\n      }\n\n      if (includeDeviceClasses) {\n        inputDevices = inputDevices!.filter((device) => {\n          const devEntities = deviceEntityLookup[device.id];\n          if (!devEntities || !devEntities.length) {\n            return false;\n          }\n          return deviceEntityLookup[device.id].some((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        });\n        inputEntities = inputEntities!.filter((entity) => {\n          const stateObj = this.hass.states[entity.entity_id];\n          return (\n            stateObj.attributes.device_class &&\n            includeDeviceClasses.includes(stateObj.attributes.device_class)\n          );\n        });\n      }\n\n      if (deviceFilter) {\n        inputDevices = inputDevices!.filter((device) => deviceFilter!(device));\n      }\n\n      if (entityFilter) {\n        inputEntities = inputEntities!.filter((entity) =>\n          entityFilter!(entity)\n        );\n      }\n\n      let outputAreas = areas;\n\n      let areaIds: string[] | undefined;\n\n      if (inputDevices) {\n        areaIds = inputDevices\n          .filter((device) => device.area_id)\n          .map((device) => device.area_id!);\n      }\n\n      if (inputEntities) {\n        areaIds = (areaIds ?? []).concat(\n          inputEntities\n            .filter((entity) => entity.area_id)\n            .map((entity) => entity.area_id!)\n        );\n      }\n\n      if (areaIds) {\n        outputAreas = areas.filter((area) => areaIds!.includes(area.area_id));\n      }\n\n      if (!outputAreas.length) {\n        outputAreas = [\n          {\n            area_id: \"\",\n            name: this.hass.localize(\"ui.components.area-picker.no_match\"),\n            picture: null,\n          },\n        ];\n      }\n\n      return noAdd\n        ? outputAreas\n        : [\n            ...outputAreas,\n            {\n              area_id: \"add_new\",\n              name: this.hass.localize(\"ui.components.area-picker.add_new\"),\n              picture: null,\n            },\n          ];\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      (!this._init && this._devices && this._areas && this._entities) ||\n      (changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      (this.comboBox as any).items = this._getAreas(\n        this._areas!,\n        this._devices!,\n        this._entities!,\n        this.includeDomains,\n        this.excludeDomains,\n        this.includeDeviceClasses,\n        this.deviceFilter,\n        this.entityFilter,\n        this.noAdd\n      );\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._devices || !this._areas || !this._entities) {\n      return html``;\n    }\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"area_id\"\n        item-id-path=\"area_id\"\n        item-label-path=\"name\"\n        .value=${this.value}\n        .disabled=${this.disabled}\n        ${comboBoxRenderer(rowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._areaChanged}\n      >\n        <paper-input\n          .label=${this.label === undefined && this.hass\n            ? this.hass.localize(\"ui.components.area-picker.area\")\n            : this.label}\n          .placeholder=${this.placeholder\n            ? this._area(this.placeholder)?.name\n            : undefined}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.components.area-picker.clear\"\n                  )}\n                  .path=${mdiClose}\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  @click=${this._clearValue}\n                ></ha-icon-button>\n              `\n            : \"\"}\n\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.components.area-picker.toggle\")}\n            .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n            slot=\"suffix\"\n            class=\"toggle-button\"\n          ></ha-icon-button>\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private _area = memoizeOne((areaId: string): AreaRegistryEntry | undefined =>\n    this._areas?.find((area) => area.area_id === areaId)\n  );\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    this._setValue(\"\");\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _areaChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n\n    if (newValue !== \"add_new\") {\n      if (newValue !== this._value) {\n        this._setValue(newValue);\n      }\n      return;\n    }\n\n    (ev.target as any).value = this._value;\n    showPromptDialog(this, {\n      title: this.hass.localize(\"ui.components.area-picker.add_dialog.title\"),\n      text: this.hass.localize(\"ui.components.area-picker.add_dialog.text\"),\n      confirmText: this.hass.localize(\n        \"ui.components.area-picker.add_dialog.add\"\n      ),\n      inputLabel: this.hass.localize(\n        \"ui.components.area-picker.add_dialog.name\"\n      ),\n      confirm: async (name) => {\n        if (!name) {\n          return;\n        }\n        try {\n          const area = await createAreaRegistryEntry(this.hass, {\n            name,\n          });\n          this._areas = [...this._areas!, area];\n          (this.comboBox as any).items = this._getAreas(\n            this._areas!,\n            this._devices!,\n            this._entities!,\n            this.includeDomains,\n            this.excludeDomains,\n            this.includeDeviceClasses,\n            this.deviceFilter,\n            this.entityFilter,\n            this.noAdd\n          );\n          this._setValue(area.area_id);\n        } catch (err: any) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\n              \"ui.components.area-picker.add_dialog.failed_create_area\"\n            ),\n            text: err.message,\n          });\n        }\n      },\n    });\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      paper-input > ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-area-picker\": HaAreaPicker;\n  }\n}\n","import \"@polymer/paper-dropdown-menu/paper-dropdown-menu-light\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stringCompare } from \"../common/string/compare\";\nimport { Blueprint, Blueprints, fetchBlueprints } from \"../data/blueprint\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"ha-blueprint-picker\")\nclass HaBluePrintPicker extends LitElement {\n  public hass?: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value = \"\";\n\n  @property() public domain = \"automation\";\n\n  @property() public blueprints?: Blueprints;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public open() {\n    this.shadowRoot!.querySelector(\"paper-dropdown-menu-light\")!.open();\n  }\n\n  private _processedBlueprints = memoizeOne((blueprints?: Blueprints) => {\n    if (!blueprints) {\n      return [];\n    }\n    const result = Object.entries(blueprints)\n      .filter(([_path, blueprint]) => !(\"error\" in blueprint))\n      .map(([path, blueprint]) => ({\n        ...(blueprint as Blueprint).metadata,\n        path,\n      }));\n    return result.sort((a, b) => stringCompare(a.name, b.name));\n  });\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    return html`\n      <paper-dropdown-menu-light\n        .label=${this.label ||\n        this.hass.localize(\"ui.components.blueprint-picker.label\")}\n        .disabled=${this.disabled}\n        horizontal-align=\"left\"\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${this.value}\n          attr-for-selected=\"data-blueprint-path\"\n          @iron-select=${this._blueprintChanged}\n        >\n          <paper-item data-blueprint-path=\"\">\n            ${this.hass.localize(\n              \"ui.components.blueprint-picker.select_blueprint\"\n            )}\n          </paper-item>\n          ${this._processedBlueprints(this.blueprints).map(\n            (blueprint) => html`\n              <paper-item data-blueprint-path=${blueprint.path}>\n                ${blueprint.name}\n              </paper-item>\n            `\n          )}\n        </paper-listbox>\n      </paper-dropdown-menu-light>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    if (this.blueprints === undefined) {\n      fetchBlueprints(this.hass!, this.domain).then((blueprints) => {\n        this.blueprints = blueprints;\n      });\n    }\n  }\n\n  private _blueprintChanged(ev) {\n    const newValue = ev.detail.item.dataset.blueprintPath;\n\n    if (newValue !== this.value) {\n      this.value = ev.detail.value;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: newValue });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n      }\n      paper-dropdown-menu-light {\n        width: 100%;\n        min-width: 200px;\n        display: block;\n      }\n      paper-item {\n        cursor: pointer;\n        min-width: 200px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-blueprint-picker\": HaBluePrintPicker;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"./ha-markdown-element\";\n\n@customElement(\"ha-markdown\")\nexport class HaMarkdown extends LitElement {\n  @property() public content?;\n\n  @property({ type: Boolean }) public allowSvg = false;\n\n  @property({ type: Boolean }) public breaks = false;\n\n  protected render(): TemplateResult {\n    if (!this.content) {\n      return html``;\n    }\n\n    return html`<ha-markdown-element\n      .content=${this.content}\n      .allowSvg=${this.allowSvg}\n      .breaks=${this.breaks}\n    ></ha-markdown-element>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      ha-markdown-element {\n        -ms-user-select: text;\n        -webkit-user-select: text;\n        -moz-user-select: text;\n      }\n      ha-markdown-element > *:first-child {\n        margin-top: 0;\n      }\n      ha-markdown-element > *:last-child {\n        margin-bottom: 0;\n      }\n      a {\n        color: var(--primary-color);\n      }\n      img {\n        max-width: 100%;\n      }\n      code,\n      pre {\n        background-color: var(--markdown-code-background-color, none);\n        border-radius: 3px;\n      }\n      svg {\n        background-color: var(--markdown-svg-background-color, none);\n        color: var(--markdown-svg-color, none);\n      }\n      code {\n        font-size: 85%;\n        padding: 0.2em 0.4em;\n      }\n      pre code {\n        padding: 0;\n      }\n      pre {\n        padding: 16px;\n        overflow: auto;\n        line-height: 1.45;\n        font-family: var(--code-font-family, monospace);\n      }\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6 {\n        line-height: initial;\n      }\n      h2 {\n        font-size: 1.5em;\n        font-weight: bold;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-markdown\": HaMarkdown;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import \"@material/mwc-button/mwc-button\";\nimport { mdiFilterVariant } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport \"../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n  HaDataTable,\n} from \"../components/data-table/ha-data-table\";\nimport type { HomeAssistant, Route } from \"../types\";\nimport \"./hass-tabs-subpage\";\nimport type { PageNavigation } from \"./hass-tabs-subpage\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"search-changed\": { value: string };\n    \"clear-filter\": undefined;\n  }\n}\n\n@customElement(\"hass-tabs-subpage-data-table\")\nexport class HaTabsSubpageDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public localizeFunc?: LocalizeFunc;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  /**\n   * Object with the columns.\n   * @type {Object}\n   */\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  /**\n   * Data to show in the table.\n   * @type {Array}\n   */\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  /**\n   * Should rows be selectable.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public selectable = false;\n\n  /**\n   * Should rows be clickable.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public clickable = false;\n\n  /**\n   * Do we need to add padding for a fab.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public hasFab = false;\n\n  /**\n   * Add an extra row at the bottom of the data table\n   * @type {TemplateResult}\n   */\n  @property({ attribute: false }) public appendRow?: TemplateResult;\n\n  /**\n   * Field with a unique id per entry in data.\n   * @type {String}\n   */\n  @property({ type: String }) public id = \"id\";\n\n  /**\n   * String to filter the data in the data table on.\n   * @type {String}\n   */\n  @property({ type: String }) public filter = \"\";\n\n  @property() public searchLabel?: string;\n\n  /**\n   * List of strings that show what the data is currently filtered by.\n   * @type {Array}\n   */\n  @property({ type: Array }) public activeFilters?;\n\n  /**\n   * Text to how how many items are hidden.\n   * @type {String}\n   */\n  @property() public hiddenLabel?: string;\n\n  /**\n   * How many items are hidden because of active filters.\n   * @type {Number}\n   */\n  @property({ type: Number }) public numHidden = 0;\n\n  /**\n   * What path to use when the back button is pressed.\n   * @type {String}\n   * @attr back-path\n   */\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  /**\n   * Function to call when the back button is pressed.\n   * @type {() => void}\n   */\n  @property() public backCallback?: () => void;\n\n  /**\n   * String to show when there are no records in the data table.\n   * @type {String}\n   */\n  @property({ type: String }) public noDataText?: string;\n\n  @property() public route!: Route;\n\n  /**\n   * Array of tabs to show on the page.\n   * @type {Array}\n   */\n  @property() public tabs!: PageNavigation[];\n\n  @query(\"ha-data-table\", true) private _dataTable!: HaDataTable;\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected render(): TemplateResult {\n    const hiddenLabel = this.numHidden\n      ? this.hiddenLabel ||\n        this.hass.localize(\n          \"ui.components.data-table.hidden\",\n          \"number\",\n          this.numHidden\n        ) ||\n        this.numHidden\n      : undefined;\n\n    const filterInfo = this.activeFilters\n      ? html`${this.hass.localize(\"ui.components.data-table.filtering_by\")}\n        ${this.activeFilters.join(\", \")}\n        ${hiddenLabel ? `(${hiddenLabel})` : \"\"}`\n      : hiddenLabel;\n\n    const headerToolbar = html`<search-input\n        .hass=${this.hass}\n        .filter=${this.filter}\n        no-label-float\n        no-underline\n        @value-changed=${this._handleSearchChange}\n        .label=${this.searchLabel ||\n        this.hass.localize(\"ui.components.data-table.search\")}\n      >\n      </search-input\n      >${filterInfo\n        ? html`<div class=\"active-filters\">\n            ${this.narrow\n              ? html`<div>\n                  <ha-svg-icon .path=${mdiFilterVariant}></ha-svg-icon>\n                  <paper-tooltip animation-delay=\"0\" position=\"left\">\n                    ${filterInfo}\n                  </paper-tooltip>\n                </div>`\n              : filterInfo}\n            <mwc-button @click=${this._clearFilter}>\n              ${this.hass.localize(\"ui.components.data-table.clear\")}\n            </mwc-button>\n          </div>`\n        : \"\"}<slot name=\"filter-menu\"></slot>`;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .localizeFunc=${this.localizeFunc}\n        .narrow=${this.narrow}\n        .isWide=${this.isWide}\n        .backPath=${this.backPath}\n        .backCallback=${this.backCallback}\n        .route=${this.route}\n        .tabs=${this.tabs}\n        .mainPage=${this.mainPage}\n        .supervisor=${this.supervisor}\n      >\n        <div slot=\"toolbar-icon\"><slot name=\"toolbar-icon\"></slot></div>\n        ${this.narrow\n          ? html`\n              <div slot=\"header\">\n                <slot name=\"header\">\n                  <div class=\"search-toolbar\">${headerToolbar}</div>\n                </slot>\n              </div>\n            `\n          : \"\"}\n        <ha-data-table\n          .hass=${this.hass}\n          .columns=${this.columns}\n          .data=${this.data}\n          .filter=${this.filter}\n          .selectable=${this.selectable}\n          .hasFab=${this.hasFab}\n          .id=${this.id}\n          .noDataText=${this.noDataText}\n          .dir=${computeRTLDirection(this.hass)}\n          .clickable=${this.clickable}\n          .appendRow=${this.appendRow}\n        >\n          ${!this.narrow\n            ? html`\n                <div slot=\"header\">\n                  <slot name=\"header\">\n                    <div class=\"table-header\">${headerToolbar}</div>\n                  </slot>\n                </div>\n              `\n            : html` <div slot=\"header\"></div> `}\n        </ha-data-table>\n        <div slot=\"fab\"><slot name=\"fab\"></slot></div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this.filter = ev.detail.value;\n    fireEvent(this, \"search-changed\", { value: this.filter });\n  }\n\n  private _clearFilter() {\n    fireEvent(this, \"clear-filter\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-data-table {\n        width: 100%;\n        height: 100%;\n        --data-table-border-width: 0;\n      }\n      :host(:not([narrow])) ha-data-table {\n        height: calc(100vh - 1px - var(--header-height));\n        display: block;\n      }\n      .table-header {\n        border-bottom: 1px solid rgba(var(--rgb-primary-text-color), 0.12);\n        padding: 0 16px;\n        display: flex;\n        align-items: center;\n      }\n      .search-toolbar {\n        display: flex;\n        align-items: center;\n        color: var(--secondary-text-color);\n      }\n      search-input {\n        position: relative;\n        top: 2px;\n        flex-grow: 1;\n      }\n      search-input.header {\n        left: -8px;\n      }\n      .active-filters {\n        color: var(--primary-text-color);\n        position: relative;\n        display: flex;\n        align-items: center;\n        padding: 2px 2px 2px 8px;\n        margin-left: 4px;\n        font-size: 14px;\n      }\n      .active-filters ha-svg-icon {\n        color: var(--primary-color);\n      }\n      .active-filters mwc-button {\n        margin-left: 8px;\n      }\n      .active-filters::before {\n        background-color: var(--primary-color);\n        opacity: 0.12;\n        border-radius: 4px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        content: \"\";\n      }\n    `;\n  }\n}\n"],"names":[],"sourceRoot":""}