{"version":3,"file":"4a424b4d.js","mappings":";;AAyCA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;;;ACDA;;AAMA;AACA;AACA;;;AAGA;AAGA;;;AAGA;AACA;AACA;;;;;AAKA;AA/BA;;;;AC8BA;;AAEA;;AAEA;;;;AAMA;AACA;;;;;;;;;AASA;;;AAIA;AACA;;;AAGA;;;;AAQA;AACA;;AAIA;AACA;;;;AAIA;;AAIA;AACA;AACA;;;;AAIA;;AAIA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;;;;AAnHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/mwc-check-list-item-base.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-grid-card-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-stack-card-editor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-checkbox';\n\nimport {Checkbox} from '@material/mwc-checkbox';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  override render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n","import { html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  boolean,\n  number,\n  object,\n  optional,\n  string,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport { GridCardConfig } from \"../../cards/types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { HuiStackCardEditor } from \"./hui-stack-card-editor\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    cards: array(any()),\n    title: optional(string()),\n    square: optional(boolean()),\n    columns: optional(number()),\n  })\n);\n\n@customElement(\"hui-grid-card-editor\")\nexport class HuiGridCardEditor extends HuiStackCardEditor {\n  public setConfig(config: Readonly<GridCardConfig>): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _columns(): number {\n    return this._config!.columns || 3;\n  }\n\n  get _square(): boolean {\n    return this._config!.square ?? true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.grid.columns\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            type=\"number\"\n            .value=${this._columns}\n            .configValue=${\"columns\"}\n            @value-changed=${this._handleColumnsChanged}\n          ></paper-input>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.grid.square\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-switch\n              .checked=${this._square}\n              .configValue=${\"square\"}\n              @change=${this._handleSquareChanged}\n            ></ha-switch>\n          </ha-formfield>\n        </div>\n      </div>\n      ${super.render()}\n    `;\n  }\n\n  private _handleColumnsChanged(ev): void {\n    if (!this._config) {\n      return;\n    }\n    const value = Number(ev.target.value);\n    if (this._columns === value) {\n      return;\n    }\n    if (!ev.target.value) {\n      this._config = { ...this._config };\n      delete this._config.columns;\n    } else {\n      this._config = {\n        ...this._config,\n        columns: value,\n      };\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleSquareChanged(ev): void {\n    if (!this._config || this._square === ev.target.checked) {\n      return;\n    }\n\n    fireEvent(this, \"config-changed\", {\n      config: { ...this._config, square: ev.target.checked },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-grid-card-editor\": HuiGridCardEditor;\n  }\n}\n","import { mdiArrowLeft, mdiArrowRight, mdiDelete, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-tabs\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  object,\n  optional,\n  string,\n} from \"superstruct\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-button\";\nimport { LovelaceCardConfig, LovelaceConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { StackCardConfig } from \"../../cards/types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport \"../card-editor/hui-card-element-editor\";\nimport type { HuiCardElementEditor } from \"../card-editor/hui-card-element-editor\";\nimport \"../card-editor/hui-card-picker\";\nimport type { ConfigChangedEvent } from \"../hui-element-editor\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { GUIModeChangedEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    cards: array(any()),\n    title: optional(string()),\n  })\n);\n\n@customElement(\"hui-stack-card-editor\")\nexport class HuiStackCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: LovelaceConfig;\n\n  @state() protected _config?: StackCardConfig;\n\n  @state() protected _selectedCard = 0;\n\n  @state() protected _GUImode = true;\n\n  @state() protected _guiModeAvailable? = true;\n\n  @query(\"hui-card-element-editor\")\n  protected _cardEditorEl?: HuiCardElementEditor;\n\n  public setConfig(config: Readonly<StackCardConfig>): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  public focusYamlEditor() {\n    this._cardEditorEl?.focusYamlEditor();\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n    const selected = this._selectedCard!;\n    const numcards = this._config.cards.length;\n\n    return html`\n      <div class=\"card-config\">\n        <div class=\"toolbar\">\n          <paper-tabs\n            .selected=${selected}\n            scrollable\n            @iron-activate=${this._handleSelectedCard}\n          >\n            ${this._config.cards.map(\n              (_card, i) => html` <paper-tab> ${i + 1} </paper-tab> `\n            )}\n          </paper-tabs>\n          <paper-tabs\n            id=\"add-card\"\n            .selected=${selected === numcards ? \"0\" : undefined}\n            @iron-activate=${this._handleSelectedCard}\n          >\n            <paper-tab>\n              <ha-svg-icon .path=${mdiPlus}></ha-svg-icon>\n            </paper-tab>\n          </paper-tabs>\n        </div>\n\n        <div id=\"editor\">\n          ${selected < numcards\n            ? html`\n                <div id=\"card-options\">\n                  <mwc-button\n                    @click=${this._toggleMode}\n                    .disabled=${!this._guiModeAvailable}\n                    class=\"gui-mode-button\"\n                  >\n                    ${this.hass!.localize(\n                      !this._cardEditorEl || this._GUImode\n                        ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                        : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                    )}\n                  </mwc-button>\n\n                  <ha-icon-button\n                    .disabled=${selected === 0}\n                    .label=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.move_before\"\n                    )}\n                    .path=${mdiArrowLeft}\n                    @click=${this._handleMove}\n                    .move=${-1}\n                  ></ha-icon-button>\n\n                  <ha-icon-button\n                    .label=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.move_after\"\n                    )}\n                    .path=${mdiArrowRight}\n                    .disabled=${selected === numcards - 1}\n                    @click=${this._handleMove}\n                    .move=${1}\n                  ></ha-icon-button>\n\n                  <ha-icon-button\n                    .label=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.delete\"\n                    )}\n                    .path=${mdiDelete}\n                    @click=${this._handleDeleteCard}\n                  ></ha-icon-button>\n                </div>\n\n                <hui-card-element-editor\n                  .hass=${this.hass}\n                  .value=${this._config.cards[selected]}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleConfigChanged}\n                  @GUImode-changed=${this._handleGUIModeChanged}\n                ></hui-card-element-editor>\n              `\n            : html`\n                <hui-card-picker\n                  .hass=${this.hass}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleCardPicked}\n                ></hui-card-picker>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  protected _handleSelectedCard(ev) {\n    if (ev.target.id === \"add-card\") {\n      this._selectedCard = this._config!.cards.length;\n      return;\n    }\n    this._setMode(true);\n    this._guiModeAvailable = true;\n    this._selectedCard = parseInt(ev.detail.selected, 10);\n  }\n\n  protected _handleConfigChanged(ev: HASSDomEvent<ConfigChangedEvent>) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    const cards = [...this._config.cards];\n    cards[this._selectedCard] = ev.detail.config as LovelaceCardConfig;\n    this._config = { ...this._config, cards };\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleCardPicked(ev) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    const config = ev.detail.config;\n    const cards = [...this._config.cards, config];\n    this._config = { ...this._config, cards };\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleDeleteCard() {\n    if (!this._config) {\n      return;\n    }\n    const cards = [...this._config.cards];\n    cards.splice(this._selectedCard, 1);\n    this._config = { ...this._config, cards };\n    this._selectedCard = Math.max(0, this._selectedCard - 1);\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleMove(ev: Event) {\n    if (!this._config) {\n      return;\n    }\n    const move = (ev.currentTarget as any).move;\n    const source = this._selectedCard;\n    const target = source + move;\n    const cards = [...this._config.cards];\n    const card = cards.splice(this._selectedCard, 1)[0];\n    cards.splice(target, 0, card);\n    this._config = {\n      ...this._config,\n      cards,\n    };\n    this._selectedCard = target;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  protected _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  protected _setMode(value: boolean): void {\n    this._GUImode = value;\n    if (this._cardEditorEl) {\n      this._cardEditorEl!.GUImode = value;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        .toolbar {\n          display: flex;\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          --paper-tab-ink: var(--primary-color);\n        }\n        paper-tabs {\n          display: flex;\n          font-size: 14px;\n          flex-grow: 1;\n        }\n        #add-card {\n          max-width: 32px;\n          padding: 0;\n        }\n\n        #card-options {\n          display: flex;\n          justify-content: flex-end;\n          width: 100%;\n        }\n\n        #editor {\n          border: 1px solid var(--divider-color);\n          padding: 12px;\n        }\n        @media (max-width: 450px) {\n          #editor {\n            margin: 0 -12px;\n          }\n        }\n\n        .gui-mode-button {\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-stack-card-editor\": HuiStackCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}