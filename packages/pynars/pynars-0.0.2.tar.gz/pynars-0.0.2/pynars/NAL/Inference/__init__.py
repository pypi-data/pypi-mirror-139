'''This file is generated by `_generate_init_file.py`'''


from .CompositionalRules import \
	conjunction_extension as compositional__conjunction_extension, \
	conjunction_intension as compositional__conjunction_intension, \
	conjunstion_composition as compositional__conjunstion_composition, \
	difference_extension as compositional__difference_extension, \
	difference_extension2 as compositional__difference_extension2, \
	difference_intension as compositional__difference_intension, \
	difference_intension2 as compositional__difference_intension2, \
	disjunction_composition as compositional__disjunction_composition, \
	disjunction_extension as compositional__disjunction_extension, \
	disjunction_intension as compositional__disjunction_intension, \
	intersection_extension as compositional__intersection_extension, \
	intersection_intension as compositional__intersection_intension, \
	union_extension as compositional__union_extension, \
	union_intension as compositional__union_intension 

from .ConditionalSyllogisticRules import \
	abduction as conditional__abduction, \
	abduction_compound_eliminate as conditional__abduction_compound_eliminate, \
	abduction_compound_eliminate2 as conditional__abduction_compound_eliminate2, \
	analogy as conditional__analogy, \
	analogy_compound_replace as conditional__analogy_compound_replace, \
	comparison as conditional__comparison, \
	deduction as conditional__deduction, \
	deduction_compound_eliminate as conditional__deduction_compound_eliminate, \
	deduction_compound_replace as conditional__deduction_compound_replace, \
	induction as conditional__induction, \
	induction_compound_compose as conditional__induction_compound_compose, \
	induction_compound_replace as conditional__induction_compound_replace 

from .ImmediateRules import \
	contraposition as immediate__contraposition, \
	conversion as immediate__conversion, \
	negation as immediate__negation 

from .LocalRules import \
	revision as local__revision, \
	solution_query as local__solution_query, \
	solution_question as local__solution_question, \
	solve_query as local__solve_query 

from .SyllogisticRules import \
	abduction as syllogistic__abduction, \
	analogy as syllogistic__analogy, \
	comparison as syllogistic__comparison, \
	deduction as syllogistic__deduction, \
	exemplification as syllogistic__exemplification, \
	induction as syllogistic__induction, \
	resemblance as syllogistic__resemblance, \
	reversion as syllogistic__reversion 

from .TemporalRules import \
	abduction as temporal__abduction, \
	analogy as temporal__analogy, \
	deduction_sequence_eliminate as temporal__deduction_sequence_eliminate, \
	deduction_sequence_replace as temporal__deduction_sequence_replace, \
	immediate_goal_deriviation as temporal__immediate_goal_deriviation, \
	induction_composition as temporal__induction_composition, \
	induction_equivalence as temporal__induction_equivalence, \
	induction_implication as temporal__induction_implication, \
	induction_predictive_equivalance_composition as temporal__induction_predictive_equivalance_composition, \
	induction_predictive_implication_composition as temporal__induction_predictive_implication_composition, \
	induction_retrospective_equivalance_composition as temporal__induction_retrospective_equivalance_composition, \
	induction_retrospective_implication_composition as temporal__induction_retrospective_implication_composition, \
	sequence as temporal__sequence, \
	sequence_predictive_implication as temporal__sequence_predictive_implication 

