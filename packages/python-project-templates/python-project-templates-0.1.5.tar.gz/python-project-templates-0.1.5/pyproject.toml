[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]

# POETRY ------------------------------------------------------------------------------
[tool.poetry]
authors = ["Hiroshi Tsuyuki <kagemeka1@gmail.com>"]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
description = "This is a template for python projects."
documentation = "https://python-project-templates.readthedocs.io"
exclude = [
  "**/tests/",
  "**/*_test.py",
  "**/test_*.py",
  "**/_test_*.py",
]
homepage = "https://kagemeka.github.io/python-project-template"
include = []
keywords = ["template", "python"]
license = "MIT"
maintainers = ["Hiroshi Tsuyuki <kagemeka1@gmail.com>"]
name = "python-project-templates"
packages = [
  {include = "package_1", from = "src"},
  {include = "package_2", from = "src"},
]
readme = "README.md"
repository = "https://github.com/kagemeka/python-project-template"
version = "0.1.5"

[tool.poetry.dependencies]
optext-python = "0.1.1"
python = ">=3.8,<3.11"

# [[tool.poetry.source]]
# name = 'private'
# url = 'http://example.com/simple'

furo = {version = "^", optional = true}
myst-parser = {version = "^", optional = true}
pdoc3 = {version = "^", optional = true}
pydata-sphinx-theme = {version = "^", optional = true}
python-docs-theme = {version = "^", optional = true}
sphinx = {version = "^", optional = true}
sphinx-book-theme = {version = "^", optional = true}
sphinx-theme-pd = {version = "^", optional = true}
sphinx_rtd_theme = {version = "<=2.0.0", optional = true}
sphinxcontrib-mermaid = {version = "^", optional = true}

[tool.poetry.extras]
docs = [
  "sphinx",
  "furo",
  "myst-parser",
  "sphinx_rtd_theme",
  "sphinxcontrib-mermaid",
  "pdoc3",
  "python-docs-theme",
  "sphinx-theme-pd",
  "sphinx-book-theme",
  "pydata-sphinx-theme",
]

[tool.poetry.dev-dependencies]
PyYAML = "^"
autopep8 = "^"
bandit = "^"
black = "^"
blacken-docs = "^"
flake8 = "^"
isort = "^"
mypy = "^"
pre-commit = "^"
pycodestyle = "^"
pydocstyle = "^"
pylint = "^"
pyproject-flake8 = "^"
pytest = "^"
pytest-asyncio = "^"
toml = "^"
types-PyYAML = "^"
types-requests = "^"
types-setuptools = "^"
types-toml = "^"

[tool.poetry.scripts]
# commands listed here can be invoked from terminal.
sample-command = "package_2.__main__:main" # run `sample-command`

[tool.poetry.plugins."console_scripts"]
# for details aboud plugins (or entry_points), see
# https://python-poetry.org/docs/pyproject/#plugins
# https://setuptools.pypa.io/en/latest/userguide/entry_point.html
# https://docs.python.org/3/library/importlib.metadata.html
# 'console_scripts' section is same to 'poetry.scripts'
add-1-2 = "package_1.__main__:main"

[tool.poetry.plugins."pseudo_package.plugin"]
sample-plugin = "package_1.plugins:plugin_call"

[tool.poetry.urls]
"Twitter" = "https://twitter.com/kagemeka"

# FORMATTING ------------------------------------------------------------------------------
[tool.black]
# github: https://github.com/psf/black
# docs: https://black.readthedocs.io/en/stable/
# compatible configurations: https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html
line-length = 79
target-version = ["py38", "py39", "py310"]
verbose = true

[tool.autopep8]
# github: https://github.com/hhatto/autopep8
aggressive = 3
ignore = "E501,W6" # or ["E501", "W6"]
in-place = true
max_line_length = 79
recursive = true

[tool.isort]
# github: https://github.com/PyCQA/isort
# docs: https://pycqa.github.io/isort/
# config files -> https://pycqa.github.io/isort/docs/configuration/config_files.html
# options: https://pycqa.github.io/isort/docs/configuration/options.html
profile = "black"
# profiles: https://pycqa.github.io/isort/docs/configuration/profiles.html
line_length = 79

# LINTING ------------------------------------------------------------------------------
[tool.flake8]
# github: https://github.com/PyCQA/flake8
# docs: https://flake8.pycqa.org/en/latest/
# options: https://flake8.pycqa.org/en/latest/user/options.html
count = 'true'
exclude = ["docs/", "scripts/"]
exit_zero = 'true'
ignore = 'E203'
max_complexity = 3 # https://en.wikipedia.org/wiki/Cyclomatic_complexity
max_line_length = 79
show_source = 'true'
statistics = 'true'
verbose = 'true'

# TYPE CHECKING ------------------------------------------------------------------------------
[tool.mypy]
# github: https://github.com/python/mypy
# docs: https://mypy.readthedocs.io/en/stable/
# options: https://mypy.readthedocs.io/en/stable/config_file.html
allow_untyped_globals = false
color_output = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
error_summary = true
exclude = ["docs/"]
follow_imports = 'normal'
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
no_strict_optional = false
pretty = true
python_version = "3.10"
show_absolute_path = true
show_column_numbers = true
show_error_codes = true
strict = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_return_any = true
warn_unused_ignores = true

[tool.pyre]
# github: https://github.com/facebook/pyre-check
# docs: https://pyre-check.org/

# TESTING ------------------------------------------------------------------------------
[tool.pytest.ini_options]
# github: https://github.com/pytest-dev/pytest
# docs: https://docs.pytest.org
cache_dir = "/tmp/.pytest_cache"

[tool.tox]
# github: https://github.com/tox-dev/tox
# docs: https://tox.wiki/en/latest/
