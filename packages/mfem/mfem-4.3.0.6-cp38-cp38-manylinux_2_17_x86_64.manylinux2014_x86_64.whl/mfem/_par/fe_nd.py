# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fe_nd
else:
    import _fe_nd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _fe_nd.SWIG_PyInstanceMethod_New
_swig_new_static_method = _fe_nd.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._par.fe_base
import mfem._par.intrules
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.geom
import mfem._par.densemat
import mfem._par.vector
import mfem._par.operators
import mfem._par.matrix
import mfem._par.element
import mfem._par.globals
import mfem._par.table
import mfem._par.hash
class ND_HexahedronElement(mfem._par.fe_base.VectorTensorFiniteElement):
    r"""Proxy of C++ mfem::ND_HexahedronElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(ND_HexahedronElement self, int const p, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_HexahedronElement"""
        _fe_nd.ND_HexahedronElement_swiginit(self, _fe_nd.new_ND_HexahedronElement(*args, **kwargs))

    def CalcVShape(self, *args):
        r"""
        CalcVShape(ND_HexahedronElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe_nd.ND_HexahedronElement_CalcVShape(self, *args)
    CalcVShape = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_CalcVShape)

    def CalcCurlShape(self, ip, curl_shape):
        r"""CalcCurlShape(ND_HexahedronElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe_nd.ND_HexahedronElement_CalcCurlShape(self, ip, curl_shape)
    CalcCurlShape = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_CalcCurlShape)

    def GetLocalInterpolation(self, Trans, I):
        r"""GetLocalInterpolation(ND_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_HexahedronElement_GetLocalInterpolation(self, Trans, I)
    GetLocalInterpolation = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_GetLocalInterpolation)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(ND_HexahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_nd.ND_HexahedronElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_GetLocalRestriction)

    def GetTransferMatrix(self, fe, Trans, I):
        r"""GetTransferMatrix(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_HexahedronElement_GetTransferMatrix(self, fe, Trans, I)
    GetTransferMatrix = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_GetTransferMatrix)

    def ProjectFromNodes(self, vc, Trans, dofs):
        r"""ProjectFromNodes(ND_HexahedronElement self, Vector vc, mfem::ElementTransformation & Trans, Vector dofs)"""
        return _fe_nd.ND_HexahedronElement_ProjectFromNodes(self, vc, Trans, dofs)
    ProjectFromNodes = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_ProjectFromNodes)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        r"""ProjectMatrixCoefficient(ND_HexahedronElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe_nd.ND_HexahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)
    ProjectMatrixCoefficient = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_ProjectMatrixCoefficient)

    def Project(self, *args):
        r"""
        Project(ND_HexahedronElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_HexahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_HexahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe_nd.ND_HexahedronElement_Project(self, *args)
    Project = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_Project)

    def ProjectGrad(self, fe, Trans, grad):
        r"""ProjectGrad(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe_nd.ND_HexahedronElement_ProjectGrad(self, fe, Trans, grad)
    ProjectGrad = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_ProjectGrad)

    def ProjectCurl(self, fe, Trans, curl):
        r"""ProjectCurl(ND_HexahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe_nd.ND_HexahedronElement_ProjectCurl(self, fe, Trans, curl)
    ProjectCurl = _swig_new_instance_method(_fe_nd.ND_HexahedronElement_ProjectCurl)
    __swig_destroy__ = _fe_nd.delete_ND_HexahedronElement

# Register ND_HexahedronElement in _fe_nd:
_fe_nd.ND_HexahedronElement_swigregister(ND_HexahedronElement)

class ND_QuadrilateralElement(mfem._par.fe_base.VectorTensorFiniteElement):
    r"""Proxy of C++ mfem::ND_QuadrilateralElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(ND_QuadrilateralElement self, int const p, int const cb_type=GaussLobatto, int const ob_type=GaussLegendre) -> ND_QuadrilateralElement"""
        _fe_nd.ND_QuadrilateralElement_swiginit(self, _fe_nd.new_ND_QuadrilateralElement(*args, **kwargs))

    def CalcVShape(self, *args):
        r"""
        CalcVShape(ND_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe_nd.ND_QuadrilateralElement_CalcVShape(self, *args)
    CalcVShape = _swig_new_instance_method(_fe_nd.ND_QuadrilateralElement_CalcVShape)

    def CalcCurlShape(self, ip, curl_shape):
        r"""CalcCurlShape(ND_QuadrilateralElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe_nd.ND_QuadrilateralElement_CalcCurlShape(self, ip, curl_shape)
    CalcCurlShape = _swig_new_instance_method(_fe_nd.ND_QuadrilateralElement_CalcCurlShape)

    def GetLocalInterpolation(self, Trans, I):
        r"""GetLocalInterpolation(ND_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_QuadrilateralElement_GetLocalInterpolation(self, Trans, I)
    GetLocalInterpolation = _swig_new_instance_method(_fe_nd.ND_QuadrilateralElement_GetLocalInterpolation)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(ND_QuadrilateralElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_nd.ND_QuadrilateralElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_nd.ND_QuadrilateralElement_GetLocalRestriction)

    def GetTransferMatrix(self, fe, Trans, I):
        r"""GetTransferMatrix(ND_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_QuadrilateralElement_GetTransferMatrix(self, fe, Trans, I)
    GetTransferMatrix = _swig_new_instance_method(_fe_nd.ND_QuadrilateralElement_GetTransferMatrix)

    def ProjectFromNodes(self, vc, Trans, dofs):
        r"""ProjectFromNodes(ND_QuadrilateralElement self, Vector vc, mfem::ElementTransformation & Trans, Vector dofs)"""
        return _fe_nd.ND_QuadrilateralElement_ProjectFromNodes(self, vc, Trans, dofs)
    ProjectFromNodes = _swig_new_instance_method(_fe_nd.ND_QuadrilateralElement_ProjectFromNodes)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        r"""ProjectMatrixCoefficient(ND_QuadrilateralElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe_nd.ND_QuadrilateralElement_ProjectMatrixCoefficient(self, mc, T, dofs)
    ProjectMatrixCoefficient = _swig_new_instance_method(_fe_nd.ND_QuadrilateralElement_ProjectMatrixCoefficient)

    def Project(self, *args):
        r"""
        Project(ND_QuadrilateralElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_QuadrilateralElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_QuadrilateralElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe_nd.ND_QuadrilateralElement_Project(self, *args)
    Project = _swig_new_instance_method(_fe_nd.ND_QuadrilateralElement_Project)

    def ProjectGrad(self, fe, Trans, grad):
        r"""ProjectGrad(ND_QuadrilateralElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe_nd.ND_QuadrilateralElement_ProjectGrad(self, fe, Trans, grad)
    ProjectGrad = _swig_new_instance_method(_fe_nd.ND_QuadrilateralElement_ProjectGrad)
    __swig_destroy__ = _fe_nd.delete_ND_QuadrilateralElement

# Register ND_QuadrilateralElement in _fe_nd:
_fe_nd.ND_QuadrilateralElement_swigregister(ND_QuadrilateralElement)

class ND_TetrahedronElement(mfem._par.fe_base.VectorFiniteElement):
    r"""Proxy of C++ mfem::ND_TetrahedronElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        r"""__init__(ND_TetrahedronElement self, int const p) -> ND_TetrahedronElement"""
        _fe_nd.ND_TetrahedronElement_swiginit(self, _fe_nd.new_ND_TetrahedronElement(p))

    def CalcVShape(self, *args):
        r"""
        CalcVShape(ND_TetrahedronElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe_nd.ND_TetrahedronElement_CalcVShape(self, *args)
    CalcVShape = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_CalcVShape)

    def CalcCurlShape(self, ip, curl_shape):
        r"""CalcCurlShape(ND_TetrahedronElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe_nd.ND_TetrahedronElement_CalcCurlShape(self, ip, curl_shape)
    CalcCurlShape = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_CalcCurlShape)

    def GetLocalInterpolation(self, Trans, I):
        r"""GetLocalInterpolation(ND_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_TetrahedronElement_GetLocalInterpolation(self, Trans, I)
    GetLocalInterpolation = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_GetLocalInterpolation)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(ND_TetrahedronElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_nd.ND_TetrahedronElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_GetLocalRestriction)

    def GetTransferMatrix(self, fe, Trans, I):
        r"""GetTransferMatrix(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_TetrahedronElement_GetTransferMatrix(self, fe, Trans, I)
    GetTransferMatrix = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_GetTransferMatrix)

    def ProjectFromNodes(self, vc, Trans, dofs):
        r"""ProjectFromNodes(ND_TetrahedronElement self, Vector vc, mfem::ElementTransformation & Trans, Vector dofs)"""
        return _fe_nd.ND_TetrahedronElement_ProjectFromNodes(self, vc, Trans, dofs)
    ProjectFromNodes = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_ProjectFromNodes)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        r"""ProjectMatrixCoefficient(ND_TetrahedronElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe_nd.ND_TetrahedronElement_ProjectMatrixCoefficient(self, mc, T, dofs)
    ProjectMatrixCoefficient = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_ProjectMatrixCoefficient)

    def Project(self, *args):
        r"""
        Project(ND_TetrahedronElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TetrahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_TetrahedronElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe_nd.ND_TetrahedronElement_Project(self, *args)
    Project = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_Project)

    def ProjectGrad(self, fe, Trans, grad):
        r"""ProjectGrad(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe_nd.ND_TetrahedronElement_ProjectGrad(self, fe, Trans, grad)
    ProjectGrad = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_ProjectGrad)

    def ProjectCurl(self, fe, Trans, curl):
        r"""ProjectCurl(ND_TetrahedronElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix curl)"""
        return _fe_nd.ND_TetrahedronElement_ProjectCurl(self, fe, Trans, curl)
    ProjectCurl = _swig_new_instance_method(_fe_nd.ND_TetrahedronElement_ProjectCurl)
    __swig_destroy__ = _fe_nd.delete_ND_TetrahedronElement

# Register ND_TetrahedronElement in _fe_nd:
_fe_nd.ND_TetrahedronElement_swigregister(ND_TetrahedronElement)

class ND_TriangleElement(mfem._par.fe_base.VectorFiniteElement):
    r"""Proxy of C++ mfem::ND_TriangleElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, p):
        r"""__init__(ND_TriangleElement self, int const p) -> ND_TriangleElement"""
        _fe_nd.ND_TriangleElement_swiginit(self, _fe_nd.new_ND_TriangleElement(p))

    def CalcVShape(self, *args):
        r"""
        CalcVShape(ND_TriangleElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe_nd.ND_TriangleElement_CalcVShape(self, *args)
    CalcVShape = _swig_new_instance_method(_fe_nd.ND_TriangleElement_CalcVShape)

    def CalcCurlShape(self, ip, curl_shape):
        r"""CalcCurlShape(ND_TriangleElement self, IntegrationPoint ip, DenseMatrix curl_shape)"""
        return _fe_nd.ND_TriangleElement_CalcCurlShape(self, ip, curl_shape)
    CalcCurlShape = _swig_new_instance_method(_fe_nd.ND_TriangleElement_CalcCurlShape)

    def GetLocalInterpolation(self, Trans, I):
        r"""GetLocalInterpolation(ND_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_TriangleElement_GetLocalInterpolation(self, Trans, I)
    GetLocalInterpolation = _swig_new_instance_method(_fe_nd.ND_TriangleElement_GetLocalInterpolation)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(ND_TriangleElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_nd.ND_TriangleElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_nd.ND_TriangleElement_GetLocalRestriction)

    def GetTransferMatrix(self, fe, Trans, I):
        r"""GetTransferMatrix(ND_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_TriangleElement_GetTransferMatrix(self, fe, Trans, I)
    GetTransferMatrix = _swig_new_instance_method(_fe_nd.ND_TriangleElement_GetTransferMatrix)

    def ProjectFromNodes(self, vc, Trans, dofs):
        r"""ProjectFromNodes(ND_TriangleElement self, Vector vc, mfem::ElementTransformation & Trans, Vector dofs)"""
        return _fe_nd.ND_TriangleElement_ProjectFromNodes(self, vc, Trans, dofs)
    ProjectFromNodes = _swig_new_instance_method(_fe_nd.ND_TriangleElement_ProjectFromNodes)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        r"""ProjectMatrixCoefficient(ND_TriangleElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe_nd.ND_TriangleElement_ProjectMatrixCoefficient(self, mc, T, dofs)
    ProjectMatrixCoefficient = _swig_new_instance_method(_fe_nd.ND_TriangleElement_ProjectMatrixCoefficient)

    def Project(self, *args):
        r"""
        Project(ND_TriangleElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TriangleElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_TriangleElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe_nd.ND_TriangleElement_Project(self, *args)
    Project = _swig_new_instance_method(_fe_nd.ND_TriangleElement_Project)

    def ProjectGrad(self, fe, Trans, grad):
        r"""ProjectGrad(ND_TriangleElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe_nd.ND_TriangleElement_ProjectGrad(self, fe, Trans, grad)
    ProjectGrad = _swig_new_instance_method(_fe_nd.ND_TriangleElement_ProjectGrad)
    __swig_destroy__ = _fe_nd.delete_ND_TriangleElement

# Register ND_TriangleElement in _fe_nd:
_fe_nd.ND_TriangleElement_swigregister(ND_TriangleElement)

class ND_SegmentElement(mfem._par.fe_base.VectorTensorFiniteElement):
    r"""Proxy of C++ mfem::ND_SegmentElement class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        r"""__init__(ND_SegmentElement self, int const p, int const ob_type=GaussLegendre) -> ND_SegmentElement"""
        _fe_nd.ND_SegmentElement_swiginit(self, _fe_nd.new_ND_SegmentElement(*args, **kwargs))

    def CalcShape(self, ip, shape):
        r"""CalcShape(ND_SegmentElement self, IntegrationPoint ip, Vector shape)"""
        return _fe_nd.ND_SegmentElement_CalcShape(self, ip, shape)
    CalcShape = _swig_new_instance_method(_fe_nd.ND_SegmentElement_CalcShape)

    def CalcVShape(self, *args):
        r"""
        CalcVShape(ND_SegmentElement self, IntegrationPoint ip, DenseMatrix shape)
        CalcVShape(ND_SegmentElement self, mfem::ElementTransformation & Trans, DenseMatrix shape)
        """
        return _fe_nd.ND_SegmentElement_CalcVShape(self, *args)
    CalcVShape = _swig_new_instance_method(_fe_nd.ND_SegmentElement_CalcVShape)

    def GetLocalInterpolation(self, Trans, I):
        r"""GetLocalInterpolation(ND_SegmentElement self, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_SegmentElement_GetLocalInterpolation(self, Trans, I)
    GetLocalInterpolation = _swig_new_instance_method(_fe_nd.ND_SegmentElement_GetLocalInterpolation)

    def GetLocalRestriction(self, Trans, R):
        r"""GetLocalRestriction(ND_SegmentElement self, mfem::ElementTransformation & Trans, DenseMatrix R)"""
        return _fe_nd.ND_SegmentElement_GetLocalRestriction(self, Trans, R)
    GetLocalRestriction = _swig_new_instance_method(_fe_nd.ND_SegmentElement_GetLocalRestriction)

    def GetTransferMatrix(self, fe, Trans, I):
        r"""GetTransferMatrix(ND_SegmentElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)"""
        return _fe_nd.ND_SegmentElement_GetTransferMatrix(self, fe, Trans, I)
    GetTransferMatrix = _swig_new_instance_method(_fe_nd.ND_SegmentElement_GetTransferMatrix)

    def ProjectMatrixCoefficient(self, mc, T, dofs):
        r"""ProjectMatrixCoefficient(ND_SegmentElement self, mfem::MatrixCoefficient & mc, mfem::ElementTransformation & T, Vector dofs)"""
        return _fe_nd.ND_SegmentElement_ProjectMatrixCoefficient(self, mc, T, dofs)
    ProjectMatrixCoefficient = _swig_new_instance_method(_fe_nd.ND_SegmentElement_ProjectMatrixCoefficient)

    def Project(self, *args):
        r"""
        Project(ND_SegmentElement self, mfem::Coefficient & coeff, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_SegmentElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_SegmentElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        Project(ND_SegmentElement self, mfem::VectorCoefficient & vc, mfem::ElementTransformation & Trans, Vector dofs)
        Project(ND_SegmentElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix I)
        """
        return _fe_nd.ND_SegmentElement_Project(self, *args)
    Project = _swig_new_instance_method(_fe_nd.ND_SegmentElement_Project)

    def ProjectGrad(self, fe, Trans, grad):
        r"""ProjectGrad(ND_SegmentElement self, FiniteElement fe, mfem::ElementTransformation & Trans, DenseMatrix grad)"""
        return _fe_nd.ND_SegmentElement_ProjectGrad(self, fe, Trans, grad)
    ProjectGrad = _swig_new_instance_method(_fe_nd.ND_SegmentElement_ProjectGrad)
    __swig_destroy__ = _fe_nd.delete_ND_SegmentElement

# Register ND_SegmentElement in _fe_nd:
_fe_nd.ND_SegmentElement_swigregister(ND_SegmentElement)



