# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FrequencyDomainSettingChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'markers': 'list[MarkerChild]',
        'custom_markers': 'list[CustomMarkerChild]',
        'selected_bearing': 'str',
        'side_bands': 'int',
        'side_band_frequency': 'int'
    }

    attribute_map = {
        'markers': 'Markers',
        'custom_markers': 'CustomMarkers',
        'selected_bearing': 'SelectedBearing',
        'side_bands': 'SideBands',
        'side_band_frequency': 'SideBandFrequency'
    }

    def __init__(self, markers=None, custom_markers=None, selected_bearing=None, side_bands=None, side_band_frequency=None):  # noqa: E501
        """FrequencyDomainSettingChild - a model defined in Swagger"""  # noqa: E501
        self._markers = None
        self._custom_markers = None
        self._selected_bearing = None
        self._side_bands = None
        self._side_band_frequency = None
        self.discriminator = None
        if markers is not None:
            self.markers = markers
        if custom_markers is not None:
            self.custom_markers = custom_markers
        if selected_bearing is not None:
            self.selected_bearing = selected_bearing
        if side_bands is not None:
            self.side_bands = side_bands
        if side_band_frequency is not None:
            self.side_band_frequency = side_band_frequency

    @property
    def markers(self):
        """Gets the markers of this FrequencyDomainSettingChild.  # noqa: E501


        :return: The markers of this FrequencyDomainSettingChild.  # noqa: E501
        :rtype: list[MarkerChild]
        """
        return self._markers

    @markers.setter
    def markers(self, markers):
        """Sets the markers of this FrequencyDomainSettingChild.


        :param markers: The markers of this FrequencyDomainSettingChild.  # noqa: E501
        :type: list[MarkerChild]
        """

        self._markers = markers

    @property
    def custom_markers(self):
        """Gets the custom_markers of this FrequencyDomainSettingChild.  # noqa: E501


        :return: The custom_markers of this FrequencyDomainSettingChild.  # noqa: E501
        :rtype: list[CustomMarkerChild]
        """
        return self._custom_markers

    @custom_markers.setter
    def custom_markers(self, custom_markers):
        """Sets the custom_markers of this FrequencyDomainSettingChild.


        :param custom_markers: The custom_markers of this FrequencyDomainSettingChild.  # noqa: E501
        :type: list[CustomMarkerChild]
        """

        self._custom_markers = custom_markers

    @property
    def selected_bearing(self):
        """Gets the selected_bearing of this FrequencyDomainSettingChild.  # noqa: E501


        :return: The selected_bearing of this FrequencyDomainSettingChild.  # noqa: E501
        :rtype: str
        """
        return self._selected_bearing

    @selected_bearing.setter
    def selected_bearing(self, selected_bearing):
        """Sets the selected_bearing of this FrequencyDomainSettingChild.


        :param selected_bearing: The selected_bearing of this FrequencyDomainSettingChild.  # noqa: E501
        :type: str
        """

        self._selected_bearing = selected_bearing

    @property
    def side_bands(self):
        """Gets the side_bands of this FrequencyDomainSettingChild.  # noqa: E501


        :return: The side_bands of this FrequencyDomainSettingChild.  # noqa: E501
        :rtype: int
        """
        return self._side_bands

    @side_bands.setter
    def side_bands(self, side_bands):
        """Sets the side_bands of this FrequencyDomainSettingChild.


        :param side_bands: The side_bands of this FrequencyDomainSettingChild.  # noqa: E501
        :type: int
        """

        self._side_bands = side_bands

    @property
    def side_band_frequency(self):
        """Gets the side_band_frequency of this FrequencyDomainSettingChild.  # noqa: E501


        :return: The side_band_frequency of this FrequencyDomainSettingChild.  # noqa: E501
        :rtype: int
        """
        return self._side_band_frequency

    @side_band_frequency.setter
    def side_band_frequency(self, side_band_frequency):
        """Sets the side_band_frequency of this FrequencyDomainSettingChild.


        :param side_band_frequency: The side_band_frequency of this FrequencyDomainSettingChild.  # noqa: E501
        :type: int
        """

        self._side_band_frequency = side_band_frequency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FrequencyDomainSettingChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FrequencyDomainSettingChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
