# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarkerChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'marker_name': 'str',
        'marker_show_harmonics': 'bool',
        'marker_show_side_bands': 'bool',
        'marker_show_peaks': 'bool'
    }

    attribute_map = {
        'marker_name': 'MarkerName',
        'marker_show_harmonics': 'MarkerShowHarmonics',
        'marker_show_side_bands': 'MarkerShowSideBands',
        'marker_show_peaks': 'MarkerShowPeaks'
    }

    def __init__(self, marker_name=None, marker_show_harmonics=None, marker_show_side_bands=None, marker_show_peaks=None):  # noqa: E501
        """MarkerChild - a model defined in Swagger"""  # noqa: E501
        self._marker_name = None
        self._marker_show_harmonics = None
        self._marker_show_side_bands = None
        self._marker_show_peaks = None
        self.discriminator = None
        if marker_name is not None:
            self.marker_name = marker_name
        self.marker_show_harmonics = marker_show_harmonics
        self.marker_show_side_bands = marker_show_side_bands
        self.marker_show_peaks = marker_show_peaks

    @property
    def marker_name(self):
        """Gets the marker_name of this MarkerChild.  # noqa: E501


        :return: The marker_name of this MarkerChild.  # noqa: E501
        :rtype: str
        """
        return self._marker_name

    @marker_name.setter
    def marker_name(self, marker_name):
        """Sets the marker_name of this MarkerChild.


        :param marker_name: The marker_name of this MarkerChild.  # noqa: E501
        :type: str
        """

        self._marker_name = marker_name

    @property
    def marker_show_harmonics(self):
        """Gets the marker_show_harmonics of this MarkerChild.  # noqa: E501


        :return: The marker_show_harmonics of this MarkerChild.  # noqa: E501
        :rtype: bool
        """
        return self._marker_show_harmonics

    @marker_show_harmonics.setter
    def marker_show_harmonics(self, marker_show_harmonics):
        """Sets the marker_show_harmonics of this MarkerChild.


        :param marker_show_harmonics: The marker_show_harmonics of this MarkerChild.  # noqa: E501
        :type: bool
        """
        if marker_show_harmonics is None:
            raise ValueError("Invalid value for `marker_show_harmonics`, must not be `None`")  # noqa: E501

        self._marker_show_harmonics = marker_show_harmonics

    @property
    def marker_show_side_bands(self):
        """Gets the marker_show_side_bands of this MarkerChild.  # noqa: E501


        :return: The marker_show_side_bands of this MarkerChild.  # noqa: E501
        :rtype: bool
        """
        return self._marker_show_side_bands

    @marker_show_side_bands.setter
    def marker_show_side_bands(self, marker_show_side_bands):
        """Sets the marker_show_side_bands of this MarkerChild.


        :param marker_show_side_bands: The marker_show_side_bands of this MarkerChild.  # noqa: E501
        :type: bool
        """
        if marker_show_side_bands is None:
            raise ValueError("Invalid value for `marker_show_side_bands`, must not be `None`")  # noqa: E501

        self._marker_show_side_bands = marker_show_side_bands

    @property
    def marker_show_peaks(self):
        """Gets the marker_show_peaks of this MarkerChild.  # noqa: E501


        :return: The marker_show_peaks of this MarkerChild.  # noqa: E501
        :rtype: bool
        """
        return self._marker_show_peaks

    @marker_show_peaks.setter
    def marker_show_peaks(self, marker_show_peaks):
        """Sets the marker_show_peaks of this MarkerChild.


        :param marker_show_peaks: The marker_show_peaks of this MarkerChild.  # noqa: E501
        :type: bool
        """
        if marker_show_peaks is None:
            raise ValueError("Invalid value for `marker_show_peaks`, must not be `None`")  # noqa: E501

        self._marker_show_peaks = marker_show_peaks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarkerChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarkerChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
