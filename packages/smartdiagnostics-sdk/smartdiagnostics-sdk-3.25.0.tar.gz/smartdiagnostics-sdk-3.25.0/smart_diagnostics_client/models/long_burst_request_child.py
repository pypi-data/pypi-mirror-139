# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LongBurstRequestChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'long_burst_request_id': 'int',
        'long_burst_request_status': 'LongBurstRequestState',
        'requested_time': 'datetime',
        'completed_time': 'datetime',
        'requested_by_user': 'UserChild',
        'x_axis_long_burst_file': 'str',
        'y_axis_long_burst_file': 'str'
    }

    attribute_map = {
        'long_burst_request_id': 'LongBurstRequestId',
        'long_burst_request_status': 'LongBurstRequestStatus',
        'requested_time': 'RequestedTime',
        'completed_time': 'CompletedTime',
        'requested_by_user': 'RequestedByUser',
        'x_axis_long_burst_file': 'XAxisLongBurstFile',
        'y_axis_long_burst_file': 'YAxisLongBurstFile'
    }

    def __init__(self, long_burst_request_id=None, long_burst_request_status=None, requested_time=None, completed_time=None, requested_by_user=None, x_axis_long_burst_file=None, y_axis_long_burst_file=None):  # noqa: E501
        """LongBurstRequestChild - a model defined in Swagger"""  # noqa: E501
        self._long_burst_request_id = None
        self._long_burst_request_status = None
        self._requested_time = None
        self._completed_time = None
        self._requested_by_user = None
        self._x_axis_long_burst_file = None
        self._y_axis_long_burst_file = None
        self.discriminator = None
        if long_burst_request_id is not None:
            self.long_burst_request_id = long_burst_request_id
        if long_burst_request_status is not None:
            self.long_burst_request_status = long_burst_request_status
        if requested_time is not None:
            self.requested_time = requested_time
        if completed_time is not None:
            self.completed_time = completed_time
        if requested_by_user is not None:
            self.requested_by_user = requested_by_user
        if x_axis_long_burst_file is not None:
            self.x_axis_long_burst_file = x_axis_long_burst_file
        if y_axis_long_burst_file is not None:
            self.y_axis_long_burst_file = y_axis_long_burst_file

    @property
    def long_burst_request_id(self):
        """Gets the long_burst_request_id of this LongBurstRequestChild.  # noqa: E501


        :return: The long_burst_request_id of this LongBurstRequestChild.  # noqa: E501
        :rtype: int
        """
        return self._long_burst_request_id

    @long_burst_request_id.setter
    def long_burst_request_id(self, long_burst_request_id):
        """Sets the long_burst_request_id of this LongBurstRequestChild.


        :param long_burst_request_id: The long_burst_request_id of this LongBurstRequestChild.  # noqa: E501
        :type: int
        """

        self._long_burst_request_id = long_burst_request_id

    @property
    def long_burst_request_status(self):
        """Gets the long_burst_request_status of this LongBurstRequestChild.  # noqa: E501


        :return: The long_burst_request_status of this LongBurstRequestChild.  # noqa: E501
        :rtype: LongBurstRequestState
        """
        return self._long_burst_request_status

    @long_burst_request_status.setter
    def long_burst_request_status(self, long_burst_request_status):
        """Sets the long_burst_request_status of this LongBurstRequestChild.


        :param long_burst_request_status: The long_burst_request_status of this LongBurstRequestChild.  # noqa: E501
        :type: LongBurstRequestState
        """

        self._long_burst_request_status = long_burst_request_status

    @property
    def requested_time(self):
        """Gets the requested_time of this LongBurstRequestChild.  # noqa: E501


        :return: The requested_time of this LongBurstRequestChild.  # noqa: E501
        :rtype: datetime
        """
        return self._requested_time

    @requested_time.setter
    def requested_time(self, requested_time):
        """Sets the requested_time of this LongBurstRequestChild.


        :param requested_time: The requested_time of this LongBurstRequestChild.  # noqa: E501
        :type: datetime
        """

        self._requested_time = requested_time

    @property
    def completed_time(self):
        """Gets the completed_time of this LongBurstRequestChild.  # noqa: E501


        :return: The completed_time of this LongBurstRequestChild.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_time

    @completed_time.setter
    def completed_time(self, completed_time):
        """Sets the completed_time of this LongBurstRequestChild.


        :param completed_time: The completed_time of this LongBurstRequestChild.  # noqa: E501
        :type: datetime
        """

        self._completed_time = completed_time

    @property
    def requested_by_user(self):
        """Gets the requested_by_user of this LongBurstRequestChild.  # noqa: E501


        :return: The requested_by_user of this LongBurstRequestChild.  # noqa: E501
        :rtype: UserChild
        """
        return self._requested_by_user

    @requested_by_user.setter
    def requested_by_user(self, requested_by_user):
        """Sets the requested_by_user of this LongBurstRequestChild.


        :param requested_by_user: The requested_by_user of this LongBurstRequestChild.  # noqa: E501
        :type: UserChild
        """

        self._requested_by_user = requested_by_user

    @property
    def x_axis_long_burst_file(self):
        """Gets the x_axis_long_burst_file of this LongBurstRequestChild.  # noqa: E501


        :return: The x_axis_long_burst_file of this LongBurstRequestChild.  # noqa: E501
        :rtype: str
        """
        return self._x_axis_long_burst_file

    @x_axis_long_burst_file.setter
    def x_axis_long_burst_file(self, x_axis_long_burst_file):
        """Sets the x_axis_long_burst_file of this LongBurstRequestChild.


        :param x_axis_long_burst_file: The x_axis_long_burst_file of this LongBurstRequestChild.  # noqa: E501
        :type: str
        """

        self._x_axis_long_burst_file = x_axis_long_burst_file

    @property
    def y_axis_long_burst_file(self):
        """Gets the y_axis_long_burst_file of this LongBurstRequestChild.  # noqa: E501


        :return: The y_axis_long_burst_file of this LongBurstRequestChild.  # noqa: E501
        :rtype: str
        """
        return self._y_axis_long_burst_file

    @y_axis_long_burst_file.setter
    def y_axis_long_burst_file(self, y_axis_long_burst_file):
        """Sets the y_axis_long_burst_file of this LongBurstRequestChild.


        :param y_axis_long_burst_file: The y_axis_long_burst_file of this LongBurstRequestChild.  # noqa: E501
        :type: str
        """

        self._y_axis_long_burst_file = y_axis_long_burst_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LongBurstRequestChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LongBurstRequestChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
