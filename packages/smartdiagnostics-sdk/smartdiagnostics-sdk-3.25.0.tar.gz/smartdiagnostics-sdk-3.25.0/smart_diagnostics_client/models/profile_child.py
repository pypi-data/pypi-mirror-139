# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProfileChild(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acceleration_units': 'str',
        'pressure_units': 'str',
        'temperature_units': 'str',
        'velocity_units': 'str',
        'last_updated_time': 'datetime',
        'date_format': 'str',
        'time_format': 'str',
        'time_zones': 'str'
    }

    attribute_map = {
        'acceleration_units': 'AccelerationUnits',
        'pressure_units': 'PressureUnits',
        'temperature_units': 'TemperatureUnits',
        'velocity_units': 'VelocityUnits',
        'last_updated_time': 'LastUpdatedTime',
        'date_format': 'DateFormat',
        'time_format': 'TimeFormat',
        'time_zones': 'TimeZones'
    }

    def __init__(self, acceleration_units=None, pressure_units=None, temperature_units=None, velocity_units=None, last_updated_time=None, date_format=None, time_format=None, time_zones=None):  # noqa: E501
        """ProfileChild - a model defined in Swagger"""  # noqa: E501
        self._acceleration_units = None
        self._pressure_units = None
        self._temperature_units = None
        self._velocity_units = None
        self._last_updated_time = None
        self._date_format = None
        self._time_format = None
        self._time_zones = None
        self.discriminator = None
        if acceleration_units is not None:
            self.acceleration_units = acceleration_units
        if pressure_units is not None:
            self.pressure_units = pressure_units
        if temperature_units is not None:
            self.temperature_units = temperature_units
        if velocity_units is not None:
            self.velocity_units = velocity_units
        if last_updated_time is not None:
            self.last_updated_time = last_updated_time
        if date_format is not None:
            self.date_format = date_format
        if time_format is not None:
            self.time_format = time_format
        if time_zones is not None:
            self.time_zones = time_zones

    @property
    def acceleration_units(self):
        """Gets the acceleration_units of this ProfileChild.  # noqa: E501


        :return: The acceleration_units of this ProfileChild.  # noqa: E501
        :rtype: str
        """
        return self._acceleration_units

    @acceleration_units.setter
    def acceleration_units(self, acceleration_units):
        """Sets the acceleration_units of this ProfileChild.


        :param acceleration_units: The acceleration_units of this ProfileChild.  # noqa: E501
        :type: str
        """

        self._acceleration_units = acceleration_units

    @property
    def pressure_units(self):
        """Gets the pressure_units of this ProfileChild.  # noqa: E501


        :return: The pressure_units of this ProfileChild.  # noqa: E501
        :rtype: str
        """
        return self._pressure_units

    @pressure_units.setter
    def pressure_units(self, pressure_units):
        """Sets the pressure_units of this ProfileChild.


        :param pressure_units: The pressure_units of this ProfileChild.  # noqa: E501
        :type: str
        """

        self._pressure_units = pressure_units

    @property
    def temperature_units(self):
        """Gets the temperature_units of this ProfileChild.  # noqa: E501


        :return: The temperature_units of this ProfileChild.  # noqa: E501
        :rtype: str
        """
        return self._temperature_units

    @temperature_units.setter
    def temperature_units(self, temperature_units):
        """Sets the temperature_units of this ProfileChild.


        :param temperature_units: The temperature_units of this ProfileChild.  # noqa: E501
        :type: str
        """

        self._temperature_units = temperature_units

    @property
    def velocity_units(self):
        """Gets the velocity_units of this ProfileChild.  # noqa: E501


        :return: The velocity_units of this ProfileChild.  # noqa: E501
        :rtype: str
        """
        return self._velocity_units

    @velocity_units.setter
    def velocity_units(self, velocity_units):
        """Sets the velocity_units of this ProfileChild.


        :param velocity_units: The velocity_units of this ProfileChild.  # noqa: E501
        :type: str
        """

        self._velocity_units = velocity_units

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this ProfileChild.  # noqa: E501


        :return: The last_updated_time of this ProfileChild.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this ProfileChild.


        :param last_updated_time: The last_updated_time of this ProfileChild.  # noqa: E501
        :type: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def date_format(self):
        """Gets the date_format of this ProfileChild.  # noqa: E501


        :return: The date_format of this ProfileChild.  # noqa: E501
        :rtype: str
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this ProfileChild.


        :param date_format: The date_format of this ProfileChild.  # noqa: E501
        :type: str
        """

        self._date_format = date_format

    @property
    def time_format(self):
        """Gets the time_format of this ProfileChild.  # noqa: E501


        :return: The time_format of this ProfileChild.  # noqa: E501
        :rtype: str
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this ProfileChild.


        :param time_format: The time_format of this ProfileChild.  # noqa: E501
        :type: str
        """

        self._time_format = time_format

    @property
    def time_zones(self):
        """Gets the time_zones of this ProfileChild.  # noqa: E501


        :return: The time_zones of this ProfileChild.  # noqa: E501
        :rtype: str
        """
        return self._time_zones

    @time_zones.setter
    def time_zones(self, time_zones):
        """Sets the time_zones of this ProfileChild.


        :param time_zones: The time_zones of this ProfileChild.  # noqa: E501
        :type: str
        """

        self._time_zones = time_zones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProfileChild, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProfileChild):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
