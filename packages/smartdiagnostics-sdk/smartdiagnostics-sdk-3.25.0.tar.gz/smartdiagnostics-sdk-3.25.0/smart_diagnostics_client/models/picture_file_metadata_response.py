# coding: utf-8

"""
    Internal API

    SmartDiagnostics REST API for internal users only  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PictureFileMetadataResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_type': 'ContentType',
        'display_name': 'str',
        'parent_folder_id': 'str',
        'description': 'str',
        'location': 'LocationChild',
        'corporation': 'CorporationChild',
        'group_ids': 'list[str]',
        'id': 'str',
        'file_name': 'str',
        'thumbnail_file_name': 'str',
        'creation_date': 'datetime',
        'update_date': 'datetime',
        'file_count': 'int',
        'folder_count': 'int',
        'is_root_folder': 'bool',
        'tags': 'list[TagChild]',
        'image_height': 'int',
        'image_width': 'int'
    }

    attribute_map = {
        'file_type': 'FileType',
        'display_name': 'DisplayName',
        'parent_folder_id': 'ParentFolderId',
        'description': 'Description',
        'location': 'Location',
        'corporation': 'Corporation',
        'group_ids': 'GroupIds',
        'id': 'Id',
        'file_name': 'FileName',
        'thumbnail_file_name': 'ThumbnailFileName',
        'creation_date': 'CreationDate',
        'update_date': 'UpdateDate',
        'file_count': 'FileCount',
        'folder_count': 'FolderCount',
        'is_root_folder': 'IsRootFolder',
        'tags': 'Tags',
        'image_height': 'ImageHeight',
        'image_width': 'ImageWidth'
    }

    def __init__(self, file_type=None, display_name=None, parent_folder_id=None, description=None, location=None, corporation=None, group_ids=None, id=None, file_name=None, thumbnail_file_name=None, creation_date=None, update_date=None, file_count=None, folder_count=None, is_root_folder=None, tags=None, image_height=None, image_width=None):  # noqa: E501
        """PictureFileMetadataResponse - a model defined in Swagger"""  # noqa: E501
        self._file_type = None
        self._display_name = None
        self._parent_folder_id = None
        self._description = None
        self._location = None
        self._corporation = None
        self._group_ids = None
        self._id = None
        self._file_name = None
        self._thumbnail_file_name = None
        self._creation_date = None
        self._update_date = None
        self._file_count = None
        self._folder_count = None
        self._is_root_folder = None
        self._tags = None
        self._image_height = None
        self._image_width = None
        self.discriminator = None
        self.file_type = file_type
        if display_name is not None:
            self.display_name = display_name
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        if description is not None:
            self.description = description
        if location is not None:
            self.location = location
        if corporation is not None:
            self.corporation = corporation
        if group_ids is not None:
            self.group_ids = group_ids
        self.id = id
        if file_name is not None:
            self.file_name = file_name
        if thumbnail_file_name is not None:
            self.thumbnail_file_name = thumbnail_file_name
        if creation_date is not None:
            self.creation_date = creation_date
        if update_date is not None:
            self.update_date = update_date
        if file_count is not None:
            self.file_count = file_count
        if folder_count is not None:
            self.folder_count = folder_count
        if is_root_folder is not None:
            self.is_root_folder = is_root_folder
        if tags is not None:
            self.tags = tags
        if image_height is not None:
            self.image_height = image_height
        if image_width is not None:
            self.image_width = image_width

    @property
    def file_type(self):
        """Gets the file_type of this PictureFileMetadataResponse.  # noqa: E501


        :return: The file_type of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: ContentType
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this PictureFileMetadataResponse.


        :param file_type: The file_type of this PictureFileMetadataResponse.  # noqa: E501
        :type: ContentType
        """
        if file_type is None:
            raise ValueError("Invalid value for `file_type`, must not be `None`")  # noqa: E501

        self._file_type = file_type

    @property
    def display_name(self):
        """Gets the display_name of this PictureFileMetadataResponse.  # noqa: E501


        :return: The display_name of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PictureFileMetadataResponse.


        :param display_name: The display_name of this PictureFileMetadataResponse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this PictureFileMetadataResponse.  # noqa: E501


        :return: The parent_folder_id of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this PictureFileMetadataResponse.


        :param parent_folder_id: The parent_folder_id of this PictureFileMetadataResponse.  # noqa: E501
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def description(self):
        """Gets the description of this PictureFileMetadataResponse.  # noqa: E501


        :return: The description of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PictureFileMetadataResponse.


        :param description: The description of this PictureFileMetadataResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location(self):
        """Gets the location of this PictureFileMetadataResponse.  # noqa: E501


        :return: The location of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: LocationChild
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PictureFileMetadataResponse.


        :param location: The location of this PictureFileMetadataResponse.  # noqa: E501
        :type: LocationChild
        """

        self._location = location

    @property
    def corporation(self):
        """Gets the corporation of this PictureFileMetadataResponse.  # noqa: E501


        :return: The corporation of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: CorporationChild
        """
        return self._corporation

    @corporation.setter
    def corporation(self, corporation):
        """Sets the corporation of this PictureFileMetadataResponse.


        :param corporation: The corporation of this PictureFileMetadataResponse.  # noqa: E501
        :type: CorporationChild
        """

        self._corporation = corporation

    @property
    def group_ids(self):
        """Gets the group_ids of this PictureFileMetadataResponse.  # noqa: E501

        Ids of groups the file belongs to  # noqa: E501

        :return: The group_ids of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids):
        """Sets the group_ids of this PictureFileMetadataResponse.

        Ids of groups the file belongs to  # noqa: E501

        :param group_ids: The group_ids of this PictureFileMetadataResponse.  # noqa: E501
        :type: list[str]
        """

        self._group_ids = group_ids

    @property
    def id(self):
        """Gets the id of this PictureFileMetadataResponse.  # noqa: E501


        :return: The id of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PictureFileMetadataResponse.


        :param id: The id of this PictureFileMetadataResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def file_name(self):
        """Gets the file_name of this PictureFileMetadataResponse.  # noqa: E501


        :return: The file_name of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this PictureFileMetadataResponse.


        :param file_name: The file_name of this PictureFileMetadataResponse.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def thumbnail_file_name(self):
        """Gets the thumbnail_file_name of this PictureFileMetadataResponse.  # noqa: E501


        :return: The thumbnail_file_name of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail_file_name

    @thumbnail_file_name.setter
    def thumbnail_file_name(self, thumbnail_file_name):
        """Sets the thumbnail_file_name of this PictureFileMetadataResponse.


        :param thumbnail_file_name: The thumbnail_file_name of this PictureFileMetadataResponse.  # noqa: E501
        :type: str
        """

        self._thumbnail_file_name = thumbnail_file_name

    @property
    def creation_date(self):
        """Gets the creation_date of this PictureFileMetadataResponse.  # noqa: E501


        :return: The creation_date of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this PictureFileMetadataResponse.


        :param creation_date: The creation_date of this PictureFileMetadataResponse.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def update_date(self):
        """Gets the update_date of this PictureFileMetadataResponse.  # noqa: E501


        :return: The update_date of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this PictureFileMetadataResponse.


        :param update_date: The update_date of this PictureFileMetadataResponse.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def file_count(self):
        """Gets the file_count of this PictureFileMetadataResponse.  # noqa: E501


        :return: The file_count of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: int
        """
        return self._file_count

    @file_count.setter
    def file_count(self, file_count):
        """Sets the file_count of this PictureFileMetadataResponse.


        :param file_count: The file_count of this PictureFileMetadataResponse.  # noqa: E501
        :type: int
        """

        self._file_count = file_count

    @property
    def folder_count(self):
        """Gets the folder_count of this PictureFileMetadataResponse.  # noqa: E501


        :return: The folder_count of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: int
        """
        return self._folder_count

    @folder_count.setter
    def folder_count(self, folder_count):
        """Sets the folder_count of this PictureFileMetadataResponse.


        :param folder_count: The folder_count of this PictureFileMetadataResponse.  # noqa: E501
        :type: int
        """

        self._folder_count = folder_count

    @property
    def is_root_folder(self):
        """Gets the is_root_folder of this PictureFileMetadataResponse.  # noqa: E501


        :return: The is_root_folder of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_root_folder

    @is_root_folder.setter
    def is_root_folder(self, is_root_folder):
        """Sets the is_root_folder of this PictureFileMetadataResponse.


        :param is_root_folder: The is_root_folder of this PictureFileMetadataResponse.  # noqa: E501
        :type: bool
        """

        self._is_root_folder = is_root_folder

    @property
    def tags(self):
        """Gets the tags of this PictureFileMetadataResponse.  # noqa: E501


        :return: The tags of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: list[TagChild]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PictureFileMetadataResponse.


        :param tags: The tags of this PictureFileMetadataResponse.  # noqa: E501
        :type: list[TagChild]
        """

        self._tags = tags

    @property
    def image_height(self):
        """Gets the image_height of this PictureFileMetadataResponse.  # noqa: E501


        :return: The image_height of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: int
        """
        return self._image_height

    @image_height.setter
    def image_height(self, image_height):
        """Sets the image_height of this PictureFileMetadataResponse.


        :param image_height: The image_height of this PictureFileMetadataResponse.  # noqa: E501
        :type: int
        """

        self._image_height = image_height

    @property
    def image_width(self):
        """Gets the image_width of this PictureFileMetadataResponse.  # noqa: E501


        :return: The image_width of this PictureFileMetadataResponse.  # noqa: E501
        :rtype: int
        """
        return self._image_width

    @image_width.setter
    def image_width(self, image_width):
        """Sets the image_width of this PictureFileMetadataResponse.


        :param image_width: The image_width of this PictureFileMetadataResponse.  # noqa: E501
        :type: int
        """

        self._image_width = image_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PictureFileMetadataResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PictureFileMetadataResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
