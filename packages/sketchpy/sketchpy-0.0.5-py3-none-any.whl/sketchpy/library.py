

class bts:
    def __init__(self,x_offset = 300, y_offset = 300):
        '''x_offset and y_offset represents the position of the image being drawn, by default it is 300 you can change it any coordinates you want'''
        import turtle as tu
        self.tu = tu
        self.face_cut = [(195, 230),(193, 253),(193, 300),(199, 330),(214, 361),(214, 367),(219, 373),(228, 386),(238, 395),(248, 400),(258, 403),(284, 407),(297, 405),(361, 371),(373, 359),(395, 335),(396, 329),(406, 317),(411, 309),(406, 294),(402, 287),(398, 276),(390, 266),(384, 259),(375, 247),(369, 241),(379, 254),(370, 246),(365, 243),(358, 237),(353, 234),(347, 231),(357, 241),(345, 230),(335, 217),(331, 207),(331, 195),(331, 189),(325, 202),(322, 208),(319, 216),(318, 227),(319, 242),(321, 252),(314, 234),(312, 222),(311, 211),(316, 197),(310, 203),(305, 208),(301, 228),(299, 211),(296, 231),(295, 209),(293, 208),(290, 228),(292, 203),(288, 203),(283, 231),(290, 201),(298, 179),(275, 193),(262, 198),(243, 203),(231, 211),(229, 213),(235, 224),(223, 214),(221, 205),(208, 214),(197, 225),(194, 230),(191, 255),(191, 263),]
        self.hair_out = [(191, 262),(189, 252),(187, 237),(186, 225),(186, 204),(182, 239),(181, 206),(175, 233),(177, 205),(167, 196),(168, 172),(158, 182),(165, 170),(169, 161),(170, 154),(159, 156),(151, 146),(158, 156),(168, 150),(174, 141),(171, 144),(167, 136),(168, 124),(172, 120),(174, 138),(174, 126),(174, 115),(175, 101),(181, 93),(194, 81),(209, 71),(219, 60),(230, 48),(238, 38),(245, 32),(259, 23),(269, 19),(279, 17),(295, 12),(304, 12),(317, 13),(320, 12),(329, 8),(345, 5),(354, 6),(365, 9),(375, 10),(377, 8),(389, 19),(391, 22),(397, 22),(406, 19),(416, 22),(424, 25),(432, 29),(443, 33),(451, 39),(458, 44),(463, 51),(485, 87),(499, 99),(507, 116),(509, 139),(511, 143),(515, 157),(517, 171),(516, 185),(517, 197),(518, 209),(513, 220),(493, 249),(491, 262),(495, 279),(488, 272),(488, 263),(486, 264),(483, 271),(481, 278),(488, 286),(493, 290),(484, 286),(479, 283),(478, 277),(478, 267),(479, 257),(476, 263),(470, 269),(471, 278),(469, 286),(477, 308),(474, 283),(474, 279),(466, 286),(463, 293),(449, 295),(453, 279),(448, 295),(451, 280),(444, 294),(449, 282),(438, 298),(447, 283),(429, 304),(450, 280),(418, 308),(446, 277),(417, 303),(449, 271),(422, 295),(410, 321),(412, 306),(426, 275),(407, 303),(417, 266),(406, 298),(409, 268),(409, 293),(406, 261),(404, 291),(396, 265),(398, 286),(389, 265),(381, 253),(382, 260),(367, 242),(355, 224),(375, 249),(365, 243),(356, 235),(347, 201),(349, 215),(359, 236),(347, 227),(341, 216),(340, 202),(347, 228),(339, 223),(334, 211),(331, 198),(330, 190),(321, 201),(317, 214),(316, 231),(320, 247),(314, 230),(311, 215),(311, 200),(313, 194),(305, 206),(300, 222),(301, 231),(301, 210),(296, 232),(296, 207),(291, 208),(290, 221),(290, 204),(282, 229),(286, 207),(282, 208),(276, 224),(280, 207),(258, 200),(282, 201),(293, 198),(301, 175),(290, 181),(286, 191),(257, 198),(246, 203),(233, 208),(229, 222),(221, 199),(223, 226),(220, 204),(213, 210),(204, 216),(195, 221),(193, 232),(219, 208),(222, 219),(223, 225),(204, 243),(204, 224),(199, 231),(200, 228),(221, 210),(219, 219),(204, 227),(204, 225),(204, 240),(205, 230),(226, 217),(223, 223),(202, 244),(199, 259),]
        self.dress = [(198, 326),(195, 334),(192, 343),(184, 352),(177, 356),(183, 467),(187, 483),(172, 468),(178, 355),(183, 343),(190, 336),(196, 334),(177, 338),(138, 370),(31, 411),(134, 374),(78, 464),(64, 469),(75, 465),(120, 487),(163, 466),(171, 468),(185, 483),(180, 507),(172, 532),(159, 472),(117, 490),(159, 476),(122, 493),(159, 492),(172, 534),(210, 580),(207, 596),(218, 574),(187, 485),(219, 572),(243, 551),(265, 541),(293, 538),(309, 534),(320, 529),(327, 517),(335, 515),(357, 539),(361, 550),(369, 555),(379, 570),(407, 580),(397, 557),(392, 534),(383, 505),(381, 481),(382, 464),(374, 458),(372, 441),(408, 479),(418, 491),(427, 503),(448, 513),(471, 537),(487, 555),(466, 532),(440, 515),(423, 495),(409, 473),(392, 461),(373, 447),(367, 413),(356, 390),(359, 373),(347, 409),(341, 432),(342, 437),(303, 509),(295, 524),(289, 530),(271, 538),(260, 544),(231, 561),(217, 573),(210, 595),(255, 586),(264, 572),(282, 554),(297, 547),(310, 541),(321, 533),(325, 517),]
        self.dress_shade = [(206, 350),(236, 419),(244, 426),(272, 432),(289, 431),(291, 454),(264, 474),(262, 486),(244, 498),(249, 514),(302, 510),(341, 440),(351, 392),(355, 411),(328, 512),(319, 527),(296, 539),(269, 541),(235, 553),(218, 571),(205, 599),(187, 584),(171, 539),(177, 539),(176, 547),(179, 543),(175, 555),(179, 547),(179, 558),(183, 546),(179, 565),(185, 550),(182, 567),(188, 550),(184, 578),(192, 555),(184, 588),(193, 554),(189, 586),(197, 557),(191, 588),(198, 561),(195, 586),(200, 566),(196, 591),(205, 569),(199, 596),(203, 571),(201, 599),(208, 576),(204, 599),(212, 584),(175, 543),(160, 473),(166, 474),(161, 476),(168, 475),(161, 473),(172, 472),(158, 477),(170, 482),(161, 484),(170, 480),(161, 479),(168, 485),(161, 487),(171, 490),(161, 490),(169, 488),(162, 487),(169, 491),(164, 494),(172, 494),(165, 494),(175, 498),(167, 498),(173, 501),(165, 501),(173, 504),(167, 506),(177, 510),(170, 511),(176, 513),(168, 513),(178, 518),(171, 518),(176, 519),(166, 519),(174, 523),(169, 523),(174, 527),(170, 527),(171, 537),(158, 470),(152, 472),(144, 552),(130, 554),(130, 485),(159, 475),(116, 491),(116, 497),(159, 479),(161, 483),(119, 500),(118, 506),(162, 489),(162, 496),(122, 510),(124, 514),(163, 499),(164, 506),(128, 519),(127, 528),(164, 511),(165, 520),(134, 537),(130, 543),(169, 525),(170, 532),(137, 546),(134, 557),(170, 538),(171, 545),(139, 561),(160, 565),(176, 554),(184, 582),(157, 543),(171, 537),(214, 578),(248, 549),(276, 536),(317, 528),(326, 520),(327, 521),(323, 522),(326, 526),(320, 526),(325, 527),(318, 527),(322, 533),(313, 533),(320, 537),(305, 537),(285, 541),(312, 534),(282, 545),(314, 537),(283, 545),(313, 539),(278, 549),(310, 542),(274, 554),(309, 544),(267, 560),(310, 544),(265, 566),(303, 550),(267, 567),(285, 563),(254, 572),(277, 568),(252, 578),(275, 573),(249, 588),(279, 574),(316, 539),(333, 514),(342, 517),(327, 524),(322, 530),(344, 522),(350, 531),(319, 536),(309, 551),(355, 536),(358, 542),(291, 559),(288, 567),(365, 550),(369, 558),(357, 563),(313, 565),(283, 573),(247, 584),]
        self.nose = [(282, 309),(279, 309),(269, 299),(275, 306),(269, 305),(262, 301),(260, 294),(262, 288),(266, 282),(275, 282),(281, 289),(288, 295),(283, 297),(278, 295),(273, 300),(278, 308),(282, 310),(289, 310),(295, 307),(299, 310),(299, 311),(295, 310),(288, 310),(281, 310),(295, 314),(298, 316),(305, 314),(311, 309),(312, 305),(311, 295),(310, 279),(313, 290),(305, 292),(295, 287),(293, 293),(286, 296),(280, 294),(272, 299),(274, 304),(269, 306),(263, 300),(260, 291),(265, 284),(269, 279),(278, 276),(287, 260),(296, 243),(290, 239),]
        self.l_eye = [(277, 239),(275, 230),(270, 224),(262, 219),(257, 217),(237, 212),(240, 213),(242, 219),(245, 225),(250, 231),(257, 233),(263, 235),(269, 235),(273, 235),(276, 240),(275, 232),(269, 224),(269, 229),(265, 231),(259, 230),(255, 226),(253, 222),(257, 219),(259, 217),(250, 215),(253, 223),]
        self.l_eye_ball = [(257, 227),(258, 225),(261, 226),(264, 225),(261, 224),(261, 222),(257, 222),(257, 223),(258, 224),(261, 225),(261, 222),(265, 221),(261, 219),(254, 220),]
        self.r_eye = [(335, 257),(343, 251),(357, 250),(366, 253),(378, 259),(381, 269),(370, 271),(360, 271),(349, 265),(341, 257),(335, 255),(335, 257),(344, 251),(351, 251),(349, 260),(359, 265),(365, 263),(366, 259),(366, 254),]
        self.r_eye_ball = [(351, 254),(354, 253),(355, 251),(360, 251),(364, 253),(364, 258),(363, 259),(358, 259),(356, 262),(358, 259),(355, 257),(354, 254),(355, 252),(357, 254),(358, 257),(360, 257),(363, 258),(363, 256),(363, 254),(361, 253),(360, 253),(357, 255),(357, 251),(344, 251),(335, 257),(345, 267),(344, 266),(347, 263),(359, 271),(370, 271),(376, 268),(379, 267),(380, 273),(374, 275),(364, 275),(360, 274),(364, 275),(361, 270),]
        self.mouth = [(238, 333),(243, 332),(249, 337),(253, 335),(258, 339),(276, 346),(285, 346),(280, 351),(267, 351),(258, 339),(276, 346),(283, 346),(299, 354),(303, 354),(302, 352),(305, 355),(303, 354),(299, 354),(290, 359),(280, 359),(272, 357),(268, 354),(261, 343),(254, 340),(242, 339),(252, 350),(265, 355),(269, 355),(266, 350),(255, 337),(249, 335),(242, 331),(241, 329),(248, 328),(261, 327),(265, 330),(270, 335),(280, 334),(288, 336),(302, 351),(298, 349),(283, 340),(274, 340),(271, 336),(268, 339),(261, 335),(244, 328),]
        self.l_ear = [(395, 333),(408, 312),(408, 326),(420, 308),(431, 301),(439, 305),(447, 296),(446, 301),(452, 297),(458, 294),(459, 282),(466, 283),(464, 288),(461, 295),(441, 320),(423, 335),(415, 338),(407, 339),(401, 339),(394, 332),(404, 340),(404, 338),(405, 343),(409, 341),(409, 334),(409, 339),(421, 335),(418, 329),(421, 334),(418, 344),(411, 345),(410, 338),(412, 345),(414, 350),(419, 350),(419, 345),(414, 345),(414, 351),(411, 352),(411, 360),(413, 362),(418, 362),(421, 360),(421, 353),(418, 351),(420, 354),(421, 360),(417, 363),(418, 366),(415, 366),(414, 362),(417, 362),(417, 371),(415, 371),(414, 366),(408, 366),(407, 368),(424, 368),(424, 366),(416, 366),(414, 416),]
        self.r_ear = [(191, 263),(185, 262),(171, 244),(169, 207),(171, 203),(169, 205),(170, 242),(175, 253),(176, 249),(180, 249),(175, 250),(174, 257),(180, 256),(181, 258),(186, 255),(181, 258),(180, 264),(180, 267),(186, 267),(188, 261),(191, 262),]
        self.eye_brow = [(295, 249),(301, 237),(299, 225),(291, 208),(280, 201),(271, 200),(254, 201),(277, 208),(284, 212),(282, 231),(286, 214),(289, 207),(289, 234),(292, 209),(295, 231),(299, 213),(299, 229),(312, 200),(310, 217),(315, 235),(320, 250),(317, 230),(320, 208),(332, 190),(332, 205),(340, 226),(339, 225),(331, 225),(326, 233),(337, 230),(344, 230),(351, 232),(359, 237),(369, 244),(377, 254),(367, 249),(349, 245),(337, 248),(320, 257),(337, 246),(331, 245),(322, 251),(333, 245),(339, 246),(348, 246),(383, 267),(383, 272),(375, 276),(365, 275),(373, 282),(379, 287),(391, 289),(398, 291),(400, 307),(378, 335),(365, 357),(354, 370),(343, 381),(335, 386),]
        self.hair = [(192, 250),(182, 218),(192, 205),(190, 188),(193, 173),(200, 163),(244, 118),(259, 94),(274, 80),(298, 68),(310, 65),(324, 55),(354, 41),(370, 38),(382, 39),(382, 39),(353, 101),(376, 42),(362, 90),(385, 44),(361, 85),(389, 43),(389, 71),(391, 99),(387, 64),(387, 38),(396, 44),(408, 90),(398, 47),(412, 63),(425, 94),(399, 45),(431, 87),(394, 44),(414, 52),(400, 49),(423, 69),(390, 43),(402, 32),(418, 38),(436, 53),(459, 80),(406, 34),(391, 38),(389, 30),(383, 29),(378, 31),(381, 38),(389, 42),(385, 33),(393, 26),(404, 20),(414, 22),(395, 31),(420, 24),(390, 35),(389, 20),(384, 9),(376, 9),(365, 8),(374, 15),(384, 25),(384, 29),(375, 30),(354, 19),(342, 14),(327, 17),(341, 16),(377, 32),(364, 30),(344, 30),(299, 52),(360, 27),(337, 19),(325, 18),(301, 27),(277, 42),(266, 48),(256, 59),(234, 89),(214, 105),(199, 113),(177, 132),(171, 152),(171, 170),(185, 199),(186, 175),(187, 149),(199, 125),(190, 157),(191, 182),(194, 145),(208, 131),(206, 129),(192, 158),(192, 170),(186, 191),(184, 147),(192, 118),(178, 132),(186, 100),(199, 85),(220, 67),(230, 52),(199, 89),(189, 106),(213, 90),(225, 72),(248, 50),(269, 48),(306, 33),(342, 32),(377, 32),(374, 54),(369, 66),(346, 118),(331, 136),(305, 158),(298, 157),(296, 145),(303, 132),(323, 104),(314, 105),(292, 122),(275, 143),(261, 163),(249, 183),(238, 196),(238, 206),(237, 222),(236, 197),(238, 185),(232, 209),(232, 219),(232, 205),(236, 187),(246, 174),(233, 185),(230, 198),(230, 212),(230, 219),(227, 214),(227, 205),(232, 193),(239, 185),(247, 177),(232, 193),(229, 201),(229, 212),(227, 219),(224, 208),(222, 200),(222, 189),(227, 180),(228, 179),(224, 189),(220, 199),(220, 190),(220, 179),(225, 170),(235, 160),(219, 174),(218, 182),(218, 195),(223, 201),(224, 209),(231, 202),(237, 188),(246, 182),(257, 172),(264, 168),(236, 188),(248, 183),(272, 179),(283, 178),(295, 170),(309, 158),(309, 158),(320, 145),(328, 138),(339, 122),(344, 117),(338, 134),(331, 143),(304, 177),(331, 151),(302, 183),(323, 160),(299, 191),(309, 180),(302, 203),(312, 183),(328, 164),(363, 131),(313, 193),(342, 158),(320, 193),(356, 148),(350, 178),(338, 196),(343, 222),(343, 202),(354, 182),(368, 161),(381, 143),(366, 174),(354, 187),(350, 199),(350, 210),(353, 223),(362, 239),(369, 247),(364, 237),(360, 229),(359, 212),(360, 198),(368, 188),(374, 177),(377, 167),(380, 151),(383, 129),(381, 160),(372, 174),(364, 189),(361, 205),(366, 220),(371, 233),(374, 242),(370, 225),(370, 212),(374, 198),(379, 187),(371, 209),(375, 228),(379, 244),(379, 227),(386, 207),(397, 188),(408, 169),(408, 156),(408, 136),(407, 123),(412, 144),(406, 159),(396, 179),(389, 194),(382, 208),(382, 227),(385, 242),(392, 250),(408, 264),(415, 282),(413, 266),(410, 257),(403, 249),(403, 228),(396, 238),(398, 251),(397, 265),(395, 281),(401, 258),(403, 237),(413, 214),(421, 195),(429, 176),(432, 159),(436, 139),(435, 114),(433, 111),(441, 129),(435, 145),(424, 164),(419, 176),(412, 195),(410, 210),(412, 225),(417, 238),(420, 247),(418, 264),(422, 277),(418, 290),(428, 273),(428, 258),(430, 240),(424, 219),(423, 206),(430, 189),(429, 206),(431, 220),(433, 247),(433, 262),(431, 278),(427, 287),(420, 303),(413, 314),(409, 322),(418, 311),(424, 302),(430, 292),(435, 285),(442, 279),(449, 268),(452, 261),(453, 272),(460, 279),(470, 283),(464, 280),(459, 272),(459, 262),(461, 253),(467, 242),(471, 234),(471, 220),(471, 208),(466, 202),(460, 197),(458, 190),(455, 183),(455, 171),(455, 157),(457, 147),(455, 137),(447, 127),(455, 140),(455, 148),(455, 168),(456, 185),(462, 168),(462, 155),(462, 141),(462, 132),(461, 119),(454, 109),(461, 137),(461, 156),(461, 169),(459, 190),(473, 153),(475, 139),(475, 125),(474, 184),(480, 201),(486, 219),(487, 232),(487, 241),(485, 250),(479, 259),(474, 263),(491, 251),(494, 240),(498, 226),(501, 213),(501, 196),(503, 184),(496, 158),(498, 178),(498, 190),(496, 208),(493, 216),(492, 221),(490, 244),(483, 254),(482, 266),(483, 276),(487, 265),]
        self.pen = tu.Turtle()
        self.pen.hideturtle()
        self.pen.speed(0)
        self.x_offset =  x_offset
        self.y_offset = y_offset



    def go(self, x, y):
        self.pen.penup()
        self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        self.pen.pendown()  


    def paint(self,coord,co=(0,0,0)):
        self.pen.color(co)
        t_x,t_y = coord[0]
        self.go(t_x,t_y)
        self.pen.fillcolor(co)
        self.pen.begin_fill()
        t = 0
        for i in coord[1:]:
            #print(i)
            x,y = i
            if t:
                self.go(x,y)
                t = 0
                self.pen.begin_fill()
                continue
            if x == -1 and y == -1:
                t = 1
                self.pen.end_fill()
                continue
            else:
                self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset) 
        self.pen.end_fill()


    def draw_fn(self,coord,mode = 1,co = (0,0,0),thickness = 1):
        co = (co[0]/255,co[1]/255,co[2]/255)

        self.pen.color(co)

        if mode:
            self.pen.width(thickness)
            t_x,t_y = coord[0]
            self.go(t_x,t_y)
            t = 0
            for i in coord[1:]:
                #print(i)
                x,y = i
                if t:
                    self.go(x,y)
                    t = 0
                    continue
                if x == -1 and y == -1:
                    t = 1
                    continue
                else:
                    self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        else:
            self.paint(coord=coord,co = co)

    
    def draw(self,retain=True):
        self.draw_fn(self.face_cut)
        self.draw_fn(self.hair_out)
        self.draw_fn(self.dress)
        self.draw_fn(self.dress_shade)
        self.draw_fn(self.nose)
        self.draw_fn(self.l_eye)
        self.draw_fn(self.l_eye_ball)
        self.draw_fn(self.r_eye)
        self.draw_fn(self.r_eye_ball)
        self.draw_fn(self.mouth)
        self.draw_fn(self.l_ear)
        self.draw_fn(self.r_ear)
        self.draw_fn(self.eye_brow)
        self.draw_fn(self.hair)
        if retain:
            self.tu.done()






class gojo:
    def __init__(self,x_offset = 300, y_offset = 300):
        '''x_offset and y_offset represents the position of the image being drawn, by default it is 300 you can change it any coordinates you want'''
        import turtle as tu
        self.tu = tu
        self.mask = [(137, 213),(146, 213),(160, 216),(187, 219),(219, 222),(267, 225),(292, 225),(332, 225),(366, 225),(401, 225),(424, 216),(430, 214),(428, 225),(424, 244),(412, 261),(420, 252),(421, 266),(404, 284),(420, 271),(418, 277),(413, 285),(404, 295),(389, 308),(369, 321),(333, 333),(314, 323),(305, 316),(292, 311),(257, 333),(246, 333),(166, 297),(147, 274),(148, 255),(170, 272),(146, 253),(144, 236),(142, 226),(137, 212),]
        self.hair = [(135, 213),(111, 213),(94, 217),(83, 224),(93, 216),(122, 204),(110, 200),(91, 199),(79, 197),(60, 202),(60, 200),(73, 192),(101, 180),(89, 172),(75, 162),(52, 142),(59, 143),(88, 151),(108, 153),(85, 153),(60, 124),(70, 131),(98, 147),(108, 150),(97, 144),(80, 127),(55, 96),(67, 101),(74, 104),(102, 109),(117, 109),(126, 104),(118, 107),(99, 108),(85, 97),(76, 83),(90, 92),(104, 98),(119, 100),(108, 97),(92, 91),(153, 79),(156, 74),(153, 79),(139, 81),(113, 61),(99, 45),(96, 39),(114, 54),(129, 60),(145, 65),(129, 47),(121, 34),(114, 17),(109, 2),(117, 8),(132, 20),(152, 29),(162, 33),(179, 35),(186, 36),(174, 28),(163, 20),(158, 10),(154, 3),(162, 4),(168, 9),(183, 16),(196, 22),(209, 25),(222, 28),(229, 28),(224, 18),(217, 12),(211, 4),(218, 4),(223, 10),(233, 14),(242, 20),(249, 31),(251, 33),(242, 22),(239, 13),(236, 4),(234, 1),(246, 3),(261, 12),(269, 21),(274, 28),(260, 12),(254, 0),(262, 3),(288, 11),(304, 17),(320, 24),(329, 33),(311, 15),(304, 2),(314, 2),(328, 9),(335, 21),(348, 29),(355, 40),(369, 52),(363, 28),(357, 1),(380, 21),(391, 42),(402, 69),(404, 87),(401, 71),(418, 10),(417, 1),(423, 18),(435, 61),(438, 82),(435, 107),(429, 124),(433, 108),(454, 84),(464, 59),(465, 69),(461, 90),(457, 107),(449, 126),(439, 143),(435, 148),(460, 132),(487, 116),(493, 109),(484, 128),(474, 141),(469, 147),(450, 162),(476, 136),(458, 163),(448, 173),(492, 146),(489, 156),(476, 167),(457, 183),(474, 191),(497, 210),(488, 205),(475, 204),(441, 204),(441, 207),(464, 214),(483, 228),(458, 219),(431, 215),(422, 215),(324, 225),(273, 226),(193, 220),(138, 212),]
        self.dress = [(198, 400),(199, 432),(214, 433),(210, 423),(214, 432),(235, 434),(295, 444),(301, 440),(379, 453),(388, 458),(430, 464),(499, 447),(442, 423),(381, 415),(375, 453),(302, 439),(298, 444),(289, 561),(113, 539),(94, 443),(86, 428),(90, 421),(101, 427),(112, 435),(181, 441),(243, 451),(273, 457),(288, 460),(296, 471),(296, 479),(293, 525),(270, 525),(244, 532),(204, 518),(188, 511),(155, 512),(157, 515),(191, 530),(229, 537),(278, 550),(292, 556),(291, 560),(292, 555),(350, 556),(371, 498),(306, 475),(299, 488),(290, 561),(373, 559),(387, 471),(381, 504),(395, 491),(448, 503),(460, 497),(445, 528),(415, 554),(372, 560),(461, 560),(478, 537),(476, 514),(463, 527),(477, 510),(504, 449),(380, 413),(378, 454),(305, 439),(296, 444),(198, 433),(198, 400),(136, 416),(109, 421),(86, 420),(87, 426),(95, 424),]
        self.face = [(145, 275),(143, 273),(136, 279),(135, 308),(139, 323),(146, 333),(154, 342),(170, 360),(181, 363),(170, 311),(164, 311),(146, 285),(140, 283),(143, 284),(142, 301),(150, 294),(157, 304),(153, 305),(153, 323),(154, 331),(175, 350),(175, 339),(168, 334),(170, 320),(165, 321),(170, 319),(186, 384),(194, 395),(234, 435),(298, 444),(305, 438),(339, 446),(396, 365),(408, 304),(410, 304),(412, 313),(410, 305),(429, 277),(427, 295),(420, 289),(413, 299),(418, 299),(419, 315),(407, 338),(398, 340),(397, 357),(406, 355),(413, 340),(432, 316),(434, 274),(429, 267),(417, 274),(414, 284),(410, 291),]
        self.face_shades = [(196, 220),(295, 232),(304, 242),(295, 262),(294, 284),(296, 284),(336, 238),(407, 231),(406, 248),(390, 264),(411, 257),(391, 281),(406, 274),(403, 279),(379, 304),(390, 300),(380, 311),(332, 336),(302, 315),(297, 295),(295, 290),(291, 294),(291, 309),(255, 331),(249, 314),(279, 296),(265, 301),(275, 285),(278, 277),(275, 265),(260, 252),(267, 257),(265, 258),(253, 259),(227, 250),(231, 247),(242, 249),(222, 241),(196, 233),(189, 230),(194, 219),(291, 225),(424, 215),(436, 212),(356, 222),(293, 226),(195, 222),(146, 212),(142, 214),(151, 247),(171, 270),(171, 272),(159, 263),(158, 277),(169, 287),(162, 282),(161, 290),(253, 334),(294, 310),(291, 351),(295, 368),(306, 367),(298, 367),(304, 369),(297, 369),(306, 371),(294, 387),(275, 368),(281, 368),(288, 369),(281, 369),(288, 369),(277, 370),(262, 358),(258, 343),(247, 345),(232, 378),(261, 439),]
        self.mouth = [(322, 262),(336, 249),(348, 248),(393, 253),(384, 256),(347, 257),(328, 266),(320, 265),(325, 268),(336, 261),(339, 265),(322, 274),(326, 276),(342, 271),(373, 268),(373, 264),(342, 264),(327, 272),(322, 282),(313, 291),(331, 316),(367, 303),(346, 304),(339, 302),(329, 294),(322, 288),(322, 282),(323, 292),(345, 304),(370, 304),(379, 303),(387, 301),(382, 310),(331, 336),(307, 315),(290, 311),(295, 368),(300, 368),(306, 368),(299, 368),(306, 368),(293, 385),(295, 400),(280, 400),(317, 400),(316, 400),(278, 402),(318, 402),(279, 401),(319, 402),(326, 399),(336, 398),(328, 401),(335, 398),(326, 399),(338, 399),(291, 401),(278, 399),(263, 398),(253, 397),(265, 400),(255, 396),(267, 399),(258, 397),(268, 400),(254, 397),(268, 401),(296, 399),(296, 411),(281, 411),(310, 410),(285, 409),(306, 408),(307, 411),(282, 410),(310, 408),(284, 410),(307, 410),(284, 410),(308, 410),]
        self.dress_extra = [(385, 385),(379, 454),(307, 439),(298, 446),(245, 437),(198, 434),(128, 428),(116, 428),(99, 424),(89, 420),(89, 426),(91, 421),(101, 424),(148, 414),(198, 405),(198, 397),(188, 391),(180, 359),(172, 362),(139, 323),(136, 278),(143, 275),(169, 299),(254, 332),(248, 314),(247, 301),(237, 302),(243, 297),(254, 288),(260, 287),(258, 293),(246, 302),(257, 292),(258, 288),(258, 273),(244, 260),(214, 260),(214, 262),(237, 264),(240, 269),(253, 276),(260, 272),(246, 261),(246, 258),(225, 247),(242, 247),(257, 252),(266, 259),(261, 259),(246, 259),]
        self.hair_shade = [(196, 222),(189, 209),(164, 196),(179, 204),(195, 221),(209, 223),(197, 198),(155, 174),(180, 186),(206, 219),(275, 227),(254, 191),(212, 163),(262, 200),(272, 223),(278, 213),(259, 166),(281, 210),(286, 223),(323, 222),(328, 215),(313, 162),(305, 206),(307, 181),(270, 95),(290, 116),(263, 49),(316, 95),(300, 61),(283, 38),(312, 60),(326, 75),(313, 41),(290, 10),(318, 24),(332, 31),(308, 3),(359, 38),(377, 66),(356, 1),(407, 90),(403, 69),(417, 2),(437, 58),(430, 125),(416, 149),(398, 167),(377, 202),(372, 200),(361, 219),(375, 192),(384, 153),(371, 195),(360, 219),(341, 224),(357, 157),(349, 195),(339, 220),(352, 184),(358, 150),(350, 99),(360, 128),(359, 147),(372, 151),(370, 96),(351, 48),(369, 95),(372, 148),(381, 152),(374, 126),(378, 147),(387, 138),(379, 149),]
        self.r_glass = [(272, 249),(262, 252),(258, 259),(256, 264),(254, 272),(254, 280),(256, 289),(260, 298),(263, 301),(271, 307),(276, 309),(283, 311),(289, 312),(296, 313),(301, 311),(308, 306),(313, 299),(319, 289),(321, 282),(323, 274),(322, 270),(319, 266),(310, 260),(299, 255),(292, 252),(278, 249),(273, 249),(267, 250),(263, 251),(260, 254)]
        self.pen = tu.Turtle()
        self.pen.speed(0)
        self.x_offset = x_offset
        self.y_offset = y_offset


    def go(self, x, y):
        self.pen.penup()
        self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        self.pen.pendown()  


    def paint(self,coord,co=(0,0,0)):
        self.pen.color(co)
        t_x,t_y = coord[0]
        self.go(t_x,t_y)
        self.pen.fillcolor(co)
        self.pen.begin_fill()
        t = 0
        for i in coord[1:]:
            #print(i)
            x,y = i
            if t:
                self.go(x,y)
                t = 0
                self.pen.begin_fill()
                continue
            if x == -1 and y == -1:
                t = 1
                self.pen.end_fill()
                continue
            else:
                self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset) 
        self.pen.end_fill()


    def draw_fn(self,coord,mode = 1,co = (0,0,0),thickness = 1):
        co = (co[0]/255,co[1]/255,co[2]/255)

        self.pen.color(co)

        if mode:
            self.pen.width(thickness)
            t_x,t_y = coord[0]
            self.go(t_x,t_y)
            t = 0
            for i in coord[1:]:
                #print(i)
                x,y = i
                if t:
                    self.go(x,y)
                    t = 0
                    continue
                if x == -1 and y == -1:
                    t = 1
                    continue
                else:
                    self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        else:
            self.paint(coord=coord,co = co)

    
    def draw(self,retain=True):
        self.draw_fn(self.mask)
        self.draw_fn(self.hair)
        self.draw_fn(self.face)
        self.draw_fn(self.dress)
        self.draw_fn(self.face_shades)
        self.draw_fn(self.mouth)
        self.draw_fn(self.dress_extra)
        self.draw_fn(self.hair_shade)
        if retain:
            self.tu.done()






class flag:
    def __init__(self, x_offset = 300, y_offset = 365):
        '''x_offset and y_offset represents the position of the image being drawn, by default it is 300 you can change it any coordinates you want'''
        import turtle as tu
        self.tu = tu
        self.uind = [(157, 473),(157, 469),(155, 464),(156, 461),(154, 457),(151, 452),(153, 449),(149, 445),(149, 440),(148, 434),(148, 428),(148, 424),(146, 420),(148, 416),(148, 410),(151, 406),(147, 395),(147, 391),(149, 389),(149, 385),(146, 383),(149, 379),(146, 378),(146, 375),(144, 378),(143, 383),(144, 388),(140, 394),(134, 398),(129, 399),(126, 402),(118, 402),(115, 404),(107, 399),(96, 388),(90, 381),(86, 376),(82, 372),(80, 366),(83, 363),(86, 363),(89, 366),(97, 365),(104, 362),(108, 359),(108, 356),(100, 358),(91, 361),(82, 356),(77, 352),(71, 343),(66, 341),(69, 339),(69, 332),(78, 333),(78, 327),(82, 325),(93, 329),(96, 327),(100, 332),(104, 332),(105, 329),(109, 328),(116, 326),(118, 330),(122, 326),(122, 321),(116, 309),(117, 305),(112, 305),(106, 295),(108, 286),(99, 282),(96, 276),(99, 270),(106, 266),(111, 259),(122, 255),(123, 263),(128, 260),(141, 259),(143, 255),(148, 252),(148, 247),(153, 241),(159, 241),(169, 228),(168, 224),(173, 219),(180, 216),(180, 210),(186, 205),(189, 198),(191, 190),(190, 185),(199, 178),(205, 178),(204, 173),(194, 170),(194, 165),(188, 165),(185, 162),(175, 158),(177, 150),(174, 141),(177, 136),(174, 132),(174, 127),(188, 118),(183, 117),(179, 113),(178, 109),(176, 111),(170, 103),(162, 103),(160, 95),(167, 92),(168, 87),(171, 84),(182, 84),(191, 80),(198, 78),(208, 79),(218, 90),(227, 95),(231, 98),(234, 104),(241, 106),(244, 111),(253, 109),(257, 105),(265, 101),(271, 103),(275, 99),(283, 104),(291, 110),(291, 116),(287, 121),(287, 127),(282, 127),(282, 131),(278, 131),(274, 141),(268, 139),(266, 142),(269, 144),(266, 153),(274, 156),(274, 161),(278, 169),(269, 172),(270, 176),(266, 176),(262, 169),(260, 175),(264, 182),(265, 189),(266, 196),(270, 191),(273, 195),(274, 199),(286, 203),(289, 210),(296, 211),(300, 217),(298, 222),(291, 230),(304, 251),(309, 257),(322, 262),(335, 266),(343, 270),(355, 267),(365, 270),(371, 278),(379, 281),(390, 282),(401, 285),(422, 287),(422, 277),(419, 271),(424, 261),(422, 255),(428, 255),(432, 251),(435, 257),(433, 263),(437, 267),(435, 270),(442, 276),(446, 273),(451, 278),(460, 273),(471, 274),(489, 270),(487, 262),(479, 260),(478, 253),(484, 255),(494, 252),(497, 250),(496, 246),(501, 241),(505, 242),(505, 235),(516, 233),(521, 228),(528, 220),(541, 223),(550, 214),(556, 218),(554, 224),(558, 222),(561, 228),(556, 235),(574, 237),(574, 241),(567, 251),(573, 260),(568, 260),(565, 256),(557, 259),(546, 273),(540, 275),(542, 285),(539, 295),(534, 301),(537, 303),(537, 311),(535, 316),(532, 328),(524, 329),(519, 329),(519, 348),(513, 351),(516, 367),(514, 374),(509, 372),(506, 375),(504, 372),(502, 360),(500, 352),(500, 346),(498, 343),(495, 337),(489, 353),(479, 350),(480, 343),(476, 336),(478, 329),(487, 324),(491, 320),(495, 315),(494, 309),(486, 310),(465, 310),(454, 310),(452, 306),(454, 300),(452, 298),(452, 292),(448, 295),(439, 290),(437, 293),(435, 294),(430, 289),(426, 297),(432, 301),(436, 301),(440, 304),(441, 310),(433, 313),(431, 318),(427, 319),(430, 326),(438, 326),(437, 336),(435, 338),(439, 342),(440, 347),(444, 350),(443, 362),(447, 370),(444, 377),(440, 361),(433, 346),(427, 336),(419, 325),(409, 315),(399, 307),(386, 300),(374, 294),(362, 290),(345, 287),(325, 287),(307, 291),(293, 295),(281, 302),(267, 311),(257, 320),(245, 333),(237, 347),(232, 360),(229, 367),(227, 378),(226, 389),(225, 404),(227, 416),(229, 426),(233, 437),(240, 449),(247, 462),(251, 468),(211, 471),(194, 473),(180, 474),(168, 475),(158, 475),(156, 473),]
        self.lind = [(206, 590),(207, 596),(213, 605),(208, 602),(213, 615),(213, 622),(216, 628),(223, 634),(227, 635),(229, 639),(238, 643),(243, 639),(251, 636),(252, 627),(254, 623),(271, 620),(267, 614),(274, 604),(272, 602),(275, 599),(249, 595),(221, 592),(206, 590),]
        self.frup = [(291, 230),(301, 224),(317, 212),(328, 198),(333, 186),(333, 180),(332, 175),(328, 170),(346, 180),(353, 187),(356, 196),(354, 202),(351, 210),(343, 219),(338, 224),(325, 236),(305, 250),(300, 250),(296, 248),(294, 245),(292, 247),(286, 245),(288, 241),(290, 238),(290, 231),(301, 224),]
        self.frdo = [(151, 406),(137, 416),(133, 424),(131, 432),(128, 447),(128, 453),(130, 461),(135, 468),(148, 473),(159, 475),(168, 475),(181, 475),(196, 473),(214, 471),(233, 469),(243, 469),(259, 468),(272, 468),(283, 469),(293, 469),(309, 473),(320, 475),(333, 481),(346, 488),(355, 497),(365, 507),(371, 518),(381, 543),(384, 553),(386, 563),(388, 579),(389, 598),(387, 609),(384, 619),(377, 632),(372, 640),(372, 623),(369, 597),(361, 569),(351, 549),(340, 535),(320, 519),(298, 510),(267, 504),(246, 503),(220, 505),(209, 506),(183, 507),(165, 507),(151, 506),(134, 504),(126, 501),(111, 496),(102, 487),(97, 471),(105, 451),(115, 438),(125, 427),(137, 416),]
        self.grdo = [(133, 544),(162, 555),(204, 562),(249, 564),(282, 566),(313, 578),(331, 595),(343, 620),(346, 636),(346, 659),(339, 664),(333, 666),(315, 669),(296, 666),(307, 659),(314, 649),(314, 637),(306, 620),(297, 611),(286, 604),(270, 599),(255, 595),(236, 593),(218, 592),(206, 591),(187, 589),(177, 587),(162, 584),(151, 580),(142, 576),(134, 568),(133, 557),(134, 545),(-1, -1),(337, 269),(352, 256),(369, 237),(380, 218),(396, 240),(394, 247),(388, 257),(379, 267),(369, 276),(364, 269),(360, 269),(356, 267),(350, 269),(346, 269),(343, 270),(338, 270),]
        self.rshade = [(321, 167),(320, 208),(327, 200),(332, 190),(331, 177),(329, 171),(322, 168),(-1, -1),(152, 406),(142, 411),(137, 417),(131, 434),(128, 446),(130, 460),(137, 469),(146, 472),(156, 474),(157, 469),(156, 465),(156, 460),(155, 456),(151, 451),(149, 446),(150, 440),(148, 434),(149, 430),(149, 426),(146, 420),(148, 416),(149, 410),(152, 407),]
        self.b_spokes = [(260, 468),(259, 466),(263, 456),(258, 451),(249, 453),(243, 443),(251, 438),(245, 427),(237, 429),(234, 417),(243, 414),(244, 405),(232, 401),(232, 390),(240, 390),(245, 383),(239, 375),(235, 374),(239, 362),(246, 364),(252, 359),(251, 352),(244, 348),(250, 339),(255, 343),(262, 340),(264, 333),(259, 327),(266, 320),(271, 324),(280, 323),(282, 315),(279, 310),(288, 304),(291, 309),(300, 311),(305, 305),(303, 299),(313, 295),(316, 301),(322, 305),(329, 300),(329, 294),(341, 293),(341, 299),(346, 305),(355, 301),(356, 296),(366, 298),(365, 303),(369, 310),(378, 309),(382, 303),(390, 308),(388, 314),(390, 322),(399, 322),(404, 318),(411, 325),(407, 331),(408, 338),(416, 341),(421, 338),(428, 349),(422, 353),(422, 360),(428, 365),(435, 364),(438, 374),(429, 377),(426, 384),(413, 387),(414, 395),(414, 401),(408, 411),(401, 417),(390, 422),(380, 428),(372, 438),(367, 447),(357, 451),(350, 461),(342, 466),(335, 471),(334, 480),(319, 474),(305, 472),(295, 469),(280, 468),(260, 468),]
        self.spokes = [(315, 473),(319, 446),(329, 414),(316, 444),(298, 469),(294, 469),(307, 440),(324, 412),(303, 438),(269, 465),(294, 434),(322, 408),(293, 428),(253, 446),(286, 421),(319, 404),(285, 416),(243, 421),(283, 407),(317, 400),(283, 402),(240, 395),(282, 393),(317, 394),(284, 386),(244, 367),(288, 378),(319, 390),(288, 375),(254, 347),(294, 367),(321, 386),(296, 364),(269, 327),(303, 356),(325, 382),(306, 352),(291, 312),(315, 347),(329, 380),(318, 347),(313, 305),(327, 345),(335, 378),(332, 345),(338, 301),(342, 344),(340, 379),(346, 345),(363, 304),(356, 347),(344, 380),(360, 351),(386, 316),(369, 354),(348, 383),(370, 356),(405, 331),(378, 364),(351, 386),(379, 367),(420, 350),(385, 375),(354, 390),(385, 379),(429, 372),(387, 389),(356, 395),(388, 392),(413, 395),(413, 400),(389, 401),(356, 400),(388, 405),(407, 412),(401, 417),(386, 414),(355, 404),(384, 419),(389, 423),(380, 428),(352, 408),(377, 430),(372, 437),(348, 411),(369, 441),(363, 449),(344, 415),(355, 446),(357, 452),(352, 461),(346, 449),(338, 416),(342, 449),(340, 466),(334, 480),(333, 471),(333, 449),(334, 416),(328, 449),(319, 474),(315, 474),]
        self.pen = tu.Turtle()
        self.pen.hideturtle()
        self.pen.speed(0)
        self.x_offset = x_offset
        self.y_offset = y_offset


    def go(self, x, y):
        self.pen.penup()
        self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        self.pen.pendown()  


    def paint(self,coord,co=(0,0,0)):
        self.pen.color(co)
        t_x,t_y = coord[0]
        self.go(t_x,t_y)
        self.pen.fillcolor(co)
        self.pen.begin_fill()
        t = 0
        for i in coord[1:]:
            #print(i)
            x,y = i
            if t:
                self.go(x,y)
                t = 0
                self.pen.begin_fill()
                continue
            if x == -1 and y == -1:
                t = 1
                self.pen.end_fill()
                continue
            else:
                self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset) 
        self.pen.end_fill()


    def draw_fn(self,coord,mode = 1,co = (0,0,0),thickness = 1):
        co = (co[0]/255,co[1]/255,co[2]/255)

        self.pen.color(co)

        if mode:
            self.pen.width(thickness)
            t_x,t_y = coord[0]
            self.go(t_x,t_y)
            t = 0
            for i in coord[1:]:
                #print(i)
                x,y = i
                if t:
                    self.go(x,y)
                    t = 0
                    continue
                if x == -1 and y == -1:
                    t = 1
                    continue
                else:
                    self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        else:
            self.paint(coord=coord,co = co)

    
    def draw(self,retain=True):
        self.draw_fn(self.uind,co = (0,0,255),mode = 0)
        self.draw_fn(self.lind,co = (0,0,255),mode = 0)
        self.draw_fn(self.frup,co = (255, 167, 31),mode = 0)
        self.draw_fn(self.frdo,co = (255, 167, 31),mode = 0)
        self.draw_fn(self.grdo,co = (1, 174, 59),mode = 0)
        self.draw_fn(self.rshade,co = (220, 79, 10),mode = 0)
        self.draw_fn(self.b_spokes,co = (0,0,255),mode = 0)
        self.draw_fn(self.spokes,co = (255,255,255),mode = 0)
        if retain:
            self.tu.done()







class rdj:
    def __init__(self, x_offset = 300, y_offset = 300):
        '''x_offset and y_offset represents the position of the image being drawn, by default it is 300 you can change it any coordinates you want'''
        import turtle as tu
        self.mouth = [(374, 382),(368, 382),(359, 382),(347, 379),(339, 381),(334, 384),(323, 380),(315, 380),(293, 385),(321, 387),(339, 387),(345, 386),(357, 385),(374, 383),(-1, -1),(389, 389),(393, 387),(395, 381),(395, 373),(377, 362),(366, 357),(358, 360),(351, 357),(345, 354),(344, 357),(337, 355),(333, 357),(327, 355),(323, 357),(303, 362),(293, 365),(286, 367),(282, 374),(277, 376),(279, 394),(286, 390),(293, 380),(297, 378),(302, 378),(304, 375),(307, 378),(310, 374),(313, 377),(315, 373),(319, 375),(322, 374),(325, 376),(329, 375),(336, 375),(342, 374),(350, 374),(353, 376),(357, 374),(369, 374),(372, 377),(374, 374),(377, 378),(383, 379),(389, 389),]
        self.nose = [(342, 305),(342, 313),(344, 321),(344, 328),(343, 335),(338, 342),(331, 344),(322, 343),(313, 340),(310, 339),(307, 339),(303, 333),(301, 338),(305, 343),(313, 344),(323, 349),(332, 353),(343, 345),(346, 342),(354, 342),(359, 338),(360, 329),(355, 322),(348, 320),(348, 323),(354, 325),(356, 331),(353, 336),(348, 335),(350, 330),(348, 323),(343, 305),]
        self.dress = [(56, 513),(222, 433),(247, 393),(249, 408),(254, 425),(265, 456),(265, 456),(273, 478),(280, 495),(283, 509),(294, 539),(302, 527),(314, 515),(328, 503),(347, 491),(350, 493),(340, 499),(349, 507),(359, 517),(380, 498),(397, 505),(412, 516),(425, 526),(432, 533),(435, 539),(399, 523),(399, 530),(395, 538),(353, 539),(347, 530),(320, 519),(300, 539),(293, 539),(-1, -1),(363, 507),(391, 478),(401, 458),(422, 408),(423, 398),(420, 407),(400, 440),(386, 460),(377, 471),(371, 475),(366, 480),(357, 482),(348, 478),(339, 470),(330, 462),(316, 453),(301, 444),(276, 420),(248, 391),(253, 399),(267, 419),(278, 430),(288, 441),(295, 445),(303, 453),(326, 475),(338, 484),(347, 492),(353, 498),(363, 508),(371, 500),(-1, -1),(427, 401),(437, 486),(441, 526),(443, 539),(624, 539),(625, 477),(528, 449),(477, 428),(447, 412),(428, 401),]
        self.face = [(328, 461),(316, 457),(305, 453),(297, 446),(286, 436),(284, 434),(280, 431),(277, 431),(279, 428),(275, 428),(272, 423),(262, 411),(250, 395),(244, 387),(241, 382),(238, 377),(235, 372),(236, 367),(234, 363),(234, 358),(231, 354),(231, 349),(230, 346),(231, 343),(228, 339),(229, 336),(226, 330),(227, 324),(223, 320),(224, 317),(221, 311),(216, 310),(212, 306),(213, 302),(216, 308),(220, 306),(220, 297),(217, 294),(219, 284),(216, 279),(216, 272),(211, 266),(208, 272),(206, 266),(207, 256),(205, 249),(204, 243),(204, 237),(208, 233),(208, 229),(206, 229),(206, 222),(202, 215),(202, 210),(197, 204),(198, 197),(193, 193),(192, 173),(190, 170),(191, 166),(190, 162),(191, 159),(188, 154),(186, 148),(188, 142),(188, 135),(188, 127),(191, 122),(186, 121),(177, 112),(185, 115),(179, 105),(188, 114),(182, 98),(191, 109),(194, 104),(200, 101),(194, 99),(203, 94),(206, 85),(211, 82),(218, 80),(213, 78),(208, 79),(212, 76),(218, 76),(216, 69),(218, 64),(219, 70),(221, 75),(223, 68),(230, 64),(231, 58),(234, 56),(235, 52),(236, 47),(240, 42),(242, 35),(252, 32),(270, 28),(283, 28),(290, 28),(297, 29),(304, 33),(318, 29),(332, 28),(346, 27),(356, 27),(366, 29),(379, 36),(363, 24),(375, 26),(389, 36),(397, 40),(405, 45),(411, 54),(422, 61),(429, 70),(433, 83),(435, 91),(436, 79),(436, 99),(436, 106),(441, 99),(435, 113),(450, 108),(469, 111),(477, 108),(473, 114),(467, 126),(477, 120),(479, 124),(471, 132),(473, 136),(472, 145),(483, 148),(479, 151),(480, 161),(483, 168),(480, 173),(480, 178),(476, 184),(474, 190),(472, 196),(465, 197),(462, 204),(462, 211),(461, 217),(459, 224),(463, 231),(456, 229),(452, 237),(449, 245),(448, 254),(448, 262),(450, 257),(452, 251),(454, 244),(458, 239),(462, 243),(462, 251),(458, 246),(456, 251),(454, 255),(458, 257),(452, 266),(454, 273),(455, 282),(452, 288),(453, 296),(458, 286),(457, 295),(453, 303),(449, 304),(448, 297),(450, 290),(453, 280),(448, 273),(448, 280),(446, 288),(445, 300),(444, 308),(448, 315),(454, 311),(454, 317),(449, 319),(443, 316),(442, 327),(439, 339),(437, 350),(433, 362),(430, 370),(430, 378),(426, 385),(420, 393),(416, 399),(411, 404),(408, 409),(403, 414),(399, 419),(394, 427),(386, 435),(381, 441),(376, 444),(371, 448),(367, 451),(359, 456),(352, 458),(348, 461),(341, 461),(336, 463),(330, 459),(328, 462),(316, 457),]
        self.iface = [(311, 400),(324, 402),(338, 402),(347, 402),(356, 399),(363, 397),(359, 402),(356, 408),(353, 414),(348, 419),(349, 426),(359, 426),(362, 430),(367, 433),(374, 434),(376, 436),(379, 432),(383, 433),(385, 427),(393, 419),(394, 416),(398, 413),(400, 408),(401, 394),(408, 402),(415, 394),(421, 385),(424, 380),(424, 373),(427, 367),(432, 353),(434, 345),(436, 339),(434, 330),(438, 322),(438, 312),(437, 310),(440, 309),(441, 293),(443, 288),(441, 284),(444, 275),(440, 265),(442, 233),(439, 227),(439, 221),(434, 211),(425, 203),(432, 203),(421, 192),(430, 196),(421, 187),(430, 187),(419, 178),(432, 180),(420, 172),(428, 174),(422, 165),(415, 159),(413, 147),(408, 140),(403, 140),(402, 138),(395, 139),(394, 136),(388, 138),(386, 136),(379, 138),(377, 133),(372, 134),(369, 131),(364, 134),(360, 133),(355, 135),(353, 131),(348, 132),(347, 127),(346, 131),(343, 127),(336, 131),(331, 128),(327, 130),(323, 126),(319, 129),(313, 125),(309, 131),(306, 126),(303, 131),(297, 126),(296, 131),(289, 127),(287, 130),(282, 126),(280, 132),(274, 128),(274, 135),(268, 131),(264, 135),(256, 134),(256, 139),(251, 138),(252, 142),(246, 142),(247, 146),(244, 149),(245, 154),(239, 154),(243, 160),(236, 163),(242, 164),(233, 169),(238, 170),(231, 177),(237, 176),(227, 184),(237, 180),(229, 190),(237, 189),(229, 198),(237, 195),(232, 202),(239, 205),(229, 212),(238, 210),(232, 215),(238, 215),(233, 220),(227, 227),(224, 237),(224, 246),(226, 253),(226, 259),(227, 267),(227, 277),(224, 291),(223, 304),(225, 311),(228, 319),(231, 330),(234, 340),(235, 349),(237, 361),(241, 372),(248, 385),(252, 391),(258, 397),(264, 402),(268, 396),(272, 398),(272, 406),(279, 414),(278, 419),(284, 426),(292, 431),(292, 435),(296, 438),(299, 438),(301, 442),(308, 439),(313, 435),(317, 435),(319, 430),(321, 428),(325, 426),(327, 426),(332, 424),(331, 416),(326, 416),(318, 408),(318, 404),(311, 400),(324, 402),]
        self.ebrow = [(339, 243),(339, 248),(343, 254),(350, 256),(358, 251),(367, 248),(382, 247),(397, 249),(407, 252),(418, 258),(419, 253),(414, 245),(399, 235),(391, 235),(381, 237),(372, 238),(361, 243),(353, 245),(343, 255),(-1, -1),(321, 246),(320, 258),(314, 257),(305, 254),(263, 253),(245, 259),(243, 257),(246, 250),(253, 245),(260, 242),(269, 241),(276, 241),(282, 243),(291, 245),(305, 245),(311, 249),(319, 252),(322, 246),]
        self.lines = [(345, 313),(344, 308),(343, 297),(343, 282),(-1, -1),(367, 340),(384, 357),(-1, -1),(295, 337),(280, 359),(-1, -1),(385, 278),(394, 278),(400, 273),(408, 264),(400, 261),(389, 257),(377, 258),(371, 260),(358, 269),(362, 272),(-1, -1),(395, 257),(371, 254),(353, 263),(-1, -1),(303, 274),(309, 273),(297, 263),(290, 262),(272, 262),(261, 270),(256, 271),(262, 271),(269, 277),(283, 281),(-1, -1),(255, 267),(271, 260),(282, 259),(291, 259),(300, 260),(311, 264),]
        self.eyes = [(375, 260),(375, 266),(378, 271),(384, 273),(389, 270),(391, 267),(392, 264),(391, 260),(388, 258),(384, 257),(379, 257),(375, 261),(-1,-1),(291, 263),(292, 269),(289, 273),(286, 276),(281, 276),(276, 273),(274, 269),(274, 265),(276, 263),(281, 262),(287, 262),(291, 263),]
        self.eball = [(281, 266),(279, 267),(277, 266),(277, 264),(279, 263),(281, 264),(281, 266),(-1, -1),(379, 259),(382, 260),(382, 263),(380, 264),(378, 263),(377, 261),(379, 259),]
        self.turt = tu
        self.pen = tu.Turtle()
        self.pen.hideturtle()
        self.pen.speed(0)
        self.x_offset = x_offset
        self.y_offset = y_offset


    def go(self, x, y):
        self.pen.penup()
        self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        self.pen.pendown()  


    def paint(self,coord,co=(0,0,0)):
        self.pen.color(co)
        t_x,t_y = coord[0]
        self.go(t_x,t_y)
        self.pen.fillcolor(co)
        self.pen.begin_fill()
        t = 0
        for i in coord[1:]:
            #print(i)
            x,y = i
            if t:
                self.go(x,y)
                t = 0
                self.pen.begin_fill()
                continue
            if x == -1 and y == -1:
                t = 1
                self.pen.end_fill()
                continue
            else:
                self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset) 
        self.pen.end_fill()


    def draw_fn(self,coord,mode = 1,co = (0,0,0),thickness = 1):
        co = (co[0]/255,co[1]/255,co[2]/255)

        self.pen.color(co)

        if mode:
            self.pen.width(thickness)
            t_x,t_y = coord[0]
            self.go(t_x,t_y)
            t = 0
            for i in coord[1:]:
                #print(i)
                x,y = i
                if t:
                    self.go(x,y)
                    t = 0
                    continue
                if x == -1 and y == -1:
                    t = 1
                    continue
                else:
                    self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        else:
            self.paint(coord=coord,co = co)

    
    def draw(self,retain=True):
        self.draw_fn(self.dress,mode = 0)
        self.draw_fn(self.face,mode = 0)
        self.draw_fn(self.iface,co = (255,255,255),mode = 0)
        self.draw_fn(self.mouth,mode = 0)
        self.draw_fn(self.nose,mode = 0)
        self.draw_fn(self.ebrow,mode = 0)
        self.draw_fn(self.lines,mode = 1,thickness=2)
        self.draw_fn(self.eyes,mode = 0)
        self.draw_fn(self.eball,mode = 0,co = (255,255,255))
        if retain:
            self.turt.done()






class vijay:
    def __init__(self, x_offset = 270, y_offset = 300):
        '''x_offset and y_offset represents the position of the image being drawn, by default it is 300 you can change it any coordinates you want'''
        import turtle as tu
        self.dress = [(149, 348),(152, 344),(151, 333),(144, 335),(137, 337),(103, 372),(101, 378),(67, 389),(59, 389),(53, 391),(8, 404),(17, 440),(37, 487),(65, 523),(80, 544),(98, 570),(124, 601),(164, 620),(201, 646),(222, 660),(236, 665),(262, 663),(301, 658),(336, 649),(364, 639),(399, 612),(415, 591),(420, 585),(414, 562),(405, 542),(389, 523),(375, 508),(378, 501),(378, 494),(380, 483),(370, 470),(336, 440),(300, 408),(281, 443),(292, 459),(296, 470),(299, 474),(297, 493),(300, 513),(286, 527),(276, 542),(262, 587),(244, 640),(231, 598),(204, 557),(191, 524),(186, 520),(186, 514),(185, 508),(180, 501),(177, 484),(168, 478),(160, 467),(156, 430),(153, 409),(147, 394),(142, 376),(142, 372),(142, 366),(145, 358),(148, 352),(150, 349),(151, 343),(149, 335),(146, 335)]
        self.glass_frame = [(156, 223),(158, 214),(202, 220),(282, 244),(337, 270),(345, 275),(358, 284),(357, 292),(337, 278),(331, 278),(329, 279),(324, 290),(318, 300),(312, 307),(307, 311),(302, 314),(297, 315),(291, 315),(286, 315),(280, 314),(272, 311),(264, 306),(258, 300),(254, 293),(250, 281),(251, 264),(253, 251),(244, 247),(235, 245),(230, 259),(224, 271),(209, 284),(202, 285),(192, 285),(181, 283),(172, 279),(164, 272),(160, 262),(159, 251),(159, 238),(160, 226),(156, 222),(158, 215)]
        self.hair = [(156, 220),(159, 214),(178, 215),(205, 163),(209, 157),(211, 155),(217, 155),(229, 157),(256, 164),(251, 165),(259, 171),(253, 170),(259, 175),(253, 175),(256, 177),(251, 179),(257, 182),(271, 182),(265, 180),(275, 180),(267, 175),(278, 179),(272, 173),(301, 180),(313, 187),(310, 178),(316, 181),(324, 186),(325, 183),(334, 190),(347, 198),(353, 203),(353, 210),(350, 216),(346, 227),(341, 238),(340, 243),(337, 255),(339, 266),(341, 254),(342, 266),(343, 261),(348, 259),(350, 260),(350, 270),(348, 278),(351, 275),(351, 279),(353, 278),(354, 280),(354, 282),(356, 279),(357, 284),(358, 281),(358, 285),(357, 286),(356, 295),(355, 291),(354, 293),(353, 299),(351, 296),(350, 300),(350, 309),(348, 305),(348, 312),(347, 314),(346, 318),(345, 315),(344, 321),(343, 330),(341, 337),(333, 346),(327, 359),(327, 354),(325, 359),(324, 356),(319, 361),(321, 355),(316, 361),(316, 356),(313, 361),(314, 353),(307, 361),(311, 353),(305, 359),(306, 353),(290, 370),(294, 364),(278, 380),(275, 382),(268, 384),(266, 380),(266, 369),(269, 364),(273, 357),(274, 351),(272, 343),(267, 332),(266, 335),(262, 331),(262, 333),(258, 327),(258, 329),(255, 325),(255, 328),(251, 322),(250, 324),(246, 321),(246, 323),(241, 319),(238, 317),(232, 315),(228, 319),(222, 317),(220, 313),(217, 309),(210, 309),(203, 308),(203, 310),(194, 312),(187, 313),(181, 316),(177, 321),(174, 329),(172, 335),(172, 344),(175, 341),(167, 351),(162, 344),(162, 337),(160, 341),(160, 333),(158, 336),(157, 329),(155, 321),(153, 313),(150, 307),(150, 300),(150, 291),(146, 305),(146, 316),(145, 324),(146, 334),(146, 345),(153, 354),(158, 367),(163, 375),(168, 388),(170, 395),(174, 401),(176, 398),(178, 404),(178, 404),(181, 404),(187, 410),(195, 411),(204, 418),(211, 424),(214, 422),(221, 423),(225, 426),(230, 424),(233, 428),(237, 425),(245, 425),(250, 423),(256, 420),(266, 415),(272, 412),(277, 415),(283, 409),(291, 405),(297, 401),(305, 397),(313, 391),(318, 386),(321, 381),(328, 373),(334, 365),(337, 359),(344, 341),(351, 330),(352, 322),(356, 314),(360, 307),(365, 312),(373, 317),(382, 318),(383, 317),(390, 306),(391, 311),(404, 285),(403, 294),(415, 267),(422, 239),(424, 249),(432, 229),(432, 217),(428, 203),(424, 195),(429, 201),(427, 188),(423, 178),(430, 188),(428, 177),(424, 168),(421, 163),(412, 157),(406, 150),(397, 141),(391, 132),(390, 123),(394, 128),(386, 118),(371, 110),(365, 102),(355, 90),(363, 94),(353, 87),(335, 86),(322, 81),(333, 84),(323, 77),(314, 77),(302, 77),(295, 74),(304, 75),(281, 67),(269, 66),(254, 69),(244, 74),(247, 71),(240, 74),(233, 74),(230, 74),(223, 71),(231, 70),(225, 69),(214, 69),(207, 73),(202, 78),(198, 83),(193, 93),(185, 120),(190, 87),(181, 105),(179, 111),(174, 142),(171, 132),(168, 138),(174, 156),(161, 205),(157, 208),(157, 211),(156, 221),(158, 214),(177, 215),(206, 162)]
        self.l_glass = [(172, 224),(167, 232),(164, 243),(163, 255),(164, 263),(167, 269),(173, 275),(180, 279),(188, 281),(199, 281),(207, 279),(213, 276),(217, 271),(224, 261),(227, 251),(228, 244),(225, 238),(217, 233),(208, 229),(200, 226),(191, 223),(182, 221),(175, 222),(170, 225),(168, 230)]
        self.lips = [(190, 334),(196, 349),(225, 360),(239, 359),(254, 351),(254, 346),(244, 337),(214, 326),(195, 325),(188, 332),(191, 336),(198, 336),(208, 335),(217, 338),(226, 339),(232, 342),(239, 345),(245, 347),(250, 347),(252, 348),(253, 352),(248, 352),(236, 350),(192, 338),(194, 344),(198, 350)]
        self.neck = [(149, 349),(144, 358),(142, 370),(144, 377),(146, 387),(150, 397),(152, 404),(154, 418),(156, 433),(157, 450),(158, 462),(162, 471),(168, 479),(176, 485),(178, 494),(187, 514),(186, 518),(186, 521),(189, 523),(193, 529),(196, 539),(204, 559),(231, 596),(243, 641),(275, 546),(282, 531),(300, 514),(297, 493),(297, 485),(299, 477),(299, 473),(294, 472),(294, 465),(289, 456),(281, 443),(301, 409),(310, 391),(298, 400),(278, 408),(259, 415),(236, 421),(209, 418),(190, 408),(172, 391),(168, 381),(158, 368),(154, 358),(149, 349),(147, 355),(143, 362)]
        self.teeth = [(201, 337),(213, 342),(214, 337),(203, 335),(201, 337),(226, 347),(228, 346),(230, 341),(235, 343),(233, 347),(228, 346),(229, 342),(237, 344),(238, 348),(240, 349),(243, 347),(237, 344)]
        self.inner_beard = [(201, 380),(198, 381),(195, 383),(193, 384),(191, 386),(187, 386),(186, 383),(184, 381),(182, 380),(179, 380),(179, 378),(178, 375),(178, 371),(176, 369),(178, 365),(178, 364),(179, 360),(179, 358),(179, 355),(179, 354),(182, 350),(182, 348),(182, 345),(182, 344),(184, 342),(186, 340),(186, 337),(187, 336),(190, 331),(193, 334),(193, 330),(196, 333),(196, 328),(198, 331),(200, 328),(201, 331),(202, 327),(207, 330),(207, 326),(208, 329),(210, 326),(211, 330),(213, 325),(214, 331),(217, 328),(219, 333),(223, 327),(223, 333),(224, 329),(224, 334),(228, 331),(227, 336),(229, 333),(230, 336),(232, 332),(232, 335),(234, 332),(232, 337),(236, 335),(236, 338),(238, 335),(238, 338),(243, 338),(239, 340),(244, 338),(242, 341),(248, 341),(246, 342),(250, 343),(247, 345),(249, 345),(252, 346),(253, 349),(256, 353),(256, 350),(258, 353),(258, 361),(258, 365),(259, 368),(253, 378),(257, 377),(252, 380),(252, 390),(249, 390),(249, 394),(247, 394),(246, 395),(243, 396),(242, 394),(241, 398),(238, 395),(238, 397),(236, 394),(235, 398),(235, 395),(231, 398),(231, 392),(229, 395),(226, 389),(226, 391),(222, 387),(218, 381),(216, 386),(216, 380),(220, 378),(221, 375),(223, 376),(224, 372),(226, 376),(228, 371),(229, 374),(231, 370),(232, 372),(232, 366),(230, 364),(221, 363),(203, 357),(201, 354),(196, 359),(195, 362),(199, 359),(197, 363),(200, 362),(197, 366),(200, 364),(199, 367),(201, 367),(200, 372),(202, 368),(200, 377),(202, 374),(200, 380),(194, 385),(193, 383),(188, 385),(188, 384),(186, 383),(182, 380),(177, 378),(176, 368),(178, 365),(178, 361),(179, 358),(178, 357),(179, 350),(182, 347),(182, 344),(185, 341),(189, 335),(189, 329)]
        self.r_glass = [(272, 249),(262, 252),(258, 259),(256, 264),(254, 272),(254, 280),(256, 289),(260, 298),(263, 301),(271, 307),(276, 309),(283, 311),(289, 312),(296, 313),(301, 311),(308, 306),(313, 299),(319, 289),(321, 282),(323, 274),(322, 270),(319, 266),(310, 260),(299, 255),(292, 252),(278, 249),(273, 249),(267, 250),(263, 251),(260, 254)]
        self.pen = tu.Turtle()
        self.turt = tu
        self.pen.speed(0)
        self.x_offset = x_offset
        self.y_offset = y_offset


    def go(self, x, y):
        self.pen.penup()
        self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        self.pen.pendown()  


    def paint(self,coord,co=(0,0,0)):
        self.pen.color(co)
        t_x,t_y = coord[0]
        self.go(t_x,t_y)
        self.pen.fillcolor(co)
        self.pen.begin_fill()
        t = 0
        for i in coord[1:]:
            #print(i)
            x,y = i
            if t:
                self.go(x,y)
                t = 0
                self.pen.begin_fill()
                continue
            if x == -1 and y == -1:
                t = 1
                self.pen.end_fill()
                continue
            else:
                self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset) 
        self.pen.end_fill()


    def draw_fn(self,coord,mode = 1,co = (0,0,0),thickness = 1):
        co = (co[0]/255,co[1]/255,co[2]/255)

        self.pen.color(co)

        if mode:
            self.pen.width(thickness)
            t_x,t_y = coord[0]
            self.go(t_x,t_y)
            t = 0
            for i in coord[1:]:
                #print(i)
                x,y = i
                if t:
                    self.go(x,y)
                    t = 0
                    continue
                if x == -1 and y == -1:
                    t = 1
                    continue
                else:
                    self.pen.goto(x-self.x_offset,(y*-1)+self.y_offset)
        else:
            self.paint(coord=coord,co = co)

    
    def draw(self,retain=True):
        self.draw_fn(self.neck,co = (247, 164, 130),mode = 0)
        self.draw_fn(self.dress,co = (75, 91, 153),mode = 0)
        self.draw_fn(self.hair,co = (0,0,0),mode = 0)
        self.draw_fn(self.glass_frame,co = (56, 53, 48),mode = 0)
        self.draw_fn(self.l_glass,co = (7, 96, 148),mode = 0)
        self.draw_fn(self.r_glass,co = (7, 96, 148),mode = 0)
        self.draw_fn(self.inner_beard,co = (241, 152, 112),mode = 0)
        self.draw_fn(self.lips,co = (238, 104, 114),mode = 0)
        self.draw_fn(self.teeth,co = (0,0,0),mode = 0)
        if retain:
            self.turt.done()






