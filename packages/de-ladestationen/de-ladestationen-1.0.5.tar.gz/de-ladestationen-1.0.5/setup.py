# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['deutschland',
 'deutschland.ladestationen',
 'deutschland.ladestationen.api',
 'deutschland.ladestationen.apis',
 'deutschland.ladestationen.model',
 'deutschland.ladestationen.models']

package_data = \
{'': ['*']}

install_requires = \
['python-dateutil', 'urllib3>=1.25.3']

setup_kwargs = {
    'name': 'de-ladestationen',
    'version': '1.0.5',
    'description': 'Bundesnetzagentur: Ladesäulenregister',
    'long_description': '# ladestationen\nAPI des Ladesäulenregisters der Bundesnetzagentur\n\nThis Python package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:\n\n- API version: 1.0.0\n- Package version: 1.0.5\n- Build package: org.openapitools.codegen.languages.PythonClientCodegen\n\n## Requirements.\n\nPython >=3.6\n\n## Installation & Usage\n### pip install\n\nIf the python package is hosted on a repository, you can install directly using:\n\n```sh\npip install git+https://github.com/bundesAPI/ladestationen-api.git\n```\n(you may need to run `pip` with root permission: `sudo pip install git+https://github.com/bundesAPI/ladestationen-api.git`)\n\nThen import the package:\n```python\nfrom deutschland import ladestationen\n```\n\n### Setuptools\n\nInstall via [Setuptools](http://pypi.python.org/pypi/setuptools).\n\n```sh\npython setup.py install --user\n```\n(or `sudo python setup.py install` to install the package for all users)\n\nThen import the package:\n```python\nfrom deutschland import ladestationen\n```\n\n## Getting Started\n\nPlease follow the [installation procedure](#installation--usage) and then run the following:\n\n```python\n\nimport time\nfrom deutschland import ladestationen\nfrom pprint import pprint\nfrom deutschland.ladestationen.api import default_api\nfrom deutschland.ladestationen.model.station_overview import StationOverview\n# Defining the host is optional and defaults to http://localhost\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = ladestationen.Configuration(\n    host = "http://localhost"\n)\n\n\n\n# Enter a context with an instance of the API client\nwith ladestationen.ApiClient(configuration) as api_client:\n    # Create an instance of the API class\n    api_instance = default_api.DefaultApi(api_client)\n    geometry = "geometry_example" # str | Geometry filter. URL-enkodiertes JSON Objekt vom Typ `Geometry`\nout_fields = "*" # str | Auswahl der Felder, die ausgegeben werden sollen, durch Komma getrennt (default to "*")\ngeometry_type = "esriGeometryEnvelope" # str | Art der Geometry (optional) (default to "esriGeometryEnvelope")\nf = "json" # str | Ausgabeformat der Daten. Default ist \'html\'. (optional)\nobject_ids = "42,123,666" # str | Komma-separierte Liste von IDs (integer), filtert nach den einzelnen Objekten (optional)\norder_by_fields = "orderByFields_example" # str |  (optional)\nreturn_geometry = True # bool |  (optional)\nspatial_rel = "esriSpatialRelIntersects" # str | Spatial Relationships (optional)\nin_sr = 1 # int | Input Spatial Reference (optional)\nout_sr = 1 # int | Output Spatial Reference (optional)\nmax_record_count_factor = 1 # int |  (optional)\nresult_type = "none" # str |  (optional)\nquantization_parameters = "quantizationParameters_example" # str | URL-enkodiertes JSON Objekt vom Typ `QuantizationParameter` (optional)\nwhere = "where_example" # str | SQL \\"where\\" Filter (optional)\nhaving = "having_example" # str |  (optional)\ntime = 1 # int |  (optional)\ndistance = "0.0" # str |  (optional)\nunits = "esriSRUnit_Meter" # str |  (optional)\ngeometry_precision = "geometryPrecision_example" # str |  (optional)\nfeature_encoding = "esriDefault" # str |  (optional)\ngroup_by_fields_for_statistics = "groupByFieldsForStatistics_example" # str |  (optional)\ncache_hint = True # bool |  (optional)\nreturn_extent_only = True # bool |  (optional)\nreturn_z = True # bool |  (optional)\nreturn_ids_only = True # bool |  (optional)\nreturn_centroid = True # bool |  (optional)\nreturn_exceeded_limit_features = True # bool |  (optional)\ndatum_transformation = "datumTransformation_example" # str |  (optional)\nresult_offset = "resultOffset_example" # str |  (optional)\napply_vcs_projection = True # bool |  (optional)\nout_statistics = "outStatistics_example" # str |  (optional)\nreturn_distinct_values = True # bool |  (optional)\nmultipatch_option = "none" # str |  (optional)\nreturn_m = True # bool |  (optional)\nmax_allowable_offset = 1 # int |  (optional)\nreturn_count_only = True # bool |  (optional)\nreturn_unique_ids_only = True # bool |  (optional)\nreturn_query_geometry = True # bool |  (optional)\nresult_record_count = 1 # int |  (optional)\nsql_format = "none" # str |  (optional)\ntoken = "token_example" # str |  (optional)\nreturn_geodetic = True # bool |  (optional)\n\n    try:\n        # Query für alle Ladesäulen\n        api_response = api_instance.query_get(geometry, out_fields, geometry_type=geometry_type, f=f, object_ids=object_ids, order_by_fields=order_by_fields, return_geometry=return_geometry, spatial_rel=spatial_rel, in_sr=in_sr, out_sr=out_sr, max_record_count_factor=max_record_count_factor, result_type=result_type, quantization_parameters=quantization_parameters, where=where, having=having, time=time, distance=distance, units=units, geometry_precision=geometry_precision, feature_encoding=feature_encoding, group_by_fields_for_statistics=group_by_fields_for_statistics, cache_hint=cache_hint, return_extent_only=return_extent_only, return_z=return_z, return_ids_only=return_ids_only, return_centroid=return_centroid, return_exceeded_limit_features=return_exceeded_limit_features, datum_transformation=datum_transformation, result_offset=result_offset, apply_vcs_projection=apply_vcs_projection, out_statistics=out_statistics, return_distinct_values=return_distinct_values, multipatch_option=multipatch_option, return_m=return_m, max_allowable_offset=max_allowable_offset, return_count_only=return_count_only, return_unique_ids_only=return_unique_ids_only, return_query_geometry=return_query_geometry, result_record_count=result_record_count, sql_format=sql_format, token=token, return_geodetic=return_geodetic)\n        pprint(api_response)\n    except ladestationen.ApiException as e:\n        print("Exception when calling DefaultApi->query_get: %s\\n" % e)\n```\n\n## Documentation for API Endpoints\n\nAll URIs are relative to *http://localhost*\n\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*DefaultApi* | [**query_get**](docs/DefaultApi.md#query_get) | **GET** /query | Query für alle Ladesäulen\n\n\n## Documentation For Models\n\n - [Geometry](docs/Geometry.md)\n - [QuantizationParameter](docs/QuantizationParameter.md)\n - [StationOverview](docs/StationOverview.md)\n - [StationOverviewAttributes](docs/StationOverviewAttributes.md)\n - [StationOverviewFeatures](docs/StationOverviewFeatures.md)\n - [StationOverviewFields](docs/StationOverviewFields.md)\n - [StationOverviewSpatialReference](docs/StationOverviewSpatialReference.md)\n - [StationOverviewTransform](docs/StationOverviewTransform.md)\n - [StationOverviewUniqueIdField](docs/StationOverviewUniqueIdField.md)\n\n\n## Documentation For Authorization\n\n All endpoints do not require authorization.\n\n## Author\n\nkontakt@bund.dev\n\n\n## Notes for Large OpenAPI documents\nIf the OpenAPI document is large, imports in ladestationen.apis and ladestationen.models may fail with a\nRecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:\n\nSolution 1:\nUse specific imports for apis and models like:\n- `from deutschland.ladestationen.api.default_api import DefaultApi`\n- `from deutschland.ladestationen.model.pet import Pet`\n\nSolution 2:\nBefore importing the package, adjust the maximum recursion limit as shown below:\n```\nimport sys\nsys.setrecursionlimit(1500)\nfrom deutschland import ladestationen\nfrom deutschland.ladestationen.apis import *\nfrom deutschland.ladestationen.models import *\n```\n\n',
    'author': 'BundesAPI',
    'author_email': 'kontakt@bund.dev',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/bundesAPI/ladestationen-api',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6',
}


setup(**setup_kwargs)
