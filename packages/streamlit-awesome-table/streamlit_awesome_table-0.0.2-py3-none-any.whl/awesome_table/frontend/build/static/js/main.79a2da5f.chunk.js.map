{"version":3,"sources":["AwesomeTable.tsx","index.tsx"],"names":["AwesomeTable","state","numClicks","isFocused","render","data","JSON","parse","props","args","columns","console","log","theme","style","borderStyling","primaryColor","border","outline","className","map","column","scope","label","ICONBUTTON","IMAGE","dtype","name","href","target","rel","icon","src","alt","onClicked","setState","prevState","Streamlit","setComponentValue","_onFocus","_onBlur","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"wQAgBMA,E,4MACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,G,EAEnCC,OAAS,WAGd,IAAMC,EAAOC,KAAKC,MAAM,EAAKC,MAAMC,KAAX,MAClBC,EAAU,EAAKF,MAAMC,KAAX,QAChBE,QAAQC,IAAIF,GAKZ,IAAQG,EAAU,EAAKL,MAAfK,MACFC,EAA6B,GAInC,GAAID,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKd,MAAME,UAAYU,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAOlB,OACE,yBAAKI,UAAU,oBACb,2BAAOA,UAAU,mCACf,+BAEIT,EAAQU,KAAI,SAACC,GACX,OACA,wBAAIC,MAAM,OAAOD,EAAOE,WAI9B,+BACGlB,EAAKA,KAAKe,KAAI,SAACf,GACd,IAAMmB,EAAa,CACf,QAAW,eACX,YAAa,UACb,MAAS,UACT,OAAU,UACV,cAAe,OACf,QAAW,eAETC,EAAQ,CACZ,OAAU,IAEZ,OACE,4BACIf,EAAQU,KAAI,SAACC,GACX,MAAoB,WAAjBA,EAAOK,MAEN,4BAAKrB,EAAKgB,EAAOM,OAGD,eAAjBN,EAAOK,MAEN,4BACE,uBAAGE,KAAMvB,EAAKgB,EAAOM,MAAOE,OAAO,SAASC,IAAI,uBAAsB,uBAAGhB,MAAOU,EAAYL,UAAWE,EAAOU,SAIhG,aAAjBV,EAAOK,MAEN,wBAAIP,UAAU,4BAA2B,uBAAGS,KAAMvB,EAAKgB,EAAOM,MAAOE,OAAO,SAASC,IAAI,uBAAsB,uBAAGhB,MAAOU,EAAYL,UAAU,mCAG/H,SAAjBE,EAAOK,MAEN,wBAAIP,UAAU,4BAA2B,uBAAGS,KAAMvB,EAAKgB,EAAOM,MAAOE,OAAO,SAASC,IAAI,uBAAsB,uBAAGhB,MAAOU,EAAYL,UAAU,uCAG/H,UAAjBE,EAAOK,MAEN,wBAAIP,UAAU,4BAA2B,yBAAKL,MAAOW,EAAOO,IAAK3B,EAAKgB,EAAOM,MAAOM,IAAKZ,EAAOM,QAG9F,+BA5BR,wB,EAwCVO,UAAY,WAGlB,EAAKC,UACH,SAAAC,GAAS,MAAK,CAAElC,UAAWkC,EAAUlC,UAAY,MACjD,kBAAMmC,IAAUC,kBAAkB,EAAKrC,MAAMC,e,EAKzCqC,SAAW,WACjB,EAAKJ,SAAS,CAAEhC,WAAW,K,EAIrBqC,QAAU,WAChB,EAAKL,SAAS,CAAEhC,WAAW,K,yBAlHJsC,KA2HZC,cAAwB1C,G,YCrIvC2C,IAASvC,OACP,kBAAC,IAAMwC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.79a2da5f.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass AwesomeTable extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const data = JSON.parse(this.props.args[\"data\"])\n    const columns = this.props.args[\"columns\"]\n    console.log(columns)\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <div className=\"table-responsive\">\n        <table className=\"table table-striped table-hover\">\n          <thead>\n            {\n              columns.map((column: any) => {\n                return(\n                <th scope=\"col\">{column.label}</th>\n              )\n            })}\n          </thead>\n          <tbody>\n            {data.data.map((data: any) => {\n              const ICONBUTTON = {\n                  \"display\": \"inline-block\",\n                  \"font-size\": \"1.25rem\",\n                  \"color\": \"#212529\",\n                  \"cursor\": \"pointer\",\n                  \"user-select\": \"none\",\n                  \"padding\": \"0.5rem 1rem\"\n              }\n              const IMAGE = {\n                \"height\": 50,\n              }\n              return (\n                <tr>{\n                    columns.map((column: any) => {\n                      if(column.dtype === \"STRING\") {\n                        return (\n                          <td>{data[column.name]}</td>\n                        )\n                      }\n                      if(column.dtype === \"ICONBUTTON\") {\n                        return (\n                          <td>\n                            <a href={data[column.name]} target=\"_blank\" rel=\"noopener noreferrer\"><i style={ICONBUTTON} className={column.icon}></i></a>\n                          </td>\n                        )\n                      }\n                      if(column.dtype === \"DOWNLOAD\") {\n                        return (\n                          <td className=\"align-middle text-center\"><a href={data[column.name]} target=\"_blank\" rel=\"noopener noreferrer\"><i style={ICONBUTTON} className=\"fa-solid fa-cloud-arrow-down\"></i></a></td>\n                        )\n                      }\n                      if(column.dtype === \"LINK\") {\n                        return (\n                          <td className=\"align-middle text-center\"><a href={data[column.name]} target=\"_blank\" rel=\"noopener noreferrer\"><i style={ICONBUTTON} className=\"fa-solid fa-up-right-from-square\"></i></a></td>\n                        )\n                      }\n                      if(column.dtype === \"IMAGE\") {\n                        return(\n                          <td className=\"align-middle text-center\"><img style={IMAGE} src={data[column.name]} alt={column.name}/></td>\n                        )\n                    }\n                    return (<td></td>)\n                  }, this)}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(AwesomeTable)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AwesomeTable from \"./AwesomeTable\"\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport '@fortawesome/fontawesome-free/css/all.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AwesomeTable />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}