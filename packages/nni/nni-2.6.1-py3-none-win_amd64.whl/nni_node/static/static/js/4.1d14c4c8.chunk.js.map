{"version":3,"file":"static/js/4.1d14c4c8.chunk.js","mappings":"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","sources":["static/model/experimentsManager.ts","components/managementExp/expFunction.ts","components/managementExp/experimentConst.ts","components/managementExp/Header.tsx","components/managementExp/TrialIdColumn.tsx","components/managementExp/FilterBtns.tsx","components/managementExp/ExperimentManager.tsx","components/overview/Title.tsx","components/overview/TitleContext.tsx","components/public-child/CopyButton.tsx"],"sourcesContent":["import { MANAGER_IP } from '../const';\nimport { AllExperimentList } from '../interface';\nimport { requestAxios } from '../function';\n\nclass ExperimentsManager {\n    private experimentList: AllExperimentList[] = [];\n    private platform: string[] = [];\n    private errorMessage: string = '';\n\n    public getExperimentList(): AllExperimentList[] {\n        return this.experimentList;\n    }\n\n    public getPlatformList(): string[] {\n        return this.platform;\n    }\n\n    public getExpErrorMessage(): string {\n        return this.errorMessage;\n    }\n\n    public async init(): Promise<void> {\n        await requestAxios(`${MANAGER_IP}/experiments-info`)\n            .then(data => {\n                const platforms: Set<string> = new Set();\n                for (const item of data) {\n                    if (item.port !== undefined) {\n                        if (typeof item.port === 'string') {\n                            item.port = JSON.parse(item.port);\n                        }\n                    }\n                    platforms.add(item.platform);\n                }\n                // this.experimentList = data.reverse();\n                this.experimentList = data.sort((a, b) => b.startTime - a.startTime);\n                this.platform = Array.from(platforms);\n            })\n            .catch(error => {\n                this.errorMessage = error.message;\n            });\n    }\n}\n\nexport { ExperimentsManager };\n","import { AllExperimentList, SortInfo } from '../../static/interface';\nimport { copyAndSort } from '../../static/function';\n\nfunction compareDate(date1: Date, date2: Date): boolean {\n    if (date1 !== undefined && date2 !== undefined) {\n        if (date1.getFullYear() === date2.getFullYear()) {\n            if (date1.getMonth() === date2.getMonth()) {\n                if (date1.getDate() === date2.getDate()) {\n                    return true;\n                }\n            }\n        }\n    }\n\n    return false;\n}\n\nconst filterByStatusOrPlatform = (\n    val: string | string[],\n    type: string,\n    data: AllExperimentList[]\n): AllExperimentList[] => {\n    if (typeof val === 'string' && val !== '') {\n        return data.filter(temp => temp[type] === val);\n    }\n\n    if (Array.isArray(val) && val.length !== 0) {\n        return data.filter(temp => val.includes(temp[type]));\n    }\n\n    return data;\n};\n\nfunction fillOptions(arr: string[]): any {\n    return arr.map(item => ({ key: item, text: item }));\n}\n\nfunction getSortedSource(source: AllExperimentList[], sortInfo: SortInfo): AllExperimentList[] {\n    const keepSortedSource = copyAndSort(source, sortInfo.field, sortInfo.isDescend);\n    return keepSortedSource;\n}\n\nexport { compareDate, filterByStatusOrPlatform, fillOptions, getSortedSource };\n","const MAXSCREENCOLUMNWIDHT = 180;\nconst MINSCREENCOLUMNWIDHT = 139;\n\nexport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT };\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Stack, StackItem, CommandBarButton } from '@fluentui/react';\r\nimport { RevToggleKey } from '../buttons/Icon';\r\nimport { NNILOGO } from '../stateless-component/NNItabs';\r\nimport { stackTokens, stackStyle } from '../NavConst';\r\n\r\nexport const Hearder = (): any => (\r\n    <div className='header'>\r\n        <div className='headerCon'>\r\n            <Stack className='nav' horizontal>\r\n                <StackItem grow={30} styles={{ root: { minWidth: 300, display: 'flex', verticalAlign: 'center' } }}>\r\n                    <span className='desktop-logo'>{NNILOGO}</span>\r\n                    <span className='logoTitle'>Neural Network Intelligence</span>\r\n                </StackItem>\r\n                <StackItem grow={70} className='navOptions'>\r\n                    <Stack horizontal horizontalAlign='end' tokens={stackTokens} styles={stackStyle}>\r\n                        <Link to='/oview' className='experiment'>\r\n                            <CommandBarButton iconProps={RevToggleKey} text='Back to the experiment' />\r\n                        </Link>\r\n                    </Stack>\r\n                </StackItem>\r\n            </Stack>\r\n        </div>\r\n    </div>\r\n);\r\n","import * as React from 'react';\r\nimport { Stack } from '@fluentui/react';\r\nimport CopyButton from '../public-child/CopyButton';\r\n\r\ninterface TrialIdColumnProps {\r\n    port: number;\r\n    id: string;\r\n    status: string;\r\n}\r\n\r\nclass TrialIdColumn extends React.Component<TrialIdColumnProps, {}> {\r\n    constructor(props: TrialIdColumnProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const { port, id, status } = this.props;\r\n        const hostname = window.location.hostname;\r\n        const protocol = window.location.protocol;\r\n        const webuiPortal = `${protocol}//${hostname}:${port}/oview`;\r\n        return (\r\n            <Stack horizontal className='ellipsis idCopy'>\r\n                {status === 'STOPPED' ? (\r\n                    <div className='idColor'>{id}</div>\r\n                ) : (\r\n                    <a\r\n                        href={webuiPortal}\r\n                        className='link toAnotherExp idColor'\r\n                        target='_blank'\r\n                        rel='noopener noreferrer'\r\n                    >\r\n                        {id}\r\n                    </a>\r\n                )}\r\n                <CopyButton value={id} />\r\n            </Stack>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TrialIdColumn;\r\n","import * as React from 'react';\r\nimport { DefaultButton, Icon, Dropdown, DatePicker, DayOfWeek } from '@fluentui/react';\r\nimport { EXPERIMENTSTATUS } from '../../static/const';\r\nimport { fillOptions } from './expFunction';\r\n\r\ninterface FilterBtnsProps {\r\n    platform: string[];\r\n    selectedStatus: string[];\r\n    selectedPlatform: string;\r\n    selectedStartDate: Date;\r\n    selectedEndDate: Date;\r\n    selectStatus: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\r\n    selectPlatform: (_event: React.FormEvent<HTMLDivElement>, item: any) => void;\r\n    getSelectedData: (type: string, date: Date | null | undefined) => void;\r\n    setSearchSource: () => void;\r\n}\r\n\r\nclass FilterBtns extends React.Component<FilterBtnsProps, {}> {\r\n    constructor(props: FilterBtnsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const {\r\n            platform,\r\n            selectedStatus,\r\n            selectedPlatform,\r\n            selectedStartDate,\r\n            selectedEndDate,\r\n            selectStatus,\r\n            selectPlatform,\r\n            getSelectedData,\r\n            setSearchSource\r\n        } = this.props;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Dropdown\r\n                    label='Status'\r\n                    selectedKeys={selectedStatus}\r\n                    multiSelect\r\n                    onChange={selectStatus.bind(this)}\r\n                    placeholder='Select an option'\r\n                    options={fillOptions(EXPERIMENTSTATUS)}\r\n                    className='filter-condition-status'\r\n                />\r\n                <Dropdown\r\n                    label='Platform'\r\n                    selectedKey={selectedPlatform}\r\n                    onChange={selectPlatform.bind(this)}\r\n                    placeholder='Select an option'\r\n                    options={fillOptions(platform)}\r\n                    className='filter-condition-platform'\r\n                />\r\n                <DatePicker\r\n                    label='Start time'\r\n                    firstDayOfWeek={DayOfWeek.Sunday}\r\n                    showMonthPickerAsOverlay={true}\r\n                    placeholder='Select a date...'\r\n                    ariaLabel='Select a date'\r\n                    value={selectedStartDate}\r\n                    onSelectDate={getSelectedData.bind(this, 'start')}\r\n                />\r\n                <DatePicker\r\n                    label='End time'\r\n                    firstDayOfWeek={DayOfWeek.Sunday}\r\n                    showMonthPickerAsOverlay={true}\r\n                    placeholder='Select a date...'\r\n                    ariaLabel='Select a date'\r\n                    value={selectedEndDate}\r\n                    onSelectDate={getSelectedData.bind(this, 'end')}\r\n                />\r\n                <DefaultButton onClick={setSearchSource.bind(this)} className='reset'>\r\n                    <Icon iconName='Refresh' />\r\n                    <span className='margin'>Reset</span>\r\n                </DefaultButton>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FilterBtns;\r\n","import * as React from 'react';\r\nimport { Stack, DetailsList, DefaultButton, Icon, SearchBox, IColumn, IStackTokens } from '@fluentui/react';\r\nimport { ExperimentsManager } from '../../static/model/experimentsManager';\r\nimport { expformatTimestamp, copyAndSort } from '../../static/function';\r\nimport { AllExperimentList, SortInfo } from '../../static/interface';\r\nimport MessageInfo from '../modals/MessageInfo';\r\nimport { compareDate, filterByStatusOrPlatform, getSortedSource } from './expFunction';\r\nimport { MAXSCREENCOLUMNWIDHT, MINSCREENCOLUMNWIDHT } from './experimentConst';\r\nimport { Hearder } from './Header';\r\nimport NameColumn from './TrialIdColumn';\r\nimport FilterBtns from './FilterBtns';\r\nimport { TitleContext } from '../overview/TitleContext';\r\nimport { Title } from '../overview/Title';\r\nimport '../../App.scss';\r\nimport '../../static/style/common.scss';\r\nimport '../../static/style/nav/nav.scss';\r\nimport '../../static/style/experiment/experiment.scss';\r\nimport '../../static/style/overview/probar.scss';\r\nimport '../../static/style/tableStatus.css';\r\n\r\nconst expTokens: IStackTokens = {\r\n    childrenGap: 25\r\n};\r\n\r\ninterface ExpListState {\r\n    columns: IColumn[];\r\n    platform: string[];\r\n    errorMessage: string;\r\n    hideFilter: boolean;\r\n    searchInputVal: string;\r\n    selectedStatus: string[];\r\n    selectedPlatform: string;\r\n    selectedStartDate?: Date;\r\n    selectedEndDate?: Date;\r\n    sortInfo: SortInfo;\r\n    source: AllExperimentList[];\r\n    originExperimentList: AllExperimentList[];\r\n    searchSource: AllExperimentList[];\r\n}\r\n\r\nclass Experiment extends React.Component<{}, ExpListState> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            platform: [],\r\n            columns: this.columns,\r\n            errorMessage: '',\r\n            hideFilter: true,\r\n            searchInputVal: '',\r\n            selectedStatus: [],\r\n            selectedPlatform: '',\r\n            source: [], // data in table\r\n            originExperimentList: [], // api /experiments-info\r\n            searchSource: [], // search box search result\r\n            sortInfo: { field: '', isDescend: false }\r\n        };\r\n    }\r\n\r\n    async componentDidMount(): Promise<void> {\r\n        const EXPERIMENTMANAGER = new ExperimentsManager();\r\n        await EXPERIMENTMANAGER.init();\r\n        const result = EXPERIMENTMANAGER.getExperimentList();\r\n        this.setState(() => ({\r\n            source: result,\r\n            originExperimentList: result,\r\n            searchSource: result,\r\n            platform: EXPERIMENTMANAGER.getPlatformList(),\r\n            errorMessage: EXPERIMENTMANAGER.getExpErrorMessage()\r\n        }));\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const {\r\n            platform,\r\n            hideFilter,\r\n            selectedStatus,\r\n            source,\r\n            selectedPlatform,\r\n            selectedStartDate,\r\n            selectedEndDate,\r\n            errorMessage\r\n        } = this.state;\r\n        return (\r\n            <Stack className='nni' style={{ minHeight: window.innerHeight }}>\r\n                <Hearder />\r\n                {errorMessage !== undefined ? (\r\n                    <div className='warning'>\r\n                        <MessageInfo info={errorMessage} typeInfo='error' />\r\n                    </div>\r\n                ) : null}\r\n                <Stack className='contentBox expBackground'>\r\n                    {/* 56px: navBarHeight; 48: marginTop & Bottom */}\r\n                    <Stack className='content' styles={{ root: { minHeight: window.innerHeight - 104 } }}>\r\n                        <Stack className='experimentList'>\r\n                            <TitleContext.Provider value={{ text: 'All experiments', icon: 'CustomList' }}>\r\n                                <Title />\r\n                            </TitleContext.Provider>\r\n                            <Stack className='box' horizontal>\r\n                                <div className='search'>\r\n                                    <SearchBox\r\n                                        className='search-input'\r\n                                        placeholder='Search the experiment by name or ID'\r\n                                        onEscape={this.setOriginSource.bind(this)}\r\n                                        onClear={this.setOriginSource.bind(this)}\r\n                                        onChange={this.searchNameAndId.bind(this)}\r\n                                    />\r\n                                </div>\r\n                                <div className='filter'>\r\n                                    <DefaultButton\r\n                                        onClick={this.clickFilter.bind(this)}\r\n                                        className={`${!hideFilter ? 'filter-button-open' : null}`}\r\n                                    >\r\n                                        <Icon iconName='Equalizer' />\r\n                                        <span className='margin'>Filter</span>\r\n                                    </DefaultButton>\r\n                                </div>\r\n                            </Stack>\r\n                            <Stack\r\n                                className={`${hideFilter ? 'hidden' : ''} filter-condition`}\r\n                                horizontal\r\n                                tokens={expTokens}\r\n                            >\r\n                                <FilterBtns\r\n                                    platform={platform}\r\n                                    selectedStatus={selectedStatus}\r\n                                    selectedPlatform={selectedPlatform}\r\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                    selectedStartDate={selectedStartDate!}\r\n                                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                                    selectedEndDate={selectedEndDate!}\r\n                                    selectStatus={this.selectStatus.bind(this)}\r\n                                    selectPlatform={this.selectPlatform.bind(this)}\r\n                                    getSelectedData={this.getSelectedData.bind(this)}\r\n                                    setSearchSource={this.setSearchSource.bind(this)}\r\n                                />\r\n                            </Stack>\r\n                            <DetailsList\r\n                                columns={this.columns}\r\n                                items={source}\r\n                                setKey='set'\r\n                                compact={true}\r\n                                selectionMode={0} // close selector function\r\n                                className='table'\r\n                            />\r\n                        </Stack>\r\n                    </Stack>\r\n                </Stack>\r\n            </Stack>\r\n        );\r\n    }\r\n\r\n    private onColumnClick = (_ev: React.MouseEvent<HTMLElement>, getColumn: IColumn): void => {\r\n        const { columns, source } = this.state;\r\n        const newColumns: IColumn[] = columns.slice();\r\n        const currColumn: IColumn = newColumns.filter(item => getColumn.key === item.key)[0];\r\n        newColumns.forEach((newCol: IColumn) => {\r\n            if (newCol === currColumn) {\r\n                currColumn.isSortedDescending = !currColumn.isSortedDescending;\r\n                currColumn.isSorted = true;\r\n            } else {\r\n                newCol.isSorted = false;\r\n                newCol.isSortedDescending = true;\r\n            }\r\n        });\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const newItems = copyAndSort(source, currColumn.fieldName!, currColumn.isSortedDescending);\r\n        this.setState(() => ({\r\n            columns: newColumns,\r\n            source: newItems,\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            sortInfo: { field: currColumn.fieldName!, isDescend: currColumn.isSortedDescending }\r\n        }));\r\n    };\r\n\r\n    private columns: IColumn[] = [\r\n        {\r\n            name: 'Name',\r\n            key: 'experimentName',\r\n            fieldName: 'experimentName', // required!\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div>{item.experimentName}</div>\r\n        },\r\n        {\r\n            name: 'ID',\r\n            key: 'id',\r\n            fieldName: 'id',\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            className: 'tableHead leftTitle',\r\n            data: 'string',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <NameColumn port={item.port} status={item.status} id={item.id} />\r\n        },\r\n        {\r\n            name: 'Status',\r\n            key: 'status',\r\n            fieldName: 'status',\r\n            minWidth: MINSCREENCOLUMNWIDHT,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT,\r\n            isResizable: true,\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div className={`${item.status} commonStyle`}>{item.status}</div>\r\n        },\r\n        {\r\n            name: 'Port',\r\n            key: 'port',\r\n            fieldName: 'port',\r\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => (\r\n                <div className={item.status === 'STOPPED' ? 'gray-port' : ''}>\r\n                    {item.port !== undefined ? item.port : '--'}\r\n                </div>\r\n            )\r\n        },\r\n        {\r\n            name: 'Platform',\r\n            key: 'platform',\r\n            fieldName: 'platform',\r\n            minWidth: MINSCREENCOLUMNWIDHT - 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT - 30,\r\n            isResizable: true,\r\n            data: 'string',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div className='commonStyle'>{item.platform}</div>\r\n        },\r\n        {\r\n            name: 'Start time',\r\n            key: 'startTime',\r\n            fieldName: 'startTime',\r\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.startTime)}</div>\r\n        },\r\n        {\r\n            name: 'End time',\r\n            key: 'endTime',\r\n            fieldName: 'endTime',\r\n            minWidth: MINSCREENCOLUMNWIDHT + 15,\r\n            maxWidth: MAXSCREENCOLUMNWIDHT + 30,\r\n            isResizable: true,\r\n            data: 'number',\r\n            onColumnClick: this.onColumnClick,\r\n            onRender: (item: any): React.ReactNode => <div>{expformatTimestamp(item.endTime)}</div>\r\n        }\r\n    ];\r\n\r\n    private clickFilter(_e: any): void {\r\n        const { hideFilter } = this.state;\r\n        if (!hideFilter === true) {\r\n            this.setSearchSource();\r\n        }\r\n        this.setState(() => ({ hideFilter: !hideFilter }));\r\n    }\r\n\r\n    private setOriginSource(): void {\r\n        let { originExperimentList } = this.state;\r\n        const { sortInfo } = this.state;\r\n        if (originExperimentList !== undefined) {\r\n            originExperimentList = this.commonSelectString(originExperimentList, '');\r\n            const sortedData = getSortedSource(originExperimentList, sortInfo);\r\n            this.setState(() => ({\r\n                source: sortedData\r\n            }));\r\n        }\r\n    }\r\n\r\n    private searchNameAndId(_event, newValue): void {\r\n        const { originExperimentList, sortInfo } = this.state;\r\n        if (newValue !== undefined) {\r\n            if (newValue === '') {\r\n                this.setOriginSource();\r\n            } else {\r\n                const searchInput = newValue.trim();\r\n                let result = originExperimentList.filter(\r\n                    item =>\r\n                        item.experimentName.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n                        item.id.toLowerCase().includes(searchInput.toLowerCase())\r\n                );\r\n                result = this.commonSelectString(result, '');\r\n                const sortedResult = getSortedSource(result, sortInfo);\r\n                this.setState(() => ({\r\n                    source: sortedResult,\r\n                    searchSource: sortedResult\r\n                }));\r\n            }\r\n            this.setState(() => ({\r\n                searchInputVal: newValue.trim()\r\n            }));\r\n        }\r\n    }\r\n\r\n    /***\r\n     * status, platform\r\n     * param\r\n     * data: searchSource\r\n     * field: no care selected filed\r\n     */\r\n    private commonSelectString = (data: AllExperimentList[], field: string): AllExperimentList[] => {\r\n        const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate } = this.state;\r\n\r\n        if (field === 'status') {\r\n            data = filterByStatusOrPlatform(selectedPlatform, 'platform', data);\r\n        }\r\n        if (field === 'platform') {\r\n            data = filterByStatusOrPlatform(selectedStatus, 'status', data);\r\n        }\r\n\r\n        if (field === '') {\r\n            data = Array.from(\r\n                new Set([\r\n                    ...filterByStatusOrPlatform(selectedPlatform, 'platform', data),\r\n                    ...filterByStatusOrPlatform(selectedStatus, 'status', data)\r\n                ])\r\n            );\r\n        }\r\n\r\n        data = data.filter(\r\n            item =>\r\n                (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate)) &&\r\n                (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\r\n        );\r\n\r\n        return data;\r\n    };\r\n\r\n    // status platform startTime endTime\r\n    private selectStatus = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\r\n        if (item !== undefined) {\r\n            const { searchSource, sortInfo, selectedStatus } = this.state;\r\n            const newSelectedStatus = item.selected\r\n                ? [...selectedStatus, item.key as string]\r\n                : selectedStatus.filter(key => key !== item.key);\r\n            let result = filterByStatusOrPlatform(newSelectedStatus, 'status', searchSource);\r\n            result = this.commonSelectString(result, 'status');\r\n            this.setState({\r\n                selectedStatus: newSelectedStatus,\r\n                source: getSortedSource(result, sortInfo)\r\n            });\r\n        }\r\n    };\r\n\r\n    private selectPlatform = (_event: React.FormEvent<HTMLDivElement>, item: any): void => {\r\n        if (item !== undefined) {\r\n            const { searchSource, sortInfo } = this.state;\r\n            let result = filterByStatusOrPlatform(item.key, 'platform', searchSource);\r\n            result = this.commonSelectString(result, 'platform');\r\n            this.setState({ selectedPlatform: item.key, source: getSortedSource(result, sortInfo) });\r\n        }\r\n    };\r\n\r\n    private getSelectedData(type: string, date: Date | null | undefined): void {\r\n        if (date !== null && date !== undefined) {\r\n            const { selectedStatus, selectedPlatform, selectedStartDate, selectedEndDate, searchSource, sortInfo } =\r\n                this.state;\r\n            const hasPlatform = selectedPlatform === '' ? false : true;\r\n\r\n            // filter status, platform\r\n            let result = filterByStatusOrPlatform(selectedStatus, 'status', searchSource);\r\n            if (hasPlatform) {\r\n                result = result.filter(temp => temp.platform === selectedPlatform);\r\n            }\r\n\r\n            if (type === 'start') {\r\n                result = result.filter(\r\n                    item =>\r\n                        compareDate(new Date(item.startTime), date) &&\r\n                        (selectedEndDate === undefined || compareDate(new Date(item.endTime), selectedEndDate))\r\n                );\r\n                this.setState(() => ({\r\n                    source: getSortedSource(result, sortInfo),\r\n                    selectedStartDate: date\r\n                }));\r\n            } else {\r\n                result = result.filter(\r\n                    item =>\r\n                        compareDate(new Date(item.endTime), date) &&\r\n                        (selectedStartDate === undefined || compareDate(new Date(item.startTime), selectedStartDate))\r\n                );\r\n                this.setState(() => ({\r\n                    source: getSortedSource(result, sortInfo),\r\n                    selectedEndDate: date\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    // reset\r\n    private setSearchSource(): void {\r\n        const { sortInfo, originExperimentList } = this.state;\r\n        let { searchInputVal } = this.state;\r\n        searchInputVal = searchInputVal.trim();\r\n        // hert re-search data for fix this status: filter first -> searchBox search result null -> close filter\r\n        const result = originExperimentList.filter(\r\n            item =>\r\n                item.experimentName.toLowerCase().includes(searchInputVal.toLowerCase()) ||\r\n                item.id.toLowerCase().includes(searchInputVal.toLowerCase())\r\n        );\r\n        this.setState(() => ({\r\n            source: getSortedSource(result, sortInfo),\r\n            selectedStatus: [],\r\n            selectedPlatform: '',\r\n            selectedStartDate: undefined,\r\n            selectedEndDate: undefined\r\n        }));\r\n    }\r\n}\r\n\r\nexport default Experiment;\r\n","import React from 'react';\r\nimport { Stack, Icon, initializeIcons } from '@fluentui/react';\r\nimport { TitleContext } from './TitleContext';\r\nimport '../../static/style/overview/overviewTitle.scss';\r\ninitializeIcons();\r\n\r\nexport const Title = (): any => (\r\n    <TitleContext.Consumer>\r\n        {(value): React.ReactNode => (\r\n            <Stack horizontal className='panelTitle'>\r\n                <Icon iconName={value.icon} />\r\n                <span>{value.text}</span>\r\n            </Stack>\r\n        )}\r\n    </TitleContext.Consumer>\r\n);\r\n","import * as React from 'react';\r\n\r\nexport const TitleContext = React.createContext({\r\n    text: '',\r\n    icon: ''\r\n});\r\n","import React, { useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport copy from 'copy-to-clipboard';\r\nimport { IconButton, FontSizes, TooltipHost } from '@fluentui/react';\r\nimport { TOOLTIP_BACKGROUND_COLOR } from '../../static/const';\r\n\r\nconst COPIED_TOOLTIP_CLOSE_DELAY = 1000;\r\n\r\nconst CopyButton = ({ value, hideTooltip }): any => {\r\n    const ref = useRef(null);\r\n    return (\r\n        <div>\r\n            <IconButton\r\n                iconProps={{ iconName: 'Copy' }}\r\n                styles={{ icon: [{ fontSize: FontSizes.small }] }}\r\n                onClick={(event: React.SyntheticEvent<EventTarget>): void => {\r\n                    event.stopPropagation();\r\n                    copy(value);\r\n                    ref.current && (ref as any).current.show();\r\n                    setTimeout(() => {\r\n                        ref.current !== null && (ref as any).current.dismiss();\r\n                    }, COPIED_TOOLTIP_CLOSE_DELAY);\r\n                }}\r\n                onMouseDown={(e): void => {\r\n                    e.stopPropagation();\r\n                }}\r\n                onMouseUp={(e): void => {\r\n                    e.stopPropagation();\r\n                }}\r\n            />\r\n            <TooltipHost\r\n                hidden={hideTooltip}\r\n                content='Copied'\r\n                componentRef={ref}\r\n                delay={0}\r\n                tooltipProps={{\r\n                    calloutProps: {\r\n                        styles: {\r\n                            beak: { background: TOOLTIP_BACKGROUND_COLOR },\r\n                            beakCurtain: { background: TOOLTIP_BACKGROUND_COLOR },\r\n                            calloutMain: { background: TOOLTIP_BACKGROUND_COLOR }\r\n                        }\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nCopyButton.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    hideTooltip: PropTypes.bool\r\n};\r\n\r\nexport default CopyButton;\r\n"],"names":["ExperimentsManager","experimentList","platform","errorMessage","getExperimentList","this","getPlatformList","getExpErrorMessage","requestAxios","MANAGER_IP","then","data","platforms","Set","item","undefined","port","JSON","parse","add","sort","a","b","startTime","Array","from","catch","error","message","compareDate","date1","date2","getFullYear","getMonth","getDate","filterByStatusOrPlatform","val","type","filter","temp","isArray","length","includes","fillOptions","arr","map","key","text","getSortedSource","source","sortInfo","copyAndSort","field","isDescend","MAXSCREENCOLUMNWIDHT","MINSCREENCOLUMNWIDHT","Hearder","className","Stack","horizontal","StackItem","grow","styles","root","minWidth","display","verticalAlign","NNILOGO","horizontalAlign","tokens","stackTokens","stackStyle","to","CommandBarButton","iconProps","RevToggleKey","TrialIdColumn","React","constructor","props","super","render","id","status","hostname","window","location","webuiPortal","protocol","href","target","rel","CopyButton","value","FilterBtns","selectedStatus","selectedPlatform","selectedStartDate","selectedEndDate","selectStatus","selectPlatform","getSelectedData","setSearchSource","Dropdown","label","selectedKeys","multiSelect","onChange","bind","placeholder","options","EXPERIMENTSTATUS","selectedKey","DatePicker","firstDayOfWeek","DayOfWeek","showMonthPickerAsOverlay","ariaLabel","onSelectDate","DefaultButton","onClick","Icon","iconName","expTokens","childrenGap","Experiment","state","columns","hideFilter","searchInputVal","originExperimentList","searchSource","EXPERIMENTMANAGER","init","result","setState","style","minHeight","innerHeight","MessageInfo","info","typeInfo","TitleContext","icon","Title","SearchBox","onEscape","setOriginSource","onClear","searchNameAndId","clickFilter","DetailsList","items","setKey","compact","selectionMode","onColumnClick","_ev","getColumn","newColumns","slice","currColumn","forEach","newCol","isSortedDescending","isSorted","newItems","fieldName","name","maxWidth","isResizable","onRender","experimentName","expformatTimestamp","endTime","_e","commonSelectString","sortedData","_event","newValue","searchInput","trim","toLowerCase","sortedResult","Date","newSelectedStatus","selected","date","hasPlatform","initializeIcons","hideTooltip","ref","useRef","fontSize","FontSizes","event","stopPropagation","copy","current","show","setTimeout","dismiss","onMouseDown","e","onMouseUp","hidden","content","componentRef","delay","tooltipProps","calloutProps","beak","background","TOOLTIP_BACKGROUND_COLOR","beakCurtain","calloutMain","propTypes","PropTypes"],"sourceRoot":""}