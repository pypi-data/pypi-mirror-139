{"version":3,"file":"d302a073.js","mappings":";AA4DA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;AAoEA;;AApEA;ACYA;AAGA;;ACsDA;AACA;;AAIA;;AAIA;;AAkBA;AACA;AACA;;;AAOA;;AAKA;;;AAOA;AACA;AAGA;;;AAGA;;AAGA;;;;;AAcA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAGA;;;;;AAKA;AACA;;;;;;AAMA;AACA;AACA;;AAEA;;;;;AAKA;;;;;;;;AAoDA;;;AAGA;;;;AAIA;;;;;;;AA7MA;;AC0LA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;;AAKA;;;;;AAKA;AACA;;;AAKA;;;;;;;;AAUA;AACA;AAGA;;;AAGA;;AAEA;;AAEA;;;;;AAKA;AACA;;;AAGA;;AAIA;AAEA;AACA;;AAIA;;;;;AAOA;AACA;AACA;AACA;;;AAKA;AAGA;AACA;AACA;;;;AAIA;AACA;AAGA;AACA;AACA;;;;;;;AAOA;;AAEA;;;AAKA;;;AAKA;;;AAKA;;AAEA;AACA;AAGA;AACA;;;AAGA;;AAOA;AACA;;;;AAIA;;;;AAIA;;;AAbA;;;;;AAuBA;;;;AAMA;AACA;AACA;;;;;;AAQA;AAEA;;AAEA;;;AAKA;;AAIA;;;AAIA;;AAIA;;AAQA;AACA;;;;AAIA;;;;AAIA;;;AAGA;AACA;AACA;AAGA;;;AArBA;;AA2BA;;;AAIA;;;AAKA;;AAIA;AACA;AACA;AACA;;;;;AAOA;AAEA;;;;AAKA;;AAEA;AACA;AACA;;;;;AA1YA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-entities-picker.ts","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/panels/config/scene/ha-scene-dashboard.ts","webpack://home-assistant-frontend/./src/panels/config/scene/ha-scene-editor.ts"],"sourcesContent":["import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { isValidEntityId } from \"../../common/entity/valid_entity_id\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"./ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"./ha-entity-picker\";\n\n@customElement(\"ha-entities-picker\")\nclass HaEntitiesPickerLight extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  /**\n   * Show entities from specific domains.\n   * @type {string}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  @property({ attribute: \"picked-entity-label\" })\n  public pickedEntityLabel?: string;\n\n  @property({ attribute: \"pick-entity-label\" }) public pickEntityLabel?: string;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const currentEntities = this._currentEntities;\n    return html`\n      ${currentEntities.map(\n        (entityId) => html`\n          <div>\n            <ha-entity-picker\n              allow-custom-entity\n              .curValue=${entityId}\n              .hass=${this.hass}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n              .entityFilter=${this._entityFilter}\n              .value=${entityId}\n              .label=${this.pickedEntityLabel}\n              @value-changed=${this._entityChanged}\n            ></ha-entity-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-entity-picker\n          .hass=${this.hass}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n          .entityFilter=${this._entityFilter}\n          .label=${this.pickEntityLabel}\n          @value-changed=${this._addEntity}\n        ></ha-entity-picker>\n      </div>\n    `;\n  }\n\n  private _entityFilter: HaEntityPickerEntityFilterFunc = (\n    stateObj: HassEntity\n  ) => !this.value || !this.value.includes(stateObj.entity_id);\n\n  private get _currentEntities() {\n    return this.value || [];\n  }\n\n  private async _updateEntities(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _entityChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const curValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (\n      newValue === curValue ||\n      (newValue !== \"\" && !isValidEntityId(newValue))\n    ) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (!newValue || currentEntities.includes(newValue)) {\n      this._updateEntities(currentEntities.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateEntities(\n      currentEntities.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private async _addEntity(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateEntities([...currentEntities, toAdd]);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entities-picker\": HaEntitiesPickerLight;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import {\n  mdiHelpCircle,\n  mdiInformationOutline,\n  mdiPencil,\n  mdiPencilOff,\n  mdiPlay,\n  mdiPlus,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { DataTableColumnContainer } from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/ha-button-related-filter-menu\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-state-icon\";\nimport \"../../../components/ha-svg-icon\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport { activateScene, SceneEntity } from \"../../../data/scene\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport { configSections } from \"../ha-panel-config\";\n\n@customElement(\"ha-scene-dashboard\")\nclass HaSceneDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public scenes!: SceneEntity[];\n\n  @property() private _activeFilters?: string[];\n\n  @state() private _filteredScenes?: string[] | null;\n\n  @state() private _filterValue?;\n\n  private _scenes = memoizeOne(\n    (scenes: SceneEntity[], filteredScenes?: string[] | null) => {\n      if (filteredScenes === null) {\n        return [];\n      }\n      return (\n        filteredScenes\n          ? scenes.filter((scene) => filteredScenes!.includes(scene.entity_id))\n          : scenes\n      ).map((scene) => ({\n        ...scene,\n        name: computeStateName(scene),\n      }));\n    }\n  );\n\n  private _columns = memoizeOne(\n    (_language): DataTableColumnContainer => ({\n      activate: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_toggle, scene) =>\n          html`\n            <ha-icon-button\n              .scene=${scene}\n              .label=${this.hass.localize(\n                \"ui.panel.config.scene.picker.activate_scene\"\n              )}\n              .path=${mdiPlay}\n              @click=${this._activateScene}\n            ></ha-icon-button>\n          `,\n      },\n      icon: {\n        title: \"\",\n        type: \"icon\",\n        template: (_, scene) =>\n          html` <ha-state-icon .state=${scene}></ha-state-icon> `,\n      },\n      name: {\n        title: this.hass.localize(\"ui.panel.config.scene.picker.headers.name\"),\n        sortable: true,\n        filterable: true,\n        direction: \"asc\",\n        grows: true,\n      },\n      info: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_info, scene) => html`\n          <ha-icon-button\n            .scene=${scene}\n            @click=${this._showInfo}\n            .label=${this.hass.localize(\n              \"ui.panel.config.scene.picker.show_info_scene\"\n            )}\n            .path=${mdiInformationOutline}\n          ></ha-icon-button>\n        `,\n      },\n      edit: {\n        title: \"\",\n        type: \"icon-button\",\n        template: (_info, scene: any) => html`\n          <a\n            href=${ifDefined(\n              scene.attributes.id\n                ? `/config/scene/edit/${scene.attributes.id}`\n                : undefined\n            )}\n          >\n            <ha-icon-button\n              .disabled=${!scene.attributes.id}\n              .label=${this.hass.localize(\n                \"ui.panel.config.scene.picker.edit_scene\"\n              )}\n              .path=${scene.attributes.id ? mdiPencil : mdiPencilOff}\n            ></ha-icon-button>\n          </a>\n          ${!scene.attributes.id\n            ? html`\n                <paper-tooltip animation-delay=\"0\" position=\"left\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.scene.picker.only_editable\"\n                  )}\n                </paper-tooltip>\n              `\n            : \"\"}\n        `,\n      },\n    })\n  );\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.automations}\n        .columns=${this._columns(this.hass.language)}\n        id=\"entity_id\"\n        .data=${this._scenes(this.scenes, this._filteredScenes)}\n        .activeFilters=${this._activeFilters}\n        .noDataText=${this.hass.localize(\n          \"ui.panel.config.scene.picker.no_scenes\"\n        )}\n        @clear-filter=${this._clearFilter}\n        hasFab\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          @click=${this._showHelp}\n          .label=${this.hass.localize(\"ui.common.help\")}\n          .path=${mdiHelpCircle}\n        ></ha-icon-button>\n        <ha-button-related-filter-menu\n          slot=\"filter-menu\"\n          corner=\"BOTTOM_START\"\n          .narrow=${this.narrow}\n          .hass=${this.hass}\n          .value=${this._filterValue}\n          exclude-domains='[\"scene\"]'\n          @related-changed=${this._relatedFilterChanged}\n        >\n        </ha-button-related-filter-menu>\n        <a href=\"/config/scene/edit/new\" slot=\"fab\">\n          <ha-fab\n            .label=${this.hass.localize(\n              \"ui.panel.config.scene.picker.add_scene\"\n            )}\n            extended\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n          </ha-fab>\n        </a>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _relatedFilterChanged(ev: CustomEvent) {\n    this._filterValue = ev.detail.value;\n    if (!this._filterValue) {\n      this._clearFilter();\n      return;\n    }\n    this._activeFilters = [ev.detail.filter];\n    this._filteredScenes = ev.detail.items.scene || null;\n  }\n\n  private _clearFilter() {\n    this._filteredScenes = undefined;\n    this._activeFilters = undefined;\n    this._filterValue = undefined;\n  }\n\n  private _showInfo(ev) {\n    ev.stopPropagation();\n    const entityId = ev.currentTarget.scene.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private _activateScene = async (ev) => {\n    ev.stopPropagation();\n    const scene = ev.currentTarget.scene as SceneEntity;\n    await activateScene(this.hass, scene.entity_id);\n    showToast(this, {\n      message: this.hass.localize(\n        \"ui.panel.config.scene.activated\",\n        \"name\",\n        computeStateName(scene)\n      ),\n    });\n    forwardHaptic(\"light\");\n  };\n\n  private _showHelp() {\n    showAlertDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.scene.picker.header\"),\n      text: html`\n        ${this.hass.localize(\"ui.panel.config.scene.picker.introduction\")}\n        <p>\n          <a\n            href=${documentationUrl(this.hass, \"/docs/scene/editor/\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            ${this.hass.localize(\"ui.panel.config.scene.picker.learn_more\")}\n          </a>\n        </p>\n      `,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-scene-dashboard\": HaSceneDashboard;\n  }\n}\n","import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiContentDuplicate,\n  mdiContentSave,\n  mdiDelete,\n  mdiDotsVertical,\n} from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { HassEvent } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { navigate } from \"../../../common/navigate\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport \"../../../components/device/ha-device-picker\";\nimport \"../../../components/entity/ha-entities-picker\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-svg-icon\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport {\n  activateScene,\n  applyScene,\n  deleteScene,\n  getSceneConfig,\n  getSceneEditorInitData,\n  saveScene,\n  SceneConfig,\n  SceneEntities,\n  SceneEntity,\n  SCENE_IGNORED_DOMAINS,\n  showSceneEditor,\n} from \"../../../data/scene\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\n\ninterface DeviceEntities {\n  id: string;\n  name: string;\n  entities: string[];\n}\n\ninterface DeviceEntitiesLookup {\n  [deviceId: string]: string[];\n}\n\n@customElement(\"ha-scene-editor\")\nexport class HaSceneEditor extends SubscribeMixin(\n  KeyboardShortcutMixin(LitElement)\n) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public route!: Route;\n\n  @property() public sceneId: string | null = null;\n\n  @property() public scenes!: SceneEntity[];\n\n  @property() public showAdvanced!: boolean;\n\n  @state() private _dirty = false;\n\n  @state() private _errors?: string;\n\n  @state() private _config?: SceneConfig;\n\n  @state() private _entities: string[] = [];\n\n  @state() private _devices: string[] = [];\n\n  @state()\n  private _deviceRegistryEntries: DeviceRegistryEntry[] = [];\n\n  @state()\n  private _entityRegistryEntries: EntityRegistryEntry[] = [];\n\n  @state() private _scene?: SceneEntity;\n\n  private _storedStates: SceneEntities = {};\n\n  private _unsubscribeEvents?: () => void;\n\n  @state() private _deviceEntityLookup: DeviceEntitiesLookup = {};\n\n  private _activateContextId?: string;\n\n  @state() private _saving = false;\n\n  // undefined means not set in this session\n  // null means picked nothing.\n  @state() private _updatedAreaId?: string | null;\n\n  // Callback to be called when scene is set.\n  private _scenesSet?: () => void;\n\n  private _getRegistryAreaId = memoizeOne(\n    (entries: EntityRegistryEntry[], entity_id: string) => {\n      const entry = entries.find((ent) => ent.entity_id === entity_id);\n      return entry ? entry.area_id : null;\n    }\n  );\n\n  private _getEntitiesDevices = memoizeOne(\n    (\n      entities: string[],\n      devices: string[],\n      deviceEntityLookup: DeviceEntitiesLookup,\n      deviceRegs: DeviceRegistryEntry[]\n    ) => {\n      const outputDevices: DeviceEntities[] = [];\n\n      if (devices.length) {\n        const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n        for (const device of deviceRegs) {\n          deviceLookup[device.id] = device;\n        }\n\n        devices.forEach((deviceId) => {\n          const device = deviceLookup[deviceId];\n          const deviceEntities: string[] = deviceEntityLookup[deviceId] || [];\n          outputDevices.push({\n            name: computeDeviceName(\n              device,\n              this.hass,\n              this._deviceEntityLookup[device.id]\n            ),\n            id: device.id,\n            entities: deviceEntities,\n          });\n        });\n      }\n\n      const outputEntities: string[] = [];\n\n      entities.forEach((entity) => {\n        if (!outputDevices.find((device) => device.entities.includes(entity))) {\n          outputEntities.push(entity);\n        }\n      });\n\n      return { devices: outputDevices, entities: outputEntities };\n    }\n  );\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubscribeEvents) {\n      this._unsubscribeEvents();\n      this._unsubscribeEvents = undefined;\n    }\n  }\n\n  public hassSubscribe() {\n    return [\n      subscribeEntityRegistry(this.hass.connection, (entries) => {\n        this._entityRegistryEntries = entries;\n      }),\n      subscribeDeviceRegistry(this.hass.connection, (entries) => {\n        this._deviceRegistryEntries = entries;\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n    const { devices, entities } = this._getEntitiesDevices(\n      this._entities,\n      this._devices,\n      this._deviceEntityLookup,\n      this._deviceRegistryEntries\n    );\n    const name = this._scene\n      ? computeStateName(this._scene)\n      : this.hass.localize(\"ui.panel.config.scene.editor.default_name\");\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .tabs=${configSections.automations}\n      >\n        <ha-button-menu\n          corner=\"BOTTOM_START\"\n          slot=\"toolbar-icon\"\n          @action=${this._handleMenuAction}\n          activatable\n        >\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <mwc-list-item\n            .disabled=${!this.sceneId}\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.scene.picker.duplicate_scene\"\n            )}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\n              \"ui.panel.config.scene.picker.duplicate_scene\"\n            )}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            .disabled=${!this.sceneId}\n            aria-label=${this.hass.localize(\n              \"ui.panel.config.scene.picker.delete_scene\"\n            )}\n            class=${classMap({ warning: Boolean(this.sceneId) })}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\"ui.panel.config.scene.picker.delete_scene\")}\n            <ha-svg-icon\n              class=${classMap({ warning: Boolean(this.sceneId) })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </mwc-list-item>\n        </ha-button-menu>\n        ${this._errors ? html` <div class=\"errors\">${this._errors}</div> ` : \"\"}\n        ${this.narrow ? html` <span slot=\"header\">${name}</span> ` : \"\"}\n        <div\n          id=\"root\"\n          class=${classMap({\n            rtl: computeRTL(this.hass),\n          })}\n        >\n          ${this._config\n            ? html`\n                <ha-config-section vertical .isWide=${this.isWide}>\n                  ${!this.narrow\n                    ? html` <span slot=\"header\">${name}</span> `\n                    : \"\"}\n                  <div slot=\"introduction\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.scene.editor.introduction\"\n                    )}\n                  </div>\n                  <ha-card>\n                    <div class=\"card-content\">\n                      <paper-input\n                        .value=${this._config.name}\n                        .name=${\"name\"}\n                        @value-changed=${this._valueChanged}\n                        label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.name\"\n                        )}\n                      ></paper-input>\n                      <ha-icon-picker\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.icon\"\n                        )}\n                        .name=${\"icon\"}\n                        .value=${this._config.icon}\n                        @value-changed=${this._valueChanged}\n                      >\n                      </ha-icon-picker>\n                      <ha-area-picker\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.area\"\n                        )}\n                        .name=${\"area\"}\n                        .value=${this._sceneAreaIdWithUpdates || \"\"}\n                        @value-changed=${this._areaChanged}\n                      >\n                      </ha-area-picker>\n                    </div>\n                  </ha-card>\n                </ha-config-section>\n\n                <ha-config-section vertical .isWide=${this.isWide}>\n                  <div slot=\"header\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.scene.editor.devices.header\"\n                    )}\n                  </div>\n                  <div slot=\"introduction\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.scene.editor.devices.introduction\"\n                    )}\n                  </div>\n\n                  ${devices.map(\n                    (device) =>\n                      html`\n                        <ha-card>\n                          <h1 class=\"card-header\">\n                            ${device.name}\n                            <ha-icon-button\n                              .path=${mdiDelete}\n                              .label=${this.hass.localize(\n                                \"ui.panel.config.scene.editor.devices.delete\"\n                              )}\n                              .device=${device.id}\n                              @click=${this._deleteDevice}\n                            ></ha-icon-button>\n                          </h1>\n                          ${device.entities.map((entityId) => {\n                            const entityStateObj = this.hass.states[entityId];\n                            if (!entityStateObj) {\n                              return html``;\n                            }\n                            return html`\n                              <paper-icon-item\n                                .entityId=${entityId}\n                                @click=${this._showMoreInfo}\n                                class=\"device-entity\"\n                              >\n                                <state-badge\n                                  .stateObj=${entityStateObj}\n                                  slot=\"item-icon\"\n                                ></state-badge>\n                                <paper-item-body>\n                                  ${computeStateName(entityStateObj)}\n                                </paper-item-body>\n                              </paper-icon-item>\n                            `;\n                          })}\n                        </ha-card>\n                      `\n                  )}\n\n                  <ha-card\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.scene.editor.devices.add\"\n                    )}\n                  >\n                    <div class=\"card-content\">\n                      <ha-device-picker\n                        @value-changed=${this._devicePicked}\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.devices.add\"\n                        )}\n                      ></ha-device-picker>\n                    </div>\n                  </ha-card>\n                </ha-config-section>\n\n                ${this.showAdvanced\n                  ? html`\n                      <ha-config-section vertical .isWide=${this.isWide}>\n                        <div slot=\"header\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.scene.editor.entities.header\"\n                          )}\n                        </div>\n                        <div slot=\"introduction\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.scene.editor.entities.introduction\"\n                          )}\n                        </div>\n                        ${entities.length\n                          ? html`\n                              <ha-card\n                                class=\"entities\"\n                                .header=${this.hass.localize(\n                                  \"ui.panel.config.scene.editor.entities.without_device\"\n                                )}\n                              >\n                                ${entities.map((entityId) => {\n                                  const entityStateObj =\n                                    this.hass.states[entityId];\n                                  if (!entityStateObj) {\n                                    return html``;\n                                  }\n                                  return html`\n                                    <paper-icon-item\n                                      .entityId=${entityId}\n                                      @click=${this._showMoreInfo}\n                                      class=\"device-entity\"\n                                    >\n                                      <state-badge\n                                        .stateObj=${entityStateObj}\n                                        slot=\"item-icon\"\n                                      ></state-badge>\n                                      <paper-item-body>\n                                        ${computeStateName(entityStateObj)}\n                                      </paper-item-body>\n                                      <ha-icon-button\n                                        .path=${mdiDelete}\n                                        .entityId=${entityId}\n                                        .label=${this.hass.localize(\n                                          \"ui.panel.config.scene.editor.entities.delete\"\n                                        )}\n                                        @click=${this._deleteEntity}\n                                      ></ha-icon-button>\n                                    </paper-icon-item>\n                                  `;\n                                })}\n                              </ha-card>\n                            `\n                          : \"\"}\n\n                        <ha-card\n                          header=${this.hass.localize(\n                            \"ui.panel.config.scene.editor.entities.add\"\n                          )}\n                        >\n                          <div class=\"card-content\">\n                            ${this.hass.localize(\n                              \"ui.panel.config.scene.editor.entities.device_entities\"\n                            )}\n                            <ha-entity-picker\n                              @value-changed=${this._entityPicked}\n                              .excludeDomains=${SCENE_IGNORED_DOMAINS}\n                              .hass=${this.hass}\n                              label=${this.hass.localize(\n                                \"ui.panel.config.scene.editor.entities.add\"\n                              )}\n                            ></ha-entity-picker>\n                          </div>\n                        </ha-card>\n                      </ha-config-section>\n                    `\n                  : \"\"}\n              `\n            : \"\"}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.panel.config.scene.editor.save\")}\n          extended\n          .disabled=${this._saving}\n          @click=${this._saveScene}\n          class=${classMap({ dirty: this._dirty, saving: this._saving })}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const oldscene = changedProps.get(\"sceneId\");\n\n    if (\n      changedProps.has(\"sceneId\") &&\n      this.sceneId &&\n      this.hass &&\n      // Only refresh config if we picked a new scene. If same ID, don't fetch it.\n      (!oldscene || oldscene !== this.sceneId)\n    ) {\n      this._loadConfig();\n    }\n\n    if (changedProps.has(\"sceneId\") && !this.sceneId && this.hass) {\n      this._dirty = false;\n      const initData = getSceneEditorInitData();\n      this._config = {\n        name: this.hass.localize(\"ui.panel.config.scene.editor.default_name\"),\n        entities: {},\n        ...initData?.config,\n      };\n      this._initEntities(this._config);\n      if (initData?.areaId) {\n        this._updatedAreaId = initData.areaId;\n      }\n      this._dirty =\n        initData !== undefined &&\n        (initData.areaId !== undefined || initData.config !== undefined);\n    }\n\n    if (changedProps.has(\"_entityRegistryEntries\")) {\n      for (const entity of this._entityRegistryEntries) {\n        if (\n          !entity.device_id ||\n          SCENE_IGNORED_DOMAINS.includes(computeDomain(entity.entity_id))\n        ) {\n          continue;\n        }\n        if (!(entity.device_id in this._deviceEntityLookup)) {\n          this._deviceEntityLookup[entity.device_id] = [];\n        }\n        if (\n          !this._deviceEntityLookup[entity.device_id].includes(entity.entity_id)\n        ) {\n          this._deviceEntityLookup[entity.device_id].push(entity.entity_id);\n        }\n        if (\n          this._entities.includes(entity.entity_id) &&\n          !this._devices.includes(entity.device_id)\n        ) {\n          this._devices = [...this._devices, entity.device_id];\n        }\n      }\n    }\n    if (\n      changedProps.has(\"scenes\") &&\n      this.sceneId &&\n      this._config &&\n      !this._scene\n    ) {\n      this._setScene();\n    }\n    if (this._scenesSet && changedProps.has(\"scenes\")) {\n      this._scenesSet();\n    }\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._duplicate();\n        break;\n      case 1:\n        this._deleteTapped();\n        break;\n    }\n  }\n\n  private async _setScene() {\n    const scene = this.scenes.find(\n      (entity: SceneEntity) => entity.attributes.id === this.sceneId\n    );\n    if (!scene) {\n      return;\n    }\n    this._scene = scene;\n    const { context } = await activateScene(this.hass, this._scene.entity_id);\n    this._activateContextId = context.id;\n    this._unsubscribeEvents =\n      await this.hass!.connection.subscribeEvents<HassEvent>(\n        (event) => this._stateChanged(event),\n        \"state_changed\"\n      );\n  }\n\n  private _showMoreInfo(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _loadConfig() {\n    let config: SceneConfig;\n    try {\n      config = await getSceneConfig(this.hass, this.sceneId!);\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text:\n          err.status_code === 404\n            ? this.hass.localize(\n                \"ui.panel.config.scene.editor.load_error_not_editable\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.scene.editor.load_error_unknown\",\n                \"err_no\",\n                err.status_code\n              ),\n      });\n      history.back();\n      return;\n    }\n\n    if (!config.entities) {\n      config.entities = {};\n    }\n\n    this._initEntities(config);\n\n    this._setScene();\n\n    this._dirty = false;\n    this._config = config;\n  }\n\n  private _initEntities(config: SceneConfig) {\n    this._entities = Object.keys(config.entities);\n    this._entities.forEach((entity) => this._storeState(entity));\n\n    const filteredEntityReg = this._entityRegistryEntries.filter((entityReg) =>\n      this._entities.includes(entityReg.entity_id)\n    );\n    this._devices = [];\n\n    for (const entityReg of filteredEntityReg) {\n      if (!entityReg.device_id) {\n        continue;\n      }\n      if (!this._devices.includes(entityReg.device_id)) {\n        this._devices = [...this._devices, entityReg.device_id];\n      }\n    }\n  }\n\n  private _entityPicked(ev: CustomEvent) {\n    const entityId = ev.detail.value;\n    (ev.target as any).value = \"\";\n    if (this._entities.includes(entityId)) {\n      return;\n    }\n    const entityRegistry = this._entityRegistryEntries.find(\n      (entityReg) => entityReg.entity_id === entityId\n    );\n    if (\n      entityRegistry?.device_id &&\n      !this._devices.includes(entityRegistry.device_id)\n    ) {\n      this._pickDevice(entityRegistry.device_id);\n    } else {\n      this._entities = [...this._entities, entityId];\n      this._storeState(entityId);\n    }\n    this._dirty = true;\n  }\n\n  private _deleteEntity(ev: Event) {\n    ev.stopPropagation();\n    const deleteEntityId = (ev.target as any).entityId;\n    this._entities = this._entities.filter(\n      (entityId) => entityId !== deleteEntityId\n    );\n    this._dirty = true;\n  }\n\n  private _pickDevice(device_id: string) {\n    if (this._devices.includes(device_id)) {\n      return;\n    }\n    this._devices = [...this._devices, device_id];\n    const deviceEntities = this._deviceEntityLookup[device_id];\n    if (!deviceEntities) {\n      return;\n    }\n    this._entities = [...this._entities, ...deviceEntities];\n    deviceEntities.forEach((entityId) => {\n      this._storeState(entityId);\n    });\n    this._dirty = true;\n  }\n\n  private _devicePicked(ev: CustomEvent) {\n    const device = ev.detail.value;\n    (ev.target as any).value = \"\";\n    this._pickDevice(device);\n  }\n\n  private _deleteDevice(ev: Event) {\n    const deviceId = (ev.target as any).device;\n    this._devices = this._devices.filter((device) => device !== deviceId);\n    const deviceEntities = this._deviceEntityLookup[deviceId];\n    if (!deviceEntities) {\n      return;\n    }\n    this._entities = this._entities.filter(\n      (entityId) => !deviceEntities.includes(entityId)\n    );\n    this._dirty = true;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const name = target.name;\n    if (!name) {\n      return;\n    }\n    let newVal = ev.detail.value;\n    if (target.type === \"number\") {\n      newVal = Number(newVal);\n    }\n    if ((this._config![name] || \"\") === newVal) {\n      return;\n    }\n    if (!newVal) {\n      delete this._config![name];\n      this._config = { ...this._config! };\n    } else {\n      this._config = { ...this._config!, [name]: newVal };\n    }\n    this._dirty = true;\n  }\n\n  private _areaChanged(ev: CustomEvent) {\n    const newValue = ev.detail.value === \"\" ? null : ev.detail.value;\n\n    if (newValue === (this._sceneAreaIdWithUpdates || \"\")) {\n      return;\n    }\n\n    if (newValue === this._sceneAreaIdCurrent) {\n      this._updatedAreaId = undefined;\n    } else {\n      this._updatedAreaId = newValue;\n      this._dirty = true;\n    }\n  }\n\n  private _stateChanged(event: HassEvent) {\n    if (\n      event.context.id !== this._activateContextId &&\n      this._entities.includes(event.data.entity_id)\n    ) {\n      this._dirty = true;\n    }\n  }\n\n  private _backTapped = (): void => {\n    if (this._dirty) {\n      showConfirmationDialog(this, {\n        text: this.hass!.localize(\n          \"ui.panel.config.scene.editor.unsaved_confirm\"\n        ),\n        confirmText: this.hass!.localize(\"ui.common.leave\"),\n        dismissText: this.hass!.localize(\"ui.common.stay\"),\n        confirm: () => this._goBack(),\n      });\n    } else {\n      this._goBack();\n    }\n  };\n\n  private _goBack(): void {\n    applyScene(this.hass, this._storedStates);\n    history.back();\n  }\n\n  private _deleteTapped(): void {\n    showConfirmationDialog(this, {\n      text: this.hass!.localize(\"ui.panel.config.scene.picker.delete_confirm\"),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(),\n    });\n  }\n\n  private async _delete(): Promise<void> {\n    await deleteScene(this.hass, this.sceneId!);\n    applyScene(this.hass, this._storedStates);\n    history.back();\n  }\n\n  private async _duplicate() {\n    if (this._dirty) {\n      if (\n        !(await showConfirmationDialog(this, {\n          text: this.hass!.localize(\n            \"ui.panel.config.scene.editor.unsaved_confirm\"\n          ),\n          confirmText: this.hass!.localize(\"ui.common.leave\"),\n          dismissText: this.hass!.localize(\"ui.common.stay\"),\n        }))\n      ) {\n        return;\n      }\n      // Wait for dialog to complete closing\n      await new Promise((resolve) => setTimeout(resolve, 0));\n    }\n    showSceneEditor(\n      {\n        ...this._config,\n        id: undefined,\n        name: `${this._config?.name} (${this.hass.localize(\n          \"ui.panel.config.scene.picker.duplicate\"\n        )})`,\n      },\n      this._sceneAreaIdCurrent || undefined\n    );\n  }\n\n  private _calculateStates(): SceneEntities {\n    const output: SceneEntities = {};\n    this._entities.forEach((entityId) => {\n      const entityState = this._getCurrentState(entityId);\n      if (entityState) {\n        output[entityId] = entityState;\n      }\n    });\n    return output;\n  }\n\n  private _storeState(entityId: string): void {\n    if (entityId in this._storedStates) {\n      return;\n    }\n    const entityState = this._getCurrentState(entityId);\n    if (!entityState) {\n      return;\n    }\n    this._storedStates[entityId] = entityState;\n  }\n\n  private _getCurrentState(entityId: string) {\n    const stateObj = this.hass.states[entityId];\n    if (!stateObj) {\n      return undefined;\n    }\n    return { ...stateObj.attributes, state: stateObj.state };\n  }\n\n  private async _saveScene(): Promise<void> {\n    const id = !this.sceneId ? \"\" + Date.now() : this.sceneId!;\n    this._config = { ...this._config!, entities: this._calculateStates() };\n    try {\n      this._saving = true;\n      await saveScene(this.hass, id, this._config);\n\n      if (this._updatedAreaId !== undefined) {\n        let scene =\n          this._scene ||\n          this.scenes.find(\n            (entity: SceneEntity) => entity.attributes.id === id\n          );\n\n        if (!scene) {\n          try {\n            await new Promise<void>((resolve, reject) => {\n              setTimeout(reject, 3000);\n              this._scenesSet = resolve;\n            });\n            scene = this.scenes.find(\n              (entity: SceneEntity) => entity.attributes.id === id\n            );\n          } catch (err) {\n            // We do nothing.\n          } finally {\n            this._scenesSet = undefined;\n          }\n        }\n\n        if (scene) {\n          await updateEntityRegistryEntry(this.hass, scene.entity_id, {\n            area_id: this._updatedAreaId,\n          });\n        }\n\n        this._updatedAreaId = undefined;\n      }\n\n      this._dirty = false;\n\n      if (!this.sceneId) {\n        navigate(`/config/scene/edit/${id}`, { replace: true });\n      }\n    } catch (err: any) {\n      this._errors = err.body.message || err.message;\n      showToast(this, {\n        message: err.body.message || err.message,\n      });\n      throw err;\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  protected handleKeyboardSave() {\n    this._saveScene();\n  }\n\n  private get _sceneAreaIdWithUpdates(): string | undefined | null {\n    return this._updatedAreaId !== undefined\n      ? this._updatedAreaId\n      : this._sceneAreaIdCurrent;\n  }\n\n  private get _sceneAreaIdCurrent(): string | undefined | null {\n    return this._scene\n      ? this._getRegistryAreaId(\n          this._entityRegistryEntries,\n          this._scene.entity_id\n        )\n      : undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          overflow: hidden;\n        }\n        .errors {\n          padding: 20px;\n          font-weight: bold;\n          color: var(--error-color);\n        }\n        ha-config-section:last-child {\n          padding-bottom: 20px;\n        }\n        .triggers,\n        .script {\n          margin-top: -16px;\n        }\n        .triggers ha-card,\n        .script ha-card {\n          margin-top: 16px;\n        }\n        .add-card mwc-button {\n          display: block;\n          text-align: center;\n        }\n        .card-menu {\n          position: absolute;\n          top: 0;\n          right: 0;\n          z-index: 1;\n          color: var(--primary-text-color);\n        }\n        .rtl .card-menu {\n          right: auto;\n          left: 0;\n        }\n        .card-menu paper-item {\n          cursor: pointer;\n        }\n        paper-icon-item {\n          padding: 8px 16px;\n        }\n        ha-card ha-icon-button {\n          color: var(--secondary-text-color);\n        }\n        .card-header > ha-icon-button {\n          float: right;\n          position: relative;\n          top: -8px;\n        }\n        .device-entity {\n          cursor: pointer;\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        ha-fab.saving {\n          opacity: var(--light-disabled-opacity);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-scene-editor\": HaSceneEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}