{"version":3,"file":"66fe8968.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;ACCA;;;;AAIA;AACA;AACA;AACA;;;;AA9BA;;;;;;;;AAAA;ACMA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;;;;ACjBA;;;;;;;;;;;;;;;;;ACAA;AC8DA;;AAGA;;;AAIA;;;;AAIA;;;AAKA;;AAGA;AACA;AACA;;;AAIA;AAEA;AAEA;;AAIA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AA9FA;;;AC+FA;AACA;;AAKA;;AAGA;;;AAKA;;;;;;;;;AASA;AACA;AACA;;;;;AAOA;;;;;;;;;AASA;AACA;AACA;;;;;AAMA;;;;;AAKA;AACA;AACA;;;;;;;AAQA;;;AAGA;;AAMA;AACA;;AAEA;AACA;AACA;;;;;;AAQA;AAGA;AACA;;;;;AAOA;;;AAGA;;;;AAIA;;;;;AAKA;;AAIA;;AAIA;AAKA;AACA;;;AAKA;;;;AAMA;AACA;AACA;;;;;;;AAUA;AACA;;;;AAIA;;;;;;AAQA;;;AAGA;AAGA;;;;AAMA;AAGA;;;;AAMA;;;;AAMA;;;;;AAOA;;AAEA;;;;AAMA;;AAGA;;;;AAMA;;;AAKA;AACA;;;AAKA;;AAGA;AACA;;AAEA;;;;;;AAQA;;;AAKA;AAEA;;;AAIA;;;AAGA;;;AAIA;;;AAIA;AACA;;AAEA;;;;;AAOA;;AAIA;;AAKA;AAEA;;;AAIA;;;AAGA;;;AAIA;;;AAIA;AACA;;AAEA;;;AAKA;AACA;;;;AAIA;;AAIA;;;;;;AAOA;AAEA;;AAEA;;;AAKA;AAEA;;;AAIA;;;AAGA;;;AAIA;;;AAIA;AACA;;AAEA;;AAIA;;;;;AAKA;;;;AAMA;AACA;AACA;;AAjXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9DA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/components/ha-qr-scanner.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zwave_js/dialog-zwave_js-add-node.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import \"@material/mwc-menu\";\nimport type { Corner, Menu } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\"></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__actions span:nth-child(1) {\n          flex: var(--secondary-action-button-flex, unset);\n        }\n        .mdc-dialog__actions span:nth-child(2) {\n          flex: var(--primary-action-button-flex, unset);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n          border-radius: var(\n            --ha-dialog-border-radius,\n            var(--ha-card-border-radius, 4px)\n          );\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { Formfield } from \"@material/mwc-formfield\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\n// @ts-expect-error\nexport class HaFormfield extends Formfield {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Formfield.styles,\n      css`\n        :host(:not([alignEnd])) ::slotted(ha-switch) {\n          margin-right: 10px;\n        }\n        :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n          margin-left: 10px;\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { Switch } from \"@material/mwc-switch/deprecated\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\n// @ts-expect-error\nexport class HaSwitch extends Switch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      Switch.styles,\n      css`\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-select/mwc-select\";\nimport \"@material/mwc-textfield/mwc-textfield\";\nimport type { TextField } from \"@material/mwc-textfield/mwc-textfield\";\nimport { mdiCamera } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport type QrScanner from \"qr-scanner\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport \"./ha-alert\";\nimport \"./ha-button-menu\";\nimport \"@material/mwc-button/mwc-button\";\n\n@customElement(\"ha-qr-scanner\")\nclass HaQrScanner extends LitElement {\n  @property() localize!: LocalizeFunc;\n\n  @state() private _cameras?: QrScanner.Camera[];\n\n  @state() private _error?: string;\n\n  private _qrScanner?: QrScanner;\n\n  private _qrNotFoundCount = 0;\n\n  @query(\"video\", true) private _video!: HTMLVideoElement;\n\n  @query(\"#canvas-container\", true) private _canvasContainer!: HTMLDivElement;\n\n  @query(\"mwc-textfield\") private _manualInput?: TextField;\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._qrNotFoundCount = 0;\n    if (this._qrScanner) {\n      this._qrScanner.stop();\n      this._qrScanner.destroy();\n      this._qrScanner = undefined;\n    }\n    while (this._canvasContainer.lastChild) {\n      this._canvasContainer.removeChild(this._canvasContainer.lastChild);\n    }\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hasUpdated && navigator.mediaDevices) {\n      this._loadQrScanner();\n    }\n  }\n\n  protected firstUpdated() {\n    if (navigator.mediaDevices) {\n      this._loadQrScanner();\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"_error\") && this._error) {\n      fireEvent(this, \"qr-code-error\", { message: this._error });\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`${this._error\n      ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n      : \"\"}\n    ${navigator.mediaDevices\n      ? html`<video></video>\n          <div id=\"canvas-container\">\n            ${this._cameras && this._cameras.length > 1\n              ? html`<ha-button-menu\n                  corner=\"BOTTOM_START\"\n                  fixed\n                  @closed=${stopPropagation}\n                >\n                  <ha-icon-button\n                    slot=\"trigger\"\n                    .label=${this.localize(\n                      \"ui.components.qr-scanner.select_camera\"\n                    )}\n                    .path=${mdiCamera}\n                  ></ha-icon-button>\n                  ${this._cameras!.map(\n                    (camera) => html`\n                      <mwc-list-item\n                        .value=${camera.id}\n                        @click=${this._cameraChanged}\n                        >${camera.label}</mwc-list-item\n                      >\n                    `\n                  )}\n                </ha-button-menu>`\n              : \"\"}\n          </div>`\n      : html`<ha-alert alert-type=\"warning\">\n            ${!window.isSecureContext\n              ? this.localize(\"ui.components.qr-scanner.only_https_supported\")\n              : this.localize(\"ui.components.qr-scanner.not_supported\")}\n          </ha-alert>\n          <p>${this.localize(\"ui.components.qr-scanner.manual_input\")}</p>\n          <div class=\"row\">\n            <mwc-textfield\n              .label=${this.localize(\"ui.components.qr-scanner.enter_qr_code\")}\n              @keyup=${this._manualKeyup}\n              @paste=${this._manualPaste}\n            ></mwc-textfield>\n            <mwc-button @click=${this._manualSubmit}\n              >${this.localize(\"ui.common.submit\")}</mwc-button\n            >\n          </div>`}`;\n  }\n\n  private async _loadQrScanner() {\n    const QrScanner = (await import(\"qr-scanner\")).default;\n    if (!(await QrScanner.hasCamera())) {\n      this._error = \"No camera found\";\n      return;\n    }\n    QrScanner.WORKER_PATH = \"/static/js/qr-scanner-worker.min.js\";\n    this._listCameras(QrScanner);\n    this._qrScanner = new QrScanner(\n      this._video,\n      this._qrCodeScanned,\n      this._qrCodeError\n    );\n    // @ts-ignore\n    const canvas = this._qrScanner.$canvas;\n    this._canvasContainer.appendChild(canvas);\n    canvas.style.display = \"block\";\n    try {\n      await this._qrScanner.start();\n    } catch (err: any) {\n      this._error = err;\n    }\n  }\n\n  private async _listCameras(qrScanner: typeof QrScanner): Promise<void> {\n    this._cameras = await qrScanner.listCameras(true);\n  }\n\n  private _qrCodeError = (err: any) => {\n    if (err === \"No QR code found\") {\n      this._qrNotFoundCount++;\n      if (this._qrNotFoundCount === 250) {\n        this._error = err;\n      }\n      return;\n    }\n    this._error = err.message || err;\n    // eslint-disable-next-line no-console\n    console.log(err);\n  };\n\n  private _qrCodeScanned = async (qrCodeString: string): Promise<void> => {\n    this._qrNotFoundCount = 0;\n    fireEvent(this, \"qr-code-scanned\", { value: qrCodeString });\n  };\n\n  private _manualKeyup(ev: KeyboardEvent) {\n    if (ev.key === \"Enter\") {\n      this._qrCodeScanned((ev.target as TextField).value);\n    }\n  }\n\n  private _manualPaste(ev: ClipboardEvent) {\n    this._qrCodeScanned(\n      // @ts-ignore\n      (ev.clipboardData || window.clipboardData).getData(\"text\")\n    );\n  }\n\n  private _manualSubmit() {\n    this._qrCodeScanned(this._manualInput!.value);\n  }\n\n  private _cameraChanged(ev: CustomEvent): void {\n    this._qrScanner?.setCamera((ev.target as any).value);\n  }\n\n  static styles = css`\n    canvas {\n      width: 100%;\n    }\n    #canvas-container {\n      position: relative;\n    }\n    ha-button-menu {\n      position: absolute;\n      bottom: 8px;\n      right: 8px;\n      background: #727272b2;\n      color: white;\n      border-radius: 50%;\n    }\n    .row {\n      display: flex;\n      align-items: center;\n    }\n    mwc-textfield {\n      flex: 1;\n      margin-right: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"qr-code-scanned\": { value: string };\n    \"qr-code-error\": { message: string };\n  }\n\n  interface HTMLElementTagNameMap {\n    \"ha-qr-scanner\": HaQrScanner;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-textfield/mwc-textfield\";\nimport { mdiAlertCircle, mdiCheckCircle, mdiQrcodeScan } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-alert\";\nimport { HaCheckbox } from \"../../../../../components/ha-checkbox\";\nimport \"../../../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport \"../../../../../components/ha-formfield\";\nimport \"../../../../../components/ha-radio\";\nimport \"../../../../../components/ha-switch\";\nimport {\n  zwaveGrantSecurityClasses,\n  InclusionStrategy,\n  MINIMUM_QR_STRING_LENGTH,\n  zwaveParseQrCode,\n  provisionZwaveSmartStartNode,\n  QRProvisioningInformation,\n  RequestedGrant,\n  SecurityClass,\n  stopZwaveInclusion,\n  subscribeAddZwaveNode,\n  zwaveSupportsFeature,\n  zwaveValidateDskAndEnterPin,\n  ZWaveFeature,\n  PlannedProvisioningEntry,\n} from \"../../../../../data/zwave_js\";\nimport { haStyle, haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZWaveJSAddNodeDialogParams } from \"./show-dialog-zwave_js-add-node\";\nimport \"../../../../../components/ha-qr-scanner\";\n\nexport interface ZWaveJSAddNodeDevice {\n  id: string;\n  name: string;\n}\n\n@customElement(\"dialog-zwave_js-add-node\")\nclass DialogZWaveJSAddNode extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: ZWaveJSAddNodeDialogParams;\n\n  @state() private _entryId?: string;\n\n  @state() private _status?:\n    | \"loading\"\n    | \"started\"\n    | \"started_specific\"\n    | \"choose_strategy\"\n    | \"qr_scan\"\n    | \"interviewing\"\n    | \"failed\"\n    | \"timed_out\"\n    | \"finished\"\n    | \"provisioned\"\n    | \"validate_dsk_enter_pin\"\n    | \"grant_security_classes\";\n\n  @state() private _device?: ZWaveJSAddNodeDevice;\n\n  @state() private _stages?: string[];\n\n  @state() private _inclusionStrategy?: InclusionStrategy;\n\n  @state() private _dsk?: string;\n\n  @state() private _error?: string;\n\n  @state() private _requestedGrant?: RequestedGrant;\n\n  @state() private _securityClasses: SecurityClass[] = [];\n\n  @state() private _lowSecurity = false;\n\n  @state() private _supportsSmartStart?: boolean;\n\n  private _addNodeTimeoutHandle?: number;\n\n  private _subscribed?: Promise<UnsubscribeFunc>;\n\n  private _qrProcessing = false;\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._unsubscribe();\n  }\n\n  public async showDialog(params: ZWaveJSAddNodeDialogParams): Promise<void> {\n    this._params = params;\n    this._entryId = params.entry_id;\n    this._status = \"loading\";\n    this._checkSmartStartSupport();\n    this._startInclusion();\n  }\n\n  @query(\"#pin-input\") private _pinInput?: PaperInputElement;\n\n  protected render(): TemplateResult {\n    if (!this._entryId) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.zwave_js.add_node.title\")\n        )}\n      >\n        ${this._status === \"loading\"\n          ? html`<div style=\"display: flex; justify-content: center;\">\n              <ha-circular-progress size=\"large\" active></ha-circular-progress>\n            </div>`\n          : this._status === \"choose_strategy\"\n          ? html`<h3>Choose strategy</h3>\n              <div class=\"flex-column\">\n                <ha-formfield\n                  .label=${html`<b>Secure if possible</b>\n                    <div class=\"secondary\">\n                      Requires user interaction during inclusion. Fast and\n                      secure with S2 when supported. Fallback to legacy S0 or no\n                      encryption when necessary.\n                    </div>`}\n                >\n                  <ha-radio\n                    name=\"strategy\"\n                    @change=${this._handleStrategyChange}\n                    .value=${InclusionStrategy.Default}\n                    .checked=${this._inclusionStrategy ===\n                      InclusionStrategy.Default ||\n                    this._inclusionStrategy === undefined}\n                  >\n                  </ha-radio>\n                </ha-formfield>\n                <ha-formfield\n                  .label=${html`<b>Legacy Secure</b>\n                    <div class=\"secondary\">\n                      Uses the older S0 security that is secure, but slow due to\n                      a lot of overhead. Allows securely including S2 capable\n                      devices which fail to be included with S2.\n                    </div>`}\n                >\n                  <ha-radio\n                    name=\"strategy\"\n                    @change=${this._handleStrategyChange}\n                    .value=${InclusionStrategy.Security_S0}\n                    .checked=${this._inclusionStrategy ===\n                    InclusionStrategy.Security_S0}\n                  >\n                  </ha-radio>\n                </ha-formfield>\n                <ha-formfield\n                  .label=${html`<b>Insecure</b>\n                    <div class=\"secondary\">Do not use encryption.</div>`}\n                >\n                  <ha-radio\n                    name=\"strategy\"\n                    @change=${this._handleStrategyChange}\n                    .value=${InclusionStrategy.Insecure}\n                    .checked=${this._inclusionStrategy ===\n                    InclusionStrategy.Insecure}\n                  >\n                  </ha-radio>\n                </ha-formfield>\n              </div>\n              <mwc-button\n                slot=\"primaryAction\"\n                @click=${this._startManualInclusion}\n              >\n                Search device\n              </mwc-button>`\n          : this._status === \"qr_scan\"\n          ? html`${this._error\n                ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n                : \"\"}\n              <ha-qr-scanner\n                .localize=${this.hass.localize}\n                @qr-code-scanned=${this._qrCodeScanned}\n              ></ha-qr-scanner>\n              <mwc-button slot=\"secondaryAction\" @click=${this._startOver}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.back\")}\n              </mwc-button>`\n          : this._status === \"validate_dsk_enter_pin\"\n          ? html`\n                <p>\n                  Please enter the 5-digit PIN for your device and verify that\n                  the rest of the device-specific key matches the one that can\n                  be found on your device or the manual.\n                </p>\n                ${\n                  this._error\n                    ? html`<ha-alert alert-type=\"error\">\n                        ${this._error}\n                      </ha-alert>`\n                    : \"\"\n                }\n                <div class=\"flex-container\">\n                <paper-input\n                  label=\"PIN\"\n                  id=\"pin-input\"\n                  @keyup=${this._handlePinKeyUp}\n                  no-label-float\n                ></paper-input>\n                ${this._dsk}\n                </div>\n                <mwc-button\n                  slot=\"primaryAction\"\n                  @click=${this._validateDskAndEnterPin}\n                >\n                  Submit\n                </mwc-button>\n              </div>\n            `\n          : this._status === \"grant_security_classes\"\n          ? html`\n              <h3>The device has requested the following security classes:</h3>\n              ${this._error\n                ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n                : \"\"}\n              <div class=\"flex-column\">\n                ${this._requestedGrant?.securityClasses\n                  .sort()\n                  .reverse()\n                  .map(\n                    (securityClass) => html`<ha-formfield\n                      .label=${html`<b\n                          >${this.hass.localize(\n                            `ui.panel.config.zwave_js.security_classes.${SecurityClass[securityClass]}.title`\n                          )}</b\n                        >\n                        <div class=\"secondary\">\n                          ${this.hass.localize(\n                            `ui.panel.config.zwave_js.security_classes.${SecurityClass[securityClass]}.description`\n                          )}\n                        </div>`}\n                    >\n                      <ha-checkbox\n                        @change=${this._handleSecurityClassChange}\n                        .value=${securityClass}\n                        .checked=${this._securityClasses.includes(\n                          securityClass\n                        )}\n                      >\n                      </ha-checkbox>\n                    </ha-formfield>`\n                  )}\n              </div>\n              <mwc-button\n                slot=\"primaryAction\"\n                .disabled=${!this._securityClasses.length}\n                @click=${this._grantSecurityClasses}\n              >\n                Submit\n              </mwc-button>\n            `\n          : this._status === \"timed_out\"\n          ? html`\n              <h3>Timed out!</h3>\n              <p>\n                We have not found any device in inclusion mode. Make sure the\n                device is active and in inclusion mode.\n              </p>\n              <mwc-button slot=\"primaryAction\" @click=${this._startOver}>\n                Retry\n              </mwc-button>\n            `\n          : this._status === \"started_specific\"\n          ? html`<h3>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.add_node.searching_device\"\n                )}\n              </h3>\n              <ha-circular-progress active></ha-circular-progress>\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.zwave_js.add_node.follow_device_instructions\"\n                )}\n              </p>`\n          : this._status === \"started\"\n          ? html`\n              <div class=\"select-inclusion\">\n                <div class=\"outline\">\n                  <h2>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.add_node.searching_device\"\n                    )}\n                  </h2>\n                  <ha-circular-progress active></ha-circular-progress>\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.add_node.follow_device_instructions\"\n                    )}\n                  </p>\n                  <p>\n                    <button\n                      class=\"link\"\n                      @click=${this._chooseInclusionStrategy}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.add_node.choose_inclusion_strategy\"\n                      )}\n                    </button>\n                  </p>\n                </div>\n                ${this._supportsSmartStart\n                  ? html` <div class=\"outline\">\n                      <h2>\n                        ${this.hass.localize(\n                          \"ui.panel.config.zwave_js.add_node.qr_code\"\n                        )}\n                      </h2>\n                      <ha-svg-icon .path=${mdiQrcodeScan}></ha-svg-icon>\n                      <p>\n                        ${this.hass.localize(\n                          \"ui.panel.config.zwave_js.add_node.qr_code_paragraph\"\n                        )}\n                      </p>\n                      <p>\n                        <mwc-button @click=${this._scanQRCode}>\n                          ${this.hass.localize(\n                            \"ui.panel.config.zwave_js.add_node.scan_qr_code\"\n                          )}\n                        </mwc-button>\n                      </p>\n                    </div>`\n                  : \"\"}\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.common.cancel\")}\n              </mwc-button>\n            `\n          : this._status === \"interviewing\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-circular-progress active></ha-circular-progress>\n                <div class=\"status\">\n                  <p>\n                    <b\n                      >${this.hass.localize(\n                        \"ui.panel.config.zwave_js.add_node.interview_started\"\n                      )}</b\n                    >\n                  </p>\n                  ${this._stages\n                    ? html` <div class=\"stages\">\n                        ${this._stages.map(\n                          (stage) => html`\n                            <span class=\"stage\">\n                              <ha-svg-icon\n                                .path=${mdiCheckCircle}\n                                class=\"success\"\n                              ></ha-svg-icon>\n                              ${stage}\n                            </span>\n                          `\n                        )}\n                      </div>`\n                    : \"\"}\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.common.close\")}\n              </mwc-button>\n            `\n          : this._status === \"failed\"\n          ? html`\n              <div class=\"flex-container\">\n                <div class=\"status\">\n                  <ha-alert\n                    alert-type=\"error\"\n                    .title=${this.hass.localize(\n                      \"ui.panel.config.zwave_js.add_node.inclusion_failed\"\n                    )}\n                  >\n                    ${this._error ||\n                    this.hass.localize(\n                      \"ui.panel.config.zwave_js.add_node.check_logs\"\n                    )}\n                  </ha-alert>\n                  ${this._stages\n                    ? html` <div class=\"stages\">\n                        ${this._stages.map(\n                          (stage) => html`\n                            <span class=\"stage\">\n                              <ha-svg-icon\n                                .path=${mdiCheckCircle}\n                                class=\"success\"\n                              ></ha-svg-icon>\n                              ${stage}\n                            </span>\n                          `\n                        )}\n                      </div>`\n                    : \"\"}\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.close\")}\n              </mwc-button>\n            `\n          : this._status === \"finished\"\n          ? html`\n              <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${this._lowSecurity ? mdiAlertCircle : mdiCheckCircle}\n                  class=${this._lowSecurity ? \"warning\" : \"success\"}\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.add_node.inclusion_finished\"\n                    )}\n                  </p>\n                  ${this._lowSecurity\n                    ? html`<ha-alert\n                        alert-type=\"warning\"\n                        title=\"The device was added insecurely\"\n                      >\n                        There was an error during secure inclusion. You can try\n                        again by excluding the device and adding it again.\n                      </ha-alert>`\n                    : \"\"}\n                  <a href=${`/config/devices/device/${this._device!.id}`}>\n                    <mwc-button>\n                      ${this.hass.localize(\n                        \"ui.panel.config.zwave_js.add_node.view_device\"\n                      )}\n                    </mwc-button>\n                  </a>\n                  ${this._stages\n                    ? html` <div class=\"stages\">\n                        ${this._stages.map(\n                          (stage) => html`\n                            <span class=\"stage\">\n                              <ha-svg-icon\n                                .path=${mdiCheckCircle}\n                                class=\"success\"\n                              ></ha-svg-icon>\n                              ${stage}\n                            </span>\n                          `\n                        )}\n                      </div>`\n                    : \"\"}\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.close\")}\n              </mwc-button>\n            `\n          : this._status === \"provisioned\"\n          ? html` <div class=\"flex-container\">\n                <ha-svg-icon\n                  .path=${mdiCheckCircle}\n                  class=\"success\"\n                ></ha-svg-icon>\n                <div class=\"status\">\n                  <p>\n                    ${this.hass.localize(\n                      \"ui.panel.config.zwave_js.add_node.provisioning_finished\"\n                    )}\n                  </p>\n                </div>\n              </div>\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.config.zwave_js.common.close\")}\n              </mwc-button>`\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  private _chooseInclusionStrategy(): void {\n    this._unsubscribe();\n    this._status = \"choose_strategy\";\n  }\n\n  private _handleStrategyChange(ev: CustomEvent): void {\n    this._inclusionStrategy = (ev.target as any).value;\n  }\n\n  private _handleSecurityClassChange(ev: CustomEvent): void {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    const securityClass = Number(checkbox.value);\n    if (checkbox.checked && !this._securityClasses.includes(securityClass)) {\n      this._securityClasses = [...this._securityClasses, securityClass];\n    } else if (!checkbox.checked) {\n      this._securityClasses = this._securityClasses.filter(\n        (val) => val !== securityClass\n      );\n    }\n  }\n\n  private async _scanQRCode(): Promise<void> {\n    this._unsubscribe();\n    this._status = \"qr_scan\";\n  }\n\n  private _qrCodeScanned(ev: CustomEvent): void {\n    if (this._qrProcessing) {\n      return;\n    }\n    this._handleQrCodeScanned(ev.detail.value);\n  }\n\n  private async _handleQrCodeScanned(qrCodeString: string): Promise<void> {\n    this._error = undefined;\n    if (this._status !== \"qr_scan\" || this._qrProcessing) {\n      return;\n    }\n    this._qrProcessing = true;\n    if (\n      qrCodeString.length < MINIMUM_QR_STRING_LENGTH ||\n      !qrCodeString.startsWith(\"90\")\n    ) {\n      this._qrProcessing = false;\n      this._error = `Invalid QR code (${qrCodeString})`;\n      return;\n    }\n    let provisioningInfo: QRProvisioningInformation;\n    try {\n      provisioningInfo = await zwaveParseQrCode(\n        this.hass,\n        this._entryId!,\n        qrCodeString\n      );\n    } catch (err: any) {\n      this._qrProcessing = false;\n      this._error = err.message;\n      return;\n    }\n    this._status = \"loading\";\n    // wait for QR scanner to be removed before resetting qr processing\n    this.updateComplete.then(() => {\n      this._qrProcessing = false;\n    });\n    if (provisioningInfo.version === 1) {\n      try {\n        await provisionZwaveSmartStartNode(\n          this.hass,\n          this._entryId!,\n          provisioningInfo\n        );\n        this._status = \"provisioned\";\n        if (this._params?.addedCallback) {\n          this._params.addedCallback();\n        }\n      } catch (err: any) {\n        this._error = err.message;\n        this._status = \"failed\";\n      }\n    } else if (provisioningInfo.version === 0) {\n      this._inclusionStrategy = InclusionStrategy.Security_S2;\n      this._startInclusion(provisioningInfo);\n    } else {\n      this._error = \"This QR code is not supported\";\n      this._status = \"failed\";\n    }\n  }\n\n  private _handlePinKeyUp(ev: KeyboardEvent) {\n    if (ev.key === \"Enter\") {\n      this._validateDskAndEnterPin();\n    }\n  }\n\n  private async _validateDskAndEnterPin(): Promise<void> {\n    this._status = \"loading\";\n    this._error = undefined;\n    try {\n      await zwaveValidateDskAndEnterPin(\n        this.hass,\n        this._entryId!,\n        this._pinInput!.value as string\n      );\n    } catch (err: any) {\n      this._error = err.message;\n      this._status = \"validate_dsk_enter_pin\";\n    }\n  }\n\n  private async _grantSecurityClasses(): Promise<void> {\n    this._status = \"loading\";\n    this._error = undefined;\n    try {\n      await zwaveGrantSecurityClasses(\n        this.hass,\n        this._entryId!,\n        this._securityClasses\n      );\n    } catch (err: any) {\n      this._error = err.message;\n      this._status = \"grant_security_classes\";\n    }\n  }\n\n  private _startManualInclusion() {\n    if (!this._inclusionStrategy) {\n      this._inclusionStrategy = InclusionStrategy.Default;\n    }\n    this._startInclusion();\n  }\n\n  private async _checkSmartStartSupport() {\n    this._supportsSmartStart = (\n      await zwaveSupportsFeature(\n        this.hass,\n        this._entryId!,\n        ZWaveFeature.SmartStart\n      )\n    ).supported;\n  }\n\n  private _startOver(_ev: Event) {\n    this._startInclusion();\n  }\n\n  private _startInclusion(\n    qrProvisioningInformation?: QRProvisioningInformation,\n    qrCodeString?: string,\n    plannedProvisioningEntry?: PlannedProvisioningEntry\n  ): void {\n    if (!this.hass) {\n      return;\n    }\n    this._lowSecurity = false;\n    const specificDevice =\n      qrProvisioningInformation || qrCodeString || plannedProvisioningEntry;\n    this._subscribed = subscribeAddZwaveNode(\n      this.hass,\n      this._entryId!,\n      (message) => {\n        if (message.event === \"inclusion started\") {\n          this._status = specificDevice ? \"started_specific\" : \"started\";\n        }\n        if (message.event === \"inclusion failed\") {\n          this._unsubscribe();\n          this._status = \"failed\";\n        }\n        if (message.event === \"inclusion stopped\") {\n          // We either found a device, or it failed, either way, cancel the timeout as we are no longer searching\n          if (this._addNodeTimeoutHandle) {\n            clearTimeout(this._addNodeTimeoutHandle);\n          }\n          this._addNodeTimeoutHandle = undefined;\n        }\n\n        if (message.event === \"validate dsk and enter pin\") {\n          this._status = \"validate_dsk_enter_pin\";\n          this._dsk = message.dsk;\n        }\n\n        if (message.event === \"grant security classes\") {\n          if (this._inclusionStrategy === undefined) {\n            zwaveGrantSecurityClasses(\n              this.hass,\n              this._entryId!,\n              message.requested_grant.securityClasses,\n              message.requested_grant.clientSideAuth\n            );\n            return;\n          }\n          this._requestedGrant = message.requested_grant;\n          this._securityClasses = message.requested_grant.securityClasses;\n          this._status = \"grant_security_classes\";\n        }\n\n        if (message.event === \"device registered\") {\n          this._device = message.device;\n        }\n        if (message.event === \"node added\") {\n          this._status = \"interviewing\";\n          this._lowSecurity = message.node.low_security;\n        }\n\n        if (message.event === \"interview completed\") {\n          this._unsubscribe();\n          this._status = \"finished\";\n          if (this._params?.addedCallback) {\n            this._params.addedCallback();\n          }\n        }\n\n        if (message.event === \"interview stage completed\") {\n          if (this._stages === undefined) {\n            this._stages = [message.stage];\n          } else {\n            this._stages = [...this._stages, message.stage];\n          }\n        }\n      },\n      this._inclusionStrategy,\n      qrProvisioningInformation,\n      qrCodeString,\n      plannedProvisioningEntry\n    );\n    this._addNodeTimeoutHandle = window.setTimeout(() => {\n      this._unsubscribe();\n      this._status = \"timed_out\";\n    }, 90000);\n  }\n\n  private _unsubscribe(): void {\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub());\n      this._subscribed = undefined;\n    }\n    if (this._entryId) {\n      stopZwaveInclusion(this.hass, this._entryId);\n    }\n    this._requestedGrant = undefined;\n    this._dsk = undefined;\n    this._securityClasses = [];\n    this._status = undefined;\n    if (this._addNodeTimeoutHandle) {\n      clearTimeout(this._addNodeTimeoutHandle);\n    }\n    this._addNodeTimeoutHandle = undefined;\n  }\n\n  public closeDialog(): void {\n    this._unsubscribe();\n    this._inclusionStrategy = undefined;\n    this._entryId = undefined;\n    this._status = undefined;\n    this._device = undefined;\n    this._stages = undefined;\n    this._error = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      haStyle,\n      css`\n        h3 {\n          margin-top: 0;\n        }\n\n        .success {\n          color: var(--success-color);\n        }\n\n        .warning {\n          color: var(--warning-color);\n        }\n\n        .stages {\n          margin-top: 16px;\n          display: grid;\n        }\n\n        .flex-container .stage ha-svg-icon {\n          width: 16px;\n          height: 16px;\n          margin-right: 0px;\n        }\n        .stage {\n          padding: 8px;\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n        }\n\n        .flex-column {\n          display: flex;\n          flex-direction: column;\n        }\n\n        .flex-column ha-formfield {\n          padding: 8px 0;\n        }\n\n        .select-inclusion {\n          display: flex;\n          align-items: center;\n        }\n\n        .select-inclusion .outline:nth-child(2) {\n          margin-left: 16px;\n        }\n\n        .select-inclusion .outline {\n          border: 1px solid var(--divider-color);\n          border-radius: 4px;\n          padding: 16px;\n          min-height: 250px;\n          text-align: center;\n          flex: 1;\n        }\n\n        @media all and (max-width: 500px) {\n          .select-inclusion {\n            flex-direction: column;\n          }\n\n          .select-inclusion .outline:nth-child(2) {\n            margin-left: 0;\n            margin-top: 16px;\n          }\n        }\n\n        mwc-textfield {\n          width: 100%;\n        }\n\n        ha-svg-icon {\n          width: 68px;\n          height: 48px;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n\n        .flex-container ha-circular-progress,\n        .flex-container ha-svg-icon {\n          margin-right: 20px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zwave_js-add-node\": DialogZWaveJSAddNode;\n  }\n}\n"],"names":[],"sourceRoot":""}