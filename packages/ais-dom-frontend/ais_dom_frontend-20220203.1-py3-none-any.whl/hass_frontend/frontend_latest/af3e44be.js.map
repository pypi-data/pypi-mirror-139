{"version":3,"file":"af3e44be.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;ACZA;AAGA;ACWA;;;;;;;AAOA;;;;;;;;;AA1BA;;;;;;;;;;AAyDA;AAEA;AAGA;;;AAGA;AACA;;AAIA;;AAEA;;;;;AAhCA;;;;;;;;;;;;;;;;;;;;;;;AAxCA;;ACiEA;;;;;AAMA;;;AAGA;;;;AAIA;;;;;;;;;;AAWA;AAEA;;;;;;AAMA;;AAKA;AACA;;;;;;;AAOA;AAGA;;;;;;;;;;;;;;;;AAgBA;;AAGA;AAEA;AAEA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5IA;ACqCA;;AAEA;;;AAVA;;AAEA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ais-webhooks.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-remote.ts","webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-timer-entity-row.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import { html, LitElement, PropertyDeclarations } from \"lit\";\nimport {property} from 'lit/decorators';\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"../../../components/ha-card\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { Webhook, fetchWebhooks } from \"../../../data/webhook\";\n\nimport { showManageCloudhookDialog } from \"./dialog-manage-ais-cloudhook/show-dialog-manage-ais-cloudhook\";\n\nexport class AisWebhooks extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _localHooks?: Webhook[];\n\n  static get properties(): PropertyDeclarations {\n    return {\n      hass: {},\n      _localHooks: {},\n    };\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._fetchData();\n  }\n\n  protected render() {\n    return html`\n      ${this.renderStyle()}\n      <ha-card header=\"Wywołania zwrotne HTTP\">\n        <div class=\"card-content\">\n          Wywołania zwrotne HTTP (Webhook) używane są do udostępniania\n          powiadomień o zdarzeniach. Wszystko, co jest skonfigurowane do\n          uruchamiania przez wywołanie zwrotne, ma publicznie dostępny unikalny\n          adres URL, aby umożliwić wysyłanie danych do Asystenta domowego z\n          dowolnego miejsca. ${this._renderBody()}\n\n          <div class=\"footer\">\n            <a href=\"https://www.ai-speaker.com/\" target=\"_blank\">\n              Dowiedz się więcej o zwrotnym wywołaniu HTTP.\n            </a>\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _renderBody() {\n    if (!this._localHooks) {\n      return html` <div class=\"body-text\">Pobieranie…</div> `;\n    }\n\n    if (this._localHooks.length === 1) {\n      return html`\n        <div class=\"body-text\">\n          Wygląda na to, że nie masz jeszcze zdefiniowanych żadnych wywołań\n          zwrotnych. Rozpocznij od skonfigurowania\n          <a href=\"/config/integrations\">\n            integracji opartej na wywołaniu zwrotnym\n          </a>\n          lub przez tworzenie\n          <a href=\"/config/automation/new\"> automatyzacji typu webhook </a>.\n        </div>\n      `;\n    }\n\n    return this._localHooks.map(\n      (entry) => html`\n        ${entry.webhook_id === \"aisdomprocesscommandfromframe\"\n          ? html` <div></div> `\n          : html`\n              <div class=\"webhook\" .entry=\"${entry}\">\n                <paper-item-body two-line>\n                  <div>\n                    ${entry.name}\n                    ${entry.domain === entry.name.toLowerCase()\n                      ? \"\"\n                      : ` (${entry.domain})`}\n                  </div>\n                  <div secondary>${entry.webhook_id}</div>\n                </paper-item-body>\n                <mwc-button @click=\"${this._handleManageButton}\">\n                  Pokaż\n                </mwc-button>\n              </div>\n            `}\n      `\n    );\n  }\n\n  private _showDialog(webhookId: string) {\n    const webhook = this._localHooks!.find(\n      (ent) => ent.webhook_id === webhookId\n    )!;\n    showManageCloudhookDialog(this, { webhook });\n  }\n\n  private _handleManageButton(ev: MouseEvent) {\n    const entry = (ev.currentTarget as any).parentElement.entry as Webhook;\n    this._showDialog(entry.webhook_id);\n  }\n\n  private async _fetchData() {\n    this._localHooks = await fetchWebhooks(this.hass!);\n  }\n\n  private renderStyle() {\n    return html`\n      <style>\n        .body-text {\n          padding: 8px 0;\n        }\n        .webhook {\n          display: flex;\n          padding: 4px 0;\n        }\n        .progress {\n          margin-right: 16px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n        .footer {\n          padding-top: 16px;\n        }\n        .body-text a,\n        .footer a {\n          color: var(--primary-color);\n        }\n      </style>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ais-webhooks\": AisWebhooks;\n  }\n}\n\ncustomElements.define(\"ais-webhooks\", AisWebhooks);\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../lovelace/entity-rows/hui-timer-entity-row\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"./ais-webhooks\";\nimport \"../../../components/ha-switch\";\nimport {\n  HaAisFileDialogParams,\n  showAisFileDialog,\n} from \"../../../dialogs/ais-files/show-dialog-ais-file\";\n\n@customElement(\"ha-config-ais-dom-config-remote\")\nclass HaConfigAisDomControl extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() private _qrCode?: TemplateResult;\n\n  @property() public narrow!: boolean;\n\n  @property() private remoteDomain;\n\n  async _generateQR() {\n    const qrcode = await import(\"qrcode\");\n    const canvas = await qrcode.toCanvas(`${this.remoteDomain}`, {\n      width: 280,\n      errorCorrectionLevel: \"Q\",\n    });\n    const context = canvas.getContext(\"2d\");\n\n    const imageObj = new Image();\n    imageObj.src = \"/static/icons/favicon-192x192.png\";\n    await new Promise((resolve) => {\n      imageObj.onload = resolve;\n    });\n    context.drawImage(\n      imageObj,\n      canvas.width / 3,\n      canvas.height / 3,\n      canvas.width / 3,\n      canvas.height / 3\n    );\n\n    this._qrCode = html`<img src=${canvas.toDataURL()}></img>`;\n  }\n\n  changeRemote() {\n    this.hass.callService(\"input_boolean\", \"toggle\", {\n      entity_id: \"input_boolean.ais_remote_access\",\n    });\n  }\n\n  enableGatePariringByPin() {\n    this.hass.callService(\"ais_cloud\", \"enable_gate_pairing_by_pin\");\n  }\n\n  protected firstUpdated() {\n    this._generateQR();\n  }\n\n  protected render(): TemplateResult {\n    this.remoteDomain =\n      \"https://\" +\n      this.hass.states[\"sensor.ais_secure_android_id_dom\"].state +\n      \".paczka.pro\";\n\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        ${this.hass.states[\"input_boolean.ais_remote_access\"].state === \"on\"\n          ? html`\n              <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n                <mwc-icon-button slot=\"trigger\" alt=\"menu\">\n                  <ha-svg-icon .path=${mdiDotsVertical}></ha-svg-icon>\n                </mwc-icon-button>\n                <mwc-list-item @click=${this._openCloudflareFileConfig}>\n                  Cloudflare config.yaml\n                </mwc-list-item>\n                <mwc-list-item @click=${this._restartTunnelService}>\n                  Restart tunnel sevice\n                </mwc-list-item>\n              </ha-button-menu>\n            `\n          : ` `}\n        <div>\n          <ha-config-section>\n            <span slot=\"header\">Zdalny dostęp</span>\n            <span slot=\"introduction\"\n              >W tej sekcji możesz skonfigurować zdalny dostęp do bramki</span\n            >\n            <ha-card header=\"Szyfrowany tunel\">\n              <div id=\"ha-switch-id\">\n                <ha-switch\n                  .checked=${this.hass.states[\"input_boolean.ais_remote_access\"]\n                    .state === \"on\"}\n                  @change=${this.changeRemote}\n                ></ha-switch>\n              </div>\n              <div class=\"card-content\">\n                Tunel zapewnia bezpieczne zdalne połączenie z Twoim urządzeniem\n                kiedy jesteś z dala od domu. Twoja bramka dostępna\n                ${this.hass.states[\"input_boolean.ais_remote_access\"].state ===\n                \"on\"\n                  ? html` jest `\n                  : ` będzie `}\n                z Internetu pod adresem\n                <a href=${this.remoteDomain} target=\"_blank\"\n                  >${this.remoteDomain}</a\n                >.\n                <div\n                  class=\"center-container border\"\n                  style=\"height: 320px; text-align: center;\"\n                >\n                  <div id=\"qr\" style=\"text-align: center; margin-top: 10px;\">\n                    ${this._qrCode\n                      ? this._qrCode\n                      : html`\n                          <mwc-button @click=${this._generateQR}\n                            >Pokaż kod QR\n                          </mwc-button>\n                        `}\n                  </div>\n                  Zeskanuj kod QR za pomocą aplikacji na telefonie.\n                </div>\n              </div>\n              <div class=\"card-content\" style=\"text-align:center;\">\n                <svg style=\"width:48px;height:48px\" viewBox=\"0 0 24 24\">\n                  <path\n                    fill=\"#929395\"\n                    d=\"M1,11H6L3.5,8.5L4.92,7.08L9.84,12L4.92,16.92L3.5,15.5L6,13H1V11M8,0H16L16.83,5H17A2,2 0 0,1 19,7V17C19,18.11 18.1,19 17,19H16.83L16,24H8L7.17,19H7C6.46,19 6,18.79 5.62,18.44L7.06,17H17V7H7.06L5.62,5.56C6,5.21 6.46,5 7,5H7.17L8,0Z\"\n                  />\n                </svg>\n                <br />\n                ${this.hass.states[\"timer.ais_dom_pin_join\"].state === \"active\"\n                  ? html`PIN aktywny przez dwie munuty: <br />\n                      <span class=\"pin\"\n                        >${this.hass.states[\"sensor.gate_pairing_pin\"]\n                          .state}</span\n                      ><br /> `\n                  : html`<br />\n                      <mwc-button @click=${this.enableGatePariringByPin}\n                        >Generuj kod PIN</mwc-button\n                      >`}\n              </div>\n              <div class=\"card-actions\">\n                <a\n                  href=\"https://www.ai-speaker.com/docs/ais_bramka_remote_www_index\"\n                  target=\"_blank\"\n                >\n                  <mwc-button>Dowiedz się jak to działa</mwc-button>\n                </a>\n              </div>\n            </ha-card>\n\n            <ais-webhooks .hass=${this.hass}></ais-webhooks>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _openCloudflareFileConfig() {\n    const filePath =\n      \"/data/data/pl.sviete.dom/files/home/.cloudflared/config.yaml\";\n    const file = await this.hass.callApi<string>(\"POST\", \"ais_file/read\", {\n      filePath: filePath,\n    });\n    const fileParams: HaAisFileDialogParams = {\n      dialogTitle: \"Cloudflare config.yaml\",\n      filePath: filePath,\n      fileBody: file,\n      readonly: true,\n    };\n    showAisFileDialog(this, fileParams);\n  }\n\n  private async _restartTunnelService() {\n    this.hass.callService(\"ais_shell_command\", \"restart_pm2_service\", {\n      service: \"tunnel\",\n    });\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        span.pin {\n          color: var(--primary-color);\n          font-size: 2em;\n        }\n        .border {\n          margin-bottom: 12px;\n          border-bottom: 2px solid rgba(0, 0, 0, 0.11);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n        ha-card > div#ha-switch-id {\n          margin: -4px 0;\n          position: absolute;\n          right: 8px;\n          top: 32px;\n        }\n        .card-actions a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-remote\": HaConfigAisDomControl;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeDisplayTimer, timerTimeRemaining } from \"../../../data/timer\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { EntityConfig } from \"./types\";\n\n@customElement(\"hui-timer-entity-row\")\nclass HuiTimerEntityRow extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  @state() private _timeRemaining?: number;\n\n  private _interval?: number;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._clearInterval();\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this._config && this._config.entity) {\n      const stateObj = this.hass?.states[this._config!.entity];\n      if (stateObj) {\n        this._startInterval(stateObj);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        <div class=\"text-content\">\n          ${computeDisplayTimer(this.hass, stateObj, this._timeRemaining)}\n        </div>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"_timeRemaining\")) {\n      return true;\n    }\n\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\")) {\n      const stateObj = this.hass!.states[this._config!.entity];\n      const oldHass = changedProps.get(\"hass\") as this[\"hass\"];\n      const oldStateObj = oldHass\n        ? oldHass.states[this._config!.entity]\n        : undefined;\n\n      if (oldStateObj !== stateObj) {\n        this._startInterval(stateObj);\n      } else if (!stateObj) {\n        this._clearInterval();\n      }\n    }\n  }\n\n  private _clearInterval(): void {\n    if (this._interval) {\n      window.clearInterval(this._interval);\n      this._interval = undefined;\n    }\n  }\n\n  private _startInterval(stateObj: HassEntity): void {\n    this._clearInterval();\n    this._calculateRemaining(stateObj);\n\n    if (stateObj.state === \"active\") {\n      this._interval = window.setInterval(\n        () => this._calculateRemaining(stateObj),\n        1000\n      );\n    }\n  }\n\n  private _calculateRemaining(stateObj: HassEntity): void {\n    this._timeRemaining = timerTimeRemaining(stateObj);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-timer-entity-row\": HuiTimerEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}