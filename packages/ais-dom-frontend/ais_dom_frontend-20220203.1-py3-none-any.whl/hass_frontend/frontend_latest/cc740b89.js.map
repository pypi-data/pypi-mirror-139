{"version":3,"file":"cc740b89.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAiDA;;AA2CA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AAIA;AACA;;;;;;;;AAQA;;AAGA;;;;AAMA;;;AAGA;;;AAIA;AAGA;;;;;;;AA9CA;;;;;;;;;;;;AAnCA;;AChCA;;;;;AAUA;;AAEA;;;AAGA;;AAIA;;;AA7BA;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AC+FA;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAKA;AACA;AACA;;;;;AAKA;AAGA;;;AAGA;AACA;AAGA;AACA;;;;AAIA;AAGA;;;AAGA;AACA;AAEA;AACA;;;;AAIA;AAGA;;;AAGA;AACA;AAGA;AACA;;;;;AA1FA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-entity-attribute-picker.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-weather-forecast-card-editor.ts"],"sourcesContent":["import { mdiCheck, mdiClose, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { formatAttributeName } from \"../../data/entity_attributes\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<string> = (item) => html`<style>\n    paper-item {\n      padding: 0;\n      margin: -10px;\n      margin-left: 0;\n    }\n    #content {\n      display: flex;\n      align-items: center;\n    }\n    ha-svg-icon {\n      padding-left: 2px;\n      margin-right: -2px;\n      color: var(--secondary-text-color);\n    }\n    :host(:not([selected])) ha-svg-icon {\n      display: none;\n    }\n    :host([selected]) paper-item {\n      margin-left: 10px;\n    }\n  </style>\n  <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n  <paper-item>${formatAttributeName(item)}</paper-item>`;\n\n@customElement(\"ha-entity-attribute-picker\")\nclass HaEntityAttributePicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId?: string;\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean, attribute: \"allow-custom-value\" })\n  public allowCustomValue;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property({ type: Boolean }) private _opened = false;\n\n  @query(\"vaadin-combo-box-light\", true) private _comboBox!: HTMLElement;\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    return !(!changedProps.has(\"_opened\") && this._opened);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"_opened\") && this._opened) {\n      const state = this.entityId ? this.hass.states[this.entityId] : undefined;\n      (this._comboBox as any).items = state\n        ? Object.keys(state.attributes)\n        : [];\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      <vaadin-combo-box-light\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomValue}\n        attr-for-value=\"bind-value\"\n        ${comboBoxRenderer(rowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label ??\n          this.hass.localize(\n            \"ui.components.entity.entity-attribute-picker.attribute\"\n          )}\n          .value=${this._value ? formatAttributeName(this._value) : \"\"}\n          .disabled=${this.disabled || !this.entityId}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          <div class=\"suffix\" slot=\"suffix\">\n            ${this.value\n              ? html`\n                  <ha-icon-button\n                    .label=${this.hass.localize(\n                      \"ui.components.entity.entity-picker.clear\"\n                    )}\n                    .path=${mdiClose}\n                    class=\"clear-button\"\n                    tabindex=\"-1\"\n                    @click=${this._clearValue}\n                    no-ripple\n                  ></ha-icon-button>\n                `\n              : \"\"}\n\n            <ha-icon-button\n              .label=${this.hass.localize(\n                \"ui.components.entity.entity-attribute-picker.show_attributes\"\n              )}\n              .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n              class=\"toggle-button\"\n              tabindex=\"-1\"\n            ></ha-icon-button>\n          </div>\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    this._setValue(\"\");\n  }\n\n  private get _value() {\n    return this.value;\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .suffix {\n        display: flex;\n      }\n      ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 0px 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-attribute-picker\": HaEntityAttributePicker;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-dropdown-menu\n        .label=${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`}\n        dynamic-align\n      >\n        <paper-listbox\n          slot=\"dropdown-content\"\n          .selected=${this.value}\n          attr-for-selected=\"theme\"\n          @iron-select=${this._changed}\n        >\n          <paper-item theme=\"remove\"\n            >${this.hass!.localize(\n              \"ui.panel.lovelace.editor.card.generic.no_theme\"\n            )}</paper-item\n          >\n          ${Object.keys(this.hass!.themes.themes)\n            .sort()\n            .map(\n              (theme) =>\n                html` <paper-item theme=${theme}>${theme}</paper-item> `\n            )}\n        </paper-listbox>\n      </paper-dropdown-menu>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      paper-dropdown-menu {\n        width: 100%;\n      }\n      paper-item {\n        cursor: pointer;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.selected === \"\") {\n      return;\n    }\n    this.value = ev.target.selected === \"remove\" ? \"\" : ev.target.selected;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, boolean, object, optional, string, assign } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/entity/ha-entity-attribute-picker\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-radio\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { WeatherForecastCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-theme-select-editor\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { EditorTarget, EntitiesEditorEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { UNAVAILABLE } from \"../../../../data/entity\";\nimport { WeatherEntity } from \"../../../../data/weather\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    theme: optional(string()),\n    show_current: optional(boolean()),\n    show_forecast: optional(boolean()),\n    secondary_info_attribute: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    double_tap_action: optional(actionConfigStruct),\n  })\n);\n\nconst includeDomains = [\"weather\"];\n\n@customElement(\"hui-weather-forecast-card-editor\")\nexport class HuiWeatherForecastCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: WeatherForecastCardConfig;\n\n  public setConfig(config: WeatherForecastCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n\n    if (\n      /* cannot show forecast in case it is unavailable on the entity */\n      (config.show_forecast === true && this._has_forecast === false) ||\n      /* cannot hide both weather and forecast, need one of them */\n      (config.show_current === false && config.show_forecast === false)\n    ) {\n      /* reset to sane default, show weather, but hide forecast */\n      fireEvent(this, \"config-changed\", {\n        config: { ...config, show_current: true, show_forecast: false },\n      });\n    }\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  get _show_current(): boolean {\n    return this._config!.show_current ?? true;\n  }\n\n  get _show_forecast(): boolean {\n    return this._config!.show_forecast ?? this._has_forecast === true;\n  }\n\n  get _secondary_info_attribute(): string {\n    return this._config!.secondary_info_attribute || \"\";\n  }\n\n  get _has_forecast(): boolean | undefined {\n    if (this.hass && this._config) {\n      const stateObj = this.hass.states[this._config.entity] as WeatherEntity;\n      if (stateObj && stateObj.state !== UNAVAILABLE) {\n        return !!stateObj.attributes.forecast?.length;\n      }\n    }\n    return undefined;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .hass=${this.hass}\n          .value=${this._entity}\n          .configValue=${\"entity\"}\n          .includeDomains=${includeDomains}\n          @change=${this._valueChanged}\n          allow-custom-entity\n        ></ha-entity-picker>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.name\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._name}\n            .configValue=${\"name\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <hui-theme-select-editor\n            .hass=${this.hass}\n            .value=${this._theme}\n            .configValue=${\"theme\"}\n            @value-changed=${this._valueChanged}\n          ></hui-theme-select-editor>\n          <ha-entity-attribute-picker\n            .hass=${this.hass}\n            .entityId=${this._entity}\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.secondary_info_attribute\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._secondary_info_attribute}\n            .configValue=${\"secondary_info_attribute\"}\n            @value-changed=${this._valueChanged}\n          ></ha-entity-attribute-picker>\n        </div>\n        <div class=\"side-by-side\">\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.weather-forecast.show_both\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-radio\n              .disabled=${this._has_forecast === false}\n              .checked=${this._has_forecast === true &&\n              this._show_current &&\n              this._show_forecast}\n              .configValue=${\"show_both\"}\n              @change=${this._valueChanged}\n            ></ha-radio\n          ></ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.weather-forecast.show_only_current\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-radio\n              .disabled=${this._has_forecast === false}\n              .checked=${this._has_forecast === false ||\n              (this._show_current && !this._show_forecast)}\n              .configValue=${\"show_current\"}\n              @change=${this._valueChanged}\n            ></ha-radio\n          ></ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.weather-forecast.show_only_forecast\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-radio\n              .disabled=${this._has_forecast === false}\n              .checked=${this._has_forecast === true &&\n              !this._show_current &&\n              this._show_forecast}\n              .configValue=${\"show_forecast\"}\n              @change=${this._valueChanged}\n            ></ha-radio\n          ></ha-formfield>\n        </div>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.configValue.startsWith(\"show_\")) {\n        this._config = { ...this._config };\n        if (target.configValue === \"show_both\") {\n          /* delete since true is default */\n          delete this._config.show_current;\n          delete this._config.show_forecast;\n        } else if (target.configValue === \"show_current\") {\n          delete this._config.show_current;\n          this._config.show_forecast = false;\n        } else if (target.configValue === \"show_forecast\") {\n          delete this._config.show_forecast;\n          this._config.show_current = false;\n        }\n      } else if (target.value === \"\") {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]:\n            target.checked !== undefined ? target.checked : target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-forecast-card-editor\": HuiWeatherForecastCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}