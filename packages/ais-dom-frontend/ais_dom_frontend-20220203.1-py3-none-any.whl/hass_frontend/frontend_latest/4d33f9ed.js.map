{"version":3,"file":"4d33f9ed.js","mappings":";;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;;;;ACPA;ACTA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;ACaA;AAKA;;AAEA;;;AAIA;AACA;;AAEA;;AAIA;;;AAKA;AACA;;AAEA;;AAIA;;;;;AAOA;AACA;;AAEA;;AAlEA;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-code-editor.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/media-browser/hui-dialog-web-browser-play-media.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport { css, CSSResultGroup, PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { loadCodeMirror } from \"../resources/codemirror.ondemand\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property() public error = false;\n\n  @state() private _value = \"\";\n\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.HighlightStyle.get(\n      this.codemirror.state,\n      this._loadedCodeMirror.tags.comment\n    );\n    return !!this.shadowRoot!.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.langCompartment!.reconfigure(\n          this._mode\n        ),\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.dispatch({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._blockKeyboardShortcuts();\n    this._load();\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private async _load(): Promise<void> {\n    this._loadedCodeMirror = await loadCodeMirror();\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions: [\n          this._loadedCodeMirror.lineNumbers(),\n          this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n          this._loadedCodeMirror.history(),\n          this._loadedCodeMirror.highlightSelectionMatches(),\n          this._loadedCodeMirror.highlightActiveLine(),\n          this._loadedCodeMirror.drawSelection(),\n          this._loadedCodeMirror.rectangularSelection(),\n          this._loadedCodeMirror.keymap.of([\n            ...this._loadedCodeMirror.defaultKeymap,\n            ...this._loadedCodeMirror.searchKeymap,\n            ...this._loadedCodeMirror.historyKeymap,\n            ...this._loadedCodeMirror.tabKeyBindings,\n            saveKeyBinding,\n          ] as KeyBinding[]),\n          this._loadedCodeMirror.langCompartment.of(this._mode),\n          this._loadedCodeMirror.theme,\n          this._loadedCodeMirror.Prec.fallback(\n            this._loadedCodeMirror.highlightStyle\n          ),\n          this._loadedCodeMirror.readonlyCompartment.of(\n            this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n          ),\n          this._loadedCodeMirror.EditorView.updateListener.of((update) =>\n            this._onUpdate(update)\n          ),\n        ],\n      }),\n      root: this.shadowRoot!,\n      parent: this.shadowRoot!,\n    });\n  }\n\n  private _blockKeyboardShortcuts() {\n    this.addEventListener(\"keydown\", (ev) => ev.stopPropagation());\n  }\n\n  private _onUpdate(update: ViewUpdate): void {\n    if (!update.docChanged) {\n      return;\n    }\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  // Only Lit 2.0 will use this\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.error-state) div.cm-wrap .cm-gutters {\n        border-color: var(--error-state-color, red);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__actions span:nth-child(1) {\n          flex: var(--secondary-action-button-flex, unset);\n        }\n        .mdc-dialog__actions span:nth-child(2) {\n          flex: var(--primary-action-button-flex, unset);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n          border-radius: var(\n            --ha-dialog-border-radius,\n            var(--ha-card-border-radius, 4px)\n          );\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { createCloseHeading } from \"../../components/ha-dialog\";\nimport \"../../components/ha-hls-player\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { WebBrowserPlayMediaDialogParams } from \"./show-media-player-dialog\";\nimport \"../../components/ha-code-editor\";\n\n@customElement(\"hui-dialog-web-browser-play-media\")\nexport class HuiDialogWebBrowserPlayMedia extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  private _params?: WebBrowserPlayMediaDialogParams;\n\n  public showDialog(params: WebBrowserPlayMediaDialogParams): void {\n    this._params = params;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params || !this._params.sourceType || !this._params.sourceUrl) {\n      return html``;\n    }\n\n    const mediaType = this._params.sourceType.split(\"/\", 1)[0];\n\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.title ||\n            this.hass.localize(\"ui.components.media-browser.media_player\")\n        )}\n        @closed=${this.closeDialog}\n      >\n        ${mediaType === \"audio\"\n          ? html`\n              <audio controls autoplay>\n                <source\n                  src=${this._params.sourceUrl}\n                  type=${this._params.sourceType}\n                />\n                ${this.hass.localize(\n                  \"ui.components.media-browser.audio_not_supported\"\n                )}\n              </audio>\n            `\n          : mediaType === \"video\"\n          ? html`\n              <video controls autoplay playsinline>\n                <source\n                  src=${this._params.sourceUrl}\n                  type=${this._params.sourceType}\n                />\n                ${this.hass.localize(\n                  \"ui.components.media-browser.video_not_supported\"\n                )}\n              </video>\n            `\n          : this._params.sourceType === \"application/x-mpegURL\"\n          ? html`\n              <ha-hls-player\n                controls\n                autoplay\n                playsinline\n                .hass=${this.hass}\n                .url=${this._params.sourceUrl}\n              ></ha-hls-player>\n            `\n          : mediaType === \"image\"\n          ? html`<img src=${this._params.sourceUrl} />`\n          : html`${this.hass.localize(\n              \"ui.components.media-browser.media_not_supported\"\n            )}`}\n      </ha-dialog>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        @media (min-width: 800px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 800px;\n            --mdc-dialog-min-width: 400px;\n          }\n        }\n\n        video,\n        audio,\n        img {\n          outline: none;\n          width: 100%;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-web-browser-play-media\": HuiDialogWebBrowserPlayMedia;\n  }\n}\n"],"names":[],"sourceRoot":""}