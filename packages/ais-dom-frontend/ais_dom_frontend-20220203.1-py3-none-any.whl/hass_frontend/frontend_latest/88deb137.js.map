{"version":3,"file":"88deb137.js","mappings":";;;;;AAqBA;ACTA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;ACyDA;AACA;;AAKA;;AAGA;;AAIA;AACA;;AAEA;AAEA;;;;;;AAOA;;;AAKA;;AAGA;AAGA;AACA;AAGA;;;;AAMA;;;AAMA;;;AAIA;AAEA;;AAIA;;;AAKA;;AAGA;AAGA;;;AAGA;;;AAGA;;;AAKA;AAEA;;;AAIA;;AAEA;;;;;AAlGA;;;;;;;;;;;;;;;;;;;;;;AApDA","sources":["webpack://home-assistant-frontend/./src/components/ha-code-editor.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/ozw/dialog-ozw-refresh-node.ts"],"sourcesContent":["import type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport { css, CSSResultGroup, PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { loadCodeMirror } from \"../resources/codemirror.ondemand\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property() public error = false;\n\n  @state() private _value = \"\";\n\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.HighlightStyle.get(\n      this.codemirror.state,\n      this._loadedCodeMirror.tags.comment\n    );\n    return !!this.shadowRoot!.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.langCompartment!.reconfigure(\n          this._mode\n        ),\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.dispatch({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._blockKeyboardShortcuts();\n    this._load();\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private async _load(): Promise<void> {\n    this._loadedCodeMirror = await loadCodeMirror();\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions: [\n          this._loadedCodeMirror.lineNumbers(),\n          this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n          this._loadedCodeMirror.history(),\n          this._loadedCodeMirror.highlightSelectionMatches(),\n          this._loadedCodeMirror.highlightActiveLine(),\n          this._loadedCodeMirror.drawSelection(),\n          this._loadedCodeMirror.rectangularSelection(),\n          this._loadedCodeMirror.keymap.of([\n            ...this._loadedCodeMirror.defaultKeymap,\n            ...this._loadedCodeMirror.searchKeymap,\n            ...this._loadedCodeMirror.historyKeymap,\n            ...this._loadedCodeMirror.tabKeyBindings,\n            saveKeyBinding,\n          ] as KeyBinding[]),\n          this._loadedCodeMirror.langCompartment.of(this._mode),\n          this._loadedCodeMirror.theme,\n          this._loadedCodeMirror.Prec.fallback(\n            this._loadedCodeMirror.highlightStyle\n          ),\n          this._loadedCodeMirror.readonlyCompartment.of(\n            this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n          ),\n          this._loadedCodeMirror.EditorView.updateListener.of((update) =>\n            this._onUpdate(update)\n          ),\n        ],\n      }),\n      root: this.shadowRoot!,\n      parent: this.shadowRoot!,\n    });\n  }\n\n  private _blockKeyboardShortcuts() {\n    this.addEventListener(\"keydown\", (ev) => ev.stopPropagation());\n  }\n\n  private _onUpdate(update: ViewUpdate): void {\n    if (!update.docChanged) {\n      return;\n    }\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  // Only Lit 2.0 will use this\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.error-state) div.cm-wrap .cm-gutters {\n        border-color: var(--error-state-color, red);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__actions span:nth-child(1) {\n          flex: var(--secondary-action-button-flex, unset);\n        }\n        .mdc-dialog__actions span:nth-child(2) {\n          flex: var(--primary-action-button-flex, unset);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n          border-radius: var(\n            --ha-dialog-border-radius,\n            var(--ha-card-border-radius, 4px)\n          );\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../components/ha-circular-progress\";\nimport \"../../../../../components/ha-code-editor\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport {\n  fetchOZWNodeMetadata,\n  nodeQueryStages,\n  OZWDevice,\n  OZWDeviceMetaData,\n} from \"../../../../../data/ozw\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { OZWRefreshNodeDialogParams } from \"./show-dialog-ozw-refresh-node\";\n\n@customElement(\"dialog-ozw-refresh-node\")\nclass DialogOZWRefreshNode extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _node_id?: number;\n\n  @state() private _ozw_instance = 1;\n\n  @state() private _nodeMetaData?: OZWDeviceMetaData;\n\n  @state() private _node?: OZWDevice;\n\n  @state() private _active = false;\n\n  @state() private _complete = false;\n\n  private _refreshDevicesTimeoutHandle?: number;\n\n  private _subscribed?: Promise<() => Promise<void>>;\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._unsubscribe();\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.update(changedProperties);\n    if (changedProperties.has(\"node_id\")) {\n      this._fetchData();\n    }\n  }\n\n  private async _fetchData() {\n    if (!this._node_id) {\n      return;\n    }\n    const metaDataResponse = await fetchOZWNodeMetadata(\n      this.hass,\n      this._ozw_instance,\n      this._node_id\n    );\n\n    this._nodeMetaData = metaDataResponse.metadata;\n  }\n\n  public async showDialog(params: OZWRefreshNodeDialogParams): Promise<void> {\n    this._node_id = params.node_id;\n    this._ozw_instance = params.ozw_instance;\n    this._fetchData();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._node_id) {\n      return html``;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._close}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.ozw.refresh_node.title\")\n        )}\n      >\n        ${this._complete\n          ? html`\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.ozw.refresh_node.complete\"\n                )}\n              </p>\n              <mwc-button slot=\"primaryAction\" @click=${this._close}>\n                ${this.hass.localize(\"ui.common.close\")}\n              </mwc-button>\n            `\n          : html`\n              ${this._active\n                ? html`\n                    <div class=\"flex-container\">\n                      <ha-circular-progress active></ha-circular-progress>\n                      <div>\n                        <p>\n                          <b>\n                            ${this.hass.localize(\n                              \"ui.panel.config.ozw.refresh_node.refreshing_description\"\n                            )}\n                          </b>\n                        </p>\n                        ${this._node\n                          ? html`\n                              <p>\n                                ${this.hass.localize(\n                                  \"ui.panel.config.ozw.refresh_node.node_status\"\n                                )}:\n                                ${this._node.node_query_stage}\n                                (${this.hass.localize(\n                                  \"ui.panel.config.ozw.refresh_node.step\"\n                                )}\n                                ${nodeQueryStages.indexOf(\n                                  this._node.node_query_stage\n                                ) + 1}/17)\n                              </p>\n                              <p>\n                                <em>\n                                  ${this.hass.localize(\n                                    \"ui.panel.config.ozw.node_query_stages.\" +\n                                      this._node.node_query_stage.toLowerCase()\n                                  )}</em\n                                >\n                              </p>\n                            `\n                          : ``}\n                      </div>\n                    </div>\n                  `\n                : html`\n                    ${this.hass.localize(\n                      \"ui.panel.config.ozw.refresh_node.description\"\n                    )}\n                    <p>\n                      ${this.hass.localize(\n                        \"ui.panel.config.ozw.refresh_node.battery_note\"\n                      )}\n                    </p>\n                  `}\n              ${this._nodeMetaData?.WakeupHelp !== \"\"\n                ? html`\n                    <b>\n                      ${this.hass.localize(\n                        \"ui.panel.config.ozw.refresh_node.wakeup_header\"\n                      )}\n                      ${this._nodeMetaData!.Name}\n                    </b>\n                    <blockquote>\n                      ${this._nodeMetaData!.WakeupHelp}\n                      <br />\n                      <em>\n                        ${this.hass.localize(\n                          \"ui.panel.config.ozw.refresh_node.wakeup_instructions_source\"\n                        )}\n                      </em>\n                    </blockquote>\n                  `\n                : \"\"}\n              ${!this._active\n                ? html`\n                    <mwc-button\n                      slot=\"primaryAction\"\n                      @click=${this._startRefresh}\n                    >\n                      ${this.hass.localize(\n                        \"ui.panel.config.ozw.refresh_node.start_refresh_button\"\n                      )}\n                    </mwc-button>\n                  `\n                : html``}\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _startRefresh(): void {\n    this._subscribe();\n  }\n\n  private _handleMessage(message: any): void {\n    if (message.type === \"node_updated\") {\n      this._node = message;\n      if (message.node_query_stage === \"Complete\") {\n        this._unsubscribe();\n        this._complete = true;\n      }\n    }\n  }\n\n  private _unsubscribe(): void {\n    this._active = false;\n    if (this._refreshDevicesTimeoutHandle) {\n      clearTimeout(this._refreshDevicesTimeoutHandle);\n    }\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub());\n      this._subscribed = undefined;\n    }\n  }\n\n  private _subscribe(): void {\n    if (!this.hass) {\n      return;\n    }\n    this._active = true;\n    this._subscribed = this.hass.connection.subscribeMessage(\n      (message) => this._handleMessage(message),\n      {\n        type: \"ozw/refresh_node_info\",\n        node_id: this._node_id,\n        ozw_instance: this._ozw_instance,\n      }\n    );\n    this._refreshDevicesTimeoutHandle = window.setTimeout(\n      () => this._unsubscribe(),\n      120000\n    );\n  }\n\n  private _close(): void {\n    this._complete = false;\n    this._node_id = undefined;\n    this._node = undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        blockquote {\n          display: block;\n          background-color: #ddd;\n          padding: 8px;\n          margin: 8px 0;\n          font-size: 0.9em;\n        }\n\n        blockquote em {\n          font-size: 0.9em;\n          margin-top: 6px;\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n        }\n\n        .flex-container ha-circular-progress {\n          margin-right: 20px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-ozw-refresh-node\": DialogOZWRefreshNode;\n  }\n}\n"],"names":[],"sourceRoot":""}