{"version":3,"file":"48b1f08f.js","mappings":";AAkFA;AACA;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKA;;;AAQA;;;;;AAMA;;AAEA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;;;AAlDA;;AAEA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-input-number-entity-row.ts"],"sourcesContent":["import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport \"../../../components/ha-slider\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { setValue } from \"../../../data/input_text\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport { installResizeObserver } from \"../common/install-resize-observer\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { EntityConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-input-number-entity-row\")\nclass HuiInputNumberEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  private _loaded?: boolean;\n\n  private _updated?: boolean;\n\n  private _resizeObserver?: ResizeObserver;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this._updated && !this._loaded) {\n      this._initialLoad();\n    }\n    this._attachObserver();\n  }\n\n  public disconnectedCallback(): void {\n    this._resizeObserver?.disconnect();\n  }\n\n  protected firstUpdated(): void {\n    this._updated = true;\n    if (this.isConnected && !this._loaded) {\n      this._initialLoad();\n    }\n    this._attachObserver();\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        ${stateObj.attributes.mode === \"slider\"\n          ? html`\n              <div class=\"flex\">\n                <ha-slider\n                  .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                  .dir=${computeRTLDirection(this.hass)}\n                  .step=${Number(stateObj.attributes.step)}\n                  .min=${Number(stateObj.attributes.min)}\n                  .max=${Number(stateObj.attributes.max)}\n                  .value=${Number(stateObj.state)}\n                  pin\n                  @change=${this._selectedValueChanged}\n                  ignore-bar-touch\n                  id=\"input\"\n                ></ha-slider>\n                <span class=\"state\">\n                  ${computeStateDisplay(\n                    this.hass.localize,\n                    stateObj,\n                    this.hass.locale,\n                    stateObj.state\n                  )}\n                </span>\n              </div>\n            `\n          : html`\n              <div class=\"flex state\">\n                <paper-input\n                  no-label-float\n                  auto-validate\n                  .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                  pattern=\"[0-9]+([\\\\.][0-9]+)?\"\n                  .step=${Number(stateObj.attributes.step)}\n                  .min=${Number(stateObj.attributes.min)}\n                  .max=${Number(stateObj.attributes.max)}\n                  .value=${Number(stateObj.state)}\n                  type=\"number\"\n                  @change=${this._selectedValueChanged}\n                  id=\"input\"\n                >\n                  <span slot=\"suffix\">\n                    ${stateObj.attributes.unit_of_measurement}\n                  </span>\n                </paper-input>\n              </div>\n            `}\n      </hui-generic-entity-row>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n      .flex {\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n        flex-grow: 2;\n      }\n      .state {\n        min-width: 45px;\n        text-align: end;\n      }\n      paper-input {\n        text-align: end;\n      }\n      ha-slider {\n        width: 100%;\n        max-width: 200px;\n      }\n    `;\n  }\n\n  private async _initialLoad(): Promise<void> {\n    this._loaded = true;\n    await this.updateComplete;\n    this._measureCard();\n  }\n\n  private _measureCard() {\n    if (!this.isConnected) {\n      return;\n    }\n    const element = this.shadowRoot!.querySelector(\".state\") as HTMLElement;\n    if (!element) {\n      return;\n    }\n    element.hidden = this.clientWidth <= 300;\n  }\n\n  private async _attachObserver(): Promise<void> {\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(\n        debounce(() => this._measureCard(), 250, false)\n      );\n    }\n    if (this.isConnected) {\n      this._resizeObserver.observe(this);\n    }\n  }\n\n  private get _inputElement(): { value: string } {\n    // linter recommended the following syntax\n    return this.shadowRoot!.getElementById(\"input\") as unknown as {\n      value: string;\n    };\n  }\n\n  private _selectedValueChanged(): void {\n    const element = this._inputElement;\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    if (element.value !== stateObj.state) {\n      setValue(this.hass!, stateObj.entity_id, element.value!);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-number-entity-row\": HuiInputNumberEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}