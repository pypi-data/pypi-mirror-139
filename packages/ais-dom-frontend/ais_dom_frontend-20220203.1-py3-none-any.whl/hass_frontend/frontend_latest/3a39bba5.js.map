{"version":3,"file":"3a39bba5.js","mappings":";;;;;;;;;;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC6NA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7GA","sources":["webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/components/paper-time-input.js","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-night.js"],"sourcesContent":["import { Switch } from \"@material/mwc-switch/deprecated\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\n// @ts-expect-error\nexport class HaSwitch extends Switch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      Switch.styles,\n      css`\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","/**\nAdapted from paper-time-input from\nhttps://github.com/ryanburns23/paper-time-input\nMIT Licensed. Copyright (c) 2017 Ryan Burns\n\n`<paper-time-input>` Polymer element to accept a time with paper-input & paper-dropdown-menu\nInspired by the time input in google forms\n\n### Styling\n\n`<paper-time-input>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-time-input-dropdown-ripple-color` | dropdown ripple color | `--primary-color`\n`--paper-time-input-cotnainer` | Mixin applied to the inputs | `{}`\n`--paper-time-dropdown-input-cotnainer` | Mixin applied to the dropdown input | `{}`\n*/\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nexport class PaperTimeInput extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          @apply --paper-font-common-base;\n        }\n\n        paper-input {\n          width: 30px;\n          text-align: center;\n          --paper-input-container-input: {\n            /* Damn you firefox\n             * Needed to hide spin num in firefox\n             * http://stackoverflow.com/questions/3790935/can-i-hide-the-html5-number-input-s-spin-box\n             */\n            -moz-appearance: textfield;\n            @apply --paper-time-input-cotnainer;\n          }\n          --paper-input-container-input-webkit-spinner: {\n            -webkit-appearance: none;\n            margin: 0;\n            display: none;\n          }\n          --paper-input-container-shared-input-style_-_-webkit-appearance: textfield;\n        }\n\n        paper-dropdown-menu {\n          width: 55px;\n          padding: 0;\n          /* Force ripple to use the whole container */\n          --paper-dropdown-menu-ripple: {\n            color: var(\n              --paper-time-input-dropdown-ripple-color,\n              var(--primary-color)\n            );\n          }\n          --paper-input-container-input: {\n            @apply --paper-font-button;\n            text-align: center;\n            padding-left: 5px;\n            @apply --paper-time-dropdown-input-cotnainer;\n          }\n          --paper-input-container-underline: {\n            border-color: transparent;\n          }\n          --paper-input-container-underline-focus: {\n            border-color: transparent;\n          }\n        }\n\n        paper-item {\n          cursor: pointer;\n          text-align: center;\n          font-size: 14px;\n        }\n\n        paper-listbox {\n          padding: 0;\n        }\n\n        label {\n          @apply --paper-font-caption;\n          color: var(\n            --paper-input-container-color,\n            var(--secondary-text-color)\n          );\n        }\n\n        .time-input-wrap {\n          @apply --layout-horizontal;\n          @apply --layout-no-wrap;\n          justify-content: var(--paper-time-input-justify-content, normal);\n        }\n\n        [hidden] {\n          display: none !important;\n        }\n\n        #millisec {\n          width: 38px;\n        }\n\n        .no-suffix {\n          margin-left: -2px;\n        }\n      </style>\n\n      <label hidden$=\"[[hideLabel]]\">[[label]]</label>\n      <div class=\"time-input-wrap\">\n        <!-- Hour Input -->\n        <paper-input\n          id=\"hour\"\n          type=\"number\"\n          inputmode=\"numeric\"\n          value=\"{{hour}}\"\n          label=\"[[hourLabel]]\"\n          on-change=\"_shouldFormatHour\"\n          on-focus=\"_onFocus\"\n          required\n          prevent-invalid-input\n          auto-validate=\"[[autoValidate]]\"\n          maxlength=\"2\"\n          max=\"[[_computeHourMax(format)]]\"\n          min=\"0\"\n          no-label-float$=\"[[!floatInputLabels]]\"\n          always-float-label$=\"[[alwaysFloatInputLabels]]\"\n          disabled=\"[[disabled]]\"\n        >\n          <span suffix slot=\"suffix\">:</span>\n        </paper-input>\n\n        <!-- Min Input -->\n        <paper-input\n          class$=\"[[_computeClassNames(enableSecond)]]\"\n          id=\"min\"\n          type=\"number\"\n          inputmode=\"numeric\"\n          value=\"{{min}}\"\n          label=\"[[minLabel]]\"\n          on-change=\"_formatMin\"\n          on-focus=\"_onFocus\"\n          required\n          auto-validate=\"[[autoValidate]]\"\n          prevent-invalid-input\n          maxlength=\"2\"\n          max=\"59\"\n          min=\"0\"\n          no-label-float$=\"[[!floatInputLabels]]\"\n          always-float-label$=\"[[alwaysFloatInputLabels]]\"\n          disabled=\"[[disabled]]\"\n        >\n          <span hidden$=\"[[!enableSecond]]\" suffix slot=\"suffix\">:</span>\n        </paper-input>\n\n        <!-- Sec Input -->\n        <paper-input\n          class$=\"[[_computeClassNames(enableMillisecond)]]\"\n          id=\"sec\"\n          type=\"number\"\n          inputmode=\"numeric\"\n          value=\"{{sec}}\"\n          label=\"[[secLabel]]\"\n          on-change=\"_formatSec\"\n          on-focus=\"_onFocus\"\n          required\n          auto-validate=\"[[autoValidate]]\"\n          prevent-invalid-input\n          maxlength=\"2\"\n          max=\"59\"\n          min=\"0\"\n          no-label-float$=\"[[!floatInputLabels]]\"\n          always-float-label$=\"[[alwaysFloatInputLabels]]\"\n          disabled=\"[[disabled]]\"\n          hidden$=\"[[!enableSecond]]\"\n        >\n          <span hidden$=\"[[!enableMillisecond]]\" suffix slot=\"suffix\">:</span>\n        </paper-input>\n\n        <!-- Millisec Input -->\n        <paper-input\n          id=\"millisec\"\n          type=\"number\"\n          value=\"{{millisec}}\"\n          label=\"[[millisecLabel]]\"\n          on-change=\"_formatMillisec\"\n          on-focus=\"_onFocus\"\n          required\n          auto-validate=\"[[autoValidate]]\"\n          prevent-invalid-input\n          maxlength=\"3\"\n          max=\"999\"\n          min=\"0\"\n          no-label-float$=\"[[!floatInputLabels]]\"\n          always-float-label$=\"[[alwaysFloatInputLabels]]\"\n          disabled=\"[[disabled]]\"\n          hidden$=\"[[!enableMillisecond]]\"\n        >\n        </paper-input>\n\n        <!-- Dropdown Menu -->\n        <paper-dropdown-menu\n          id=\"dropdown\"\n          required=\"\"\n          hidden$=\"[[_equal(format, 24)]]\"\n          no-label-float=\"\"\n          disabled=\"[[disabled]]\"\n        >\n          <paper-listbox\n            attr-for-selected=\"name\"\n            selected=\"{{amPm}}\"\n            slot=\"dropdown-content\"\n          >\n            <paper-item name=\"AM\">AM</paper-item>\n            <paper-item name=\"PM\">PM</paper-item>\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Label for the input\n       */\n      label: {\n        type: String,\n        value: \"Time\",\n      },\n      /**\n       * auto validate time inputs\n       */\n      autoValidate: {\n        type: Boolean,\n        value: true,\n      },\n      /**\n       * hides the label\n       */\n      hideLabel: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * float the input labels\n       */\n      floatInputLabels: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * always float the input labels\n       */\n      alwaysFloatInputLabels: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * 12 or 24 hr format\n       */\n      format: {\n        type: Number,\n        value: 12,\n      },\n      /**\n       * disables the inputs\n       */\n      disabled: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * hour\n       */\n      hour: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * minute\n       */\n      min: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * second\n       */\n      sec: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * milli second\n       */\n      millisec: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * Label for the hour input\n       */\n      hourLabel: {\n        type: String,\n        value: \"\",\n      },\n      /**\n       * Label for the min input\n       */\n      minLabel: {\n        type: String,\n        value: \"\",\n      },\n      /**\n       * Label for the sec input\n       */\n      secLabel: {\n        type: String,\n        value: \"\",\n      },\n      /**\n       * Label for the milli sec input\n       */\n      millisecLabel: {\n        type: String,\n        value: \"\",\n      },\n      /**\n       * show the sec field\n       */\n      enableSecond: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * show the milli sec field\n       */\n      enableMillisecond: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * limit hours input\n       */\n      noHoursLimit: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * AM or PM\n       */\n      amPm: {\n        type: String,\n        notify: true,\n        value: \"AM\",\n      },\n      /**\n       * Formatted time string\n       */\n      value: {\n        type: String,\n        notify: true,\n        readOnly: true,\n        computed: \"_computeTime(min, hour, sec, millisec, amPm)\",\n      },\n    };\n  }\n\n  /**\n   * Validate the inputs\n   * @return {boolean}\n   */\n  validate() {\n    let valid = true;\n    // Validate hour & min fields\n    if (!this.$.hour.validate() || !this.$.min.validate()) {\n      valid = false;\n    }\n    // Validate second field\n    if (this.enableSecond && !this.$.sec.validate()) {\n      valid = false;\n    }\n    // Validate milli second field\n    if (this.enableMillisecond && !this.$.millisec.validate()) {\n      valid = false;\n    }\n    // Validate AM PM if 12 hour time\n    if (this.format === 12 && !this.$.dropdown.validate()) {\n      valid = false;\n    }\n    return valid;\n  }\n\n  /**\n   * Create time string\n   */\n  _computeTime(min, hour, sec, millisec, amPm) {\n    let str;\n    if (\n      hour ||\n      min ||\n      (sec && this.enableSecond) ||\n      (millisec && this.enableMillisecond)\n    ) {\n      hour = hour || \"00\";\n      min = min || \"00\";\n      sec = sec || \"00\";\n      millisec = millisec || \"000\";\n      str = hour + \":\" + min;\n      // add sec field\n      if (this.enableSecond && sec) {\n        str = str + \":\" + sec;\n      }\n      // add milli sec field\n      if (this.enableMillisecond && millisec) {\n        str = str + \":\" + millisec;\n      }\n      // No ampm on 24 hr time\n      if (this.format === 12) {\n        str = str + \" \" + amPm;\n      }\n    }\n\n    return str;\n  }\n\n  _onFocus(ev) {\n    ev.target.inputElement.inputElement.select();\n  }\n\n  /**\n   * Format milli sec\n   */\n  _formatMillisec() {\n    if (this.millisec.toString().length === 1) {\n      this.millisec = this.millisec.toString().padStart(3, \"0\");\n    }\n  }\n\n  /**\n   * Format sec\n   */\n  _formatSec() {\n    if (this.sec.toString().length === 1) {\n      this.sec = this.sec.toString().padStart(2, \"0\");\n    }\n  }\n\n  /**\n   * Format min\n   */\n  _formatMin() {\n    if (this.min.toString().length === 1) {\n      this.min = this.min.toString().padStart(2, \"0\");\n    }\n  }\n\n  /**\n   * Format hour\n   */\n  _shouldFormatHour() {\n    if (this.format === 24 && this.hour.toString().length === 1) {\n      this.hour = this.hour.toString().padStart(2, \"0\");\n    }\n  }\n\n  /**\n   * 24 hour format has a max hr of 23\n   */\n  _computeHourMax(format) {\n    if (this.noHoursLimit) {\n      return null;\n    }\n    if (format === 12) {\n      return format;\n    }\n    return 23;\n  }\n\n  _equal(n1, n2) {\n    return n1 === n2;\n  }\n\n  _computeClassNames(hasSuffix) {\n    return hasSuffix ? \" \" : \"no-suffix\";\n  }\n}\n\ncustomElements.define(\"paper-time-input\", PaperTimeInput);\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"../../../components/paper-time-input\";\nimport \"../../../components/ha-switch\";\n/*\n *\n */\nclass HaConfigAisDomControl extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex ha-style\">\n        .content {\n          padding-bottom: 32px;\n        }\n\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .card-actions {\n          display: flex;\n        }\n        ha-card > div#ha-switch-id {\n          margin: -4px 0;\n          position: absolute;\n          top: 32px;\n          right: 8px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n        div.person {\n          display: inline-block;\n          margin: 10px;\n        }\n        img {\n          border-radius: 50%;\n          width: 100px;\n          height: 100px;\n          border: 20px;\n        }\n      </style>\n\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <div class$=\"[[computeClasses(isWide)]]\">\n          <ha-config-section is-wide=\"[[isWide]]\">\n            <span slot=\"header\">Ustawienia trybu nocnego</span>\n            <span slot=\"introduction\"\n              >Możesz ustalić, w jakich godzinach asystent ma ściszać audio oraz\n              zmieniać wygląd aplikacji na \"nocny\"</span\n            >\n            <ha-card header=\"Uruchamiaj tryb nocny*\">\n              <div id=\"ha-switch-id\">\n                <ha-switch\n                  checked=\"{{quietMode}}\"\n                  on-change=\"changeQuietMode\"\n                ></ha-switch>\n              </div>\n              <div\n                class=\"card-content\"\n                style=\"display: flex; align-items: center;\"\n              >\n                Rozpocznij o godzinie\n                <paper-time-input\n                  id=\"ais_quiet_mode_start\"\n                  hour=\"[[quietModeStartH]]\"\n                  min=\"[[quietModeStartM]]\"\n                  amPm=\"false\"\n                  hide-label\n                  format=\"24\"\n                  maxlength=\"2\"\n                  on-change=\"_selectedValueChanged\"\n                  style=\"margin-right:7px;margin-left:7px;\"\n                ></paper-time-input>\n                zakończ o godzinie\n                <paper-time-input\n                  id=\"ais_quiet_mode_stop\"\n                  hour=\"[[quietModeStopH]]\"\n                  min=\"[[quietModeStopM]]\"\n                  amPm=\"false\"\n                  hide-label\n                  format=\"24\"\n                  maxlength=\"2\"\n                  on-change=\"_selectedValueChanged\"\n                  style=\"margin-right:7px;margin-left:7px;\"\n                ></paper-time-input>\n              </div>\n              <div class=\"card-content\">\n                *[[quietModeInfo]] o godzinie\n                [[quietModeStartH]]:[[quietModeStartM]] asystent:\n                <ul>\n                  <li>zredukuje głośność czytanych powiadomień do 20%</li>\n                  <li>zredukuje głośność odtwarzacza audio do 20%</li>\n                  <li>zmieni motyw wyglądu aplikacji na nocny</li>\n                </ul>\n                Po zakończeniu ciszy nocnej, o godzinie\n                [[quietModeStopH]]:[[quietModeStopM]], głośność i wygląd zostaną\n                automatycznie przywrócone do wartości przed ciszą nocną.\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      isWide: Boolean,\n      showAdvanced: Boolean,\n      quietMode: {\n        type: Boolean,\n        computed: \"_computeQuietMode(hass)\",\n      },\n      quietModeInfo: String,\n      quietModeStartH: String,\n      quietModeStartM: String,\n      quietModeStopH: String,\n      quietModeStopM: String,\n    };\n  }\n\n  computeClasses(isWide) {\n    return isWide ? \"content\" : \"content narrow\";\n  }\n\n  _computeQuietMode(hass) {\n    this.quietModeStartH =\n      hass.states[\"input_datetime.ais_quiet_mode_start\"].state.split(\":\")[0] ||\n      \"22\";\n    this.quietModeStartM =\n      hass.states[\"input_datetime.ais_quiet_mode_start\"].state.split(\":\")[1] ||\n      \"00\";\n    this.quietModeStopH =\n      hass.states[\"input_datetime.ais_quiet_mode_stop\"].state.split(\":\")[0] ||\n      \"6\";\n    this.quietModeStopM =\n      hass.states[\"input_datetime.ais_quiet_mode_stop\"].state.split(\":\")[1] ||\n      \"00\";\n\n    if (hass.states[\"input_boolean.ais_quiet_mode\"].state === \"off\") {\n      this.quietModeInfo = \"Jeśli włączysz tryb nocny, to \";\n      return false;\n    }\n    this.quietModeInfo = \"\";\n    return true;\n  }\n\n  _selectedValueChanged(ev) {\n    var el = ev.target;\n    // call service\n    this.hass.callService(\"input_datetime\", \"set_datetime\", {\n      entity_id: \"input_datetime.\" + el.id,\n      time: el.value,\n    });\n  }\n\n  changeQuietMode() {\n    this.hass.callService(\"input_boolean\", \"toggle\", {\n      entity_id: \"input_boolean.ais_quiet_mode\",\n    });\n  }\n}\n\ncustomElements.define(\"ha-config-ais-dom-config-night\", HaConfigAisDomControl);\n"],"names":[],"sourceRoot":""}