{"version":3,"file":"2c96e10d.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;;AAGA;AACA;;AAGA;;AAEA;;;AAIA;AACA;AAGA;;;AA3FA;;AA0NA;AACA;AAGA;AACA;AACA;;;;AAIA;AACA;;AArOA;;;;;;;;;AAAA;;;;;;ACTA;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;;AAOA;;AAGA;;;;AAIA;;AAEA;;;AAIA;AACA;;;;;;AAnFA;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-statistic-picker.ts","webpack://home-assistant-frontend/./src/components/ha-combo-box.ts"],"sourcesContent":["import { mdiCheck } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport { getStatisticIds, StatisticsMetaData } from \"../../data/history\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\n\n@customElement(\"ha-statistic-picker\")\nexport class HaStatisticPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ type: Array }) public statisticIds?: StatisticsMetaData[];\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  /**\n   * Show only statistics with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * Show only statistics with these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only statistics on entities.\n   * @type {Boolean}\n   * @attr entities-only\n   */\n  @property({ type: Boolean, attribute: \"entities-only\" })\n  public entitiesOnly = false;\n\n  @state() private _opened?: boolean;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _init = false;\n\n  private _rowRenderer: ComboBoxLitRenderer<{\n    id: string;\n    name: string;\n    state?: HassEntity;\n    // eslint-disable-next-line lit/prefer-static-styles\n  }> = (item) => html`<style>\n      paper-icon-item {\n        padding: 0;\n        margin: -8px;\n      }\n      #content {\n        display: flex;\n        align-items: center;\n      }\n      ha-svg-icon {\n        padding-left: 2px;\n        color: var(--secondary-text-color);\n      }\n      :host(:not([selected])) ha-svg-icon {\n        display: none;\n      }\n      :host([selected]) paper-icon-item {\n        margin-left: 0;\n      }\n      a {\n        color: var(--primary-color);\n      }\n    </style>\n    <ha-svg-icon .path=${mdiCheck}></ha-svg-icon>\n    <paper-icon-item>\n      ${item.state\n        ? html`<state-badge\n            slot=\"item-icon\"\n            .stateObj=${item.state}\n          ></state-badge>`\n        : \"\"}\n      <paper-item-body two-line=\"\">\n        ${item.name}\n        <span secondary\n          >${item.id === \"\" || item.id === \"__missing\"\n            ? html`<a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href=${documentationUrl(this.hass, \"/more-info/statistics/\")}\n                >${this.hass.localize(\n                  \"ui.components.statistic-picker.learn_more\"\n                )}</a\n              >`\n            : item.id}</span\n        >\n      </paper-item-body>\n    </paper-icon-item>`;\n\n  private _getStatistics = memoizeOne(\n    (\n      statisticIds: StatisticsMetaData[],\n      includeUnitOfMeasurement?: string[],\n      includeDeviceClasses?: string[],\n      entitiesOnly?: boolean\n    ): Array<{ id: string; name: string; state?: HassEntity }> => {\n      if (!statisticIds.length) {\n        return [\n          {\n            id: \"\",\n            name: this.hass.localize(\n              \"ui.components.statistic-picker.no_statistics\"\n            ),\n          },\n        ];\n      }\n\n      if (includeUnitOfMeasurement) {\n        statisticIds = statisticIds.filter((meta) =>\n          includeUnitOfMeasurement.includes(meta.unit_of_measurement)\n        );\n      }\n\n      const output: Array<{\n        id: string;\n        name: string;\n        state?: HassEntity;\n      }> = [];\n      statisticIds.forEach((meta) => {\n        const entityState = this.hass.states[meta.statistic_id];\n        if (!entityState) {\n          if (!entitiesOnly) {\n            output.push({\n              id: meta.statistic_id,\n              name: meta.name || meta.statistic_id,\n            });\n          }\n          return;\n        }\n        if (\n          !includeDeviceClasses ||\n          includeDeviceClasses.includes(\n            entityState!.attributes.device_class || \"\"\n          )\n        ) {\n          output.push({\n            id: meta.statistic_id,\n            name: computeStateName(entityState),\n            state: entityState,\n          });\n        }\n      });\n\n      if (!output.length) {\n        return [\n          {\n            id: \"\",\n            name: this.hass.localize(\"ui.components.statistic-picker.no_match\"),\n          },\n        ];\n      }\n\n      if (output.length > 1) {\n        output.sort((a, b) => stringCompare(a.name || \"\", b.name || \"\"));\n      }\n\n      output.push({\n        id: \"__missing\",\n        name: this.hass.localize(\n          \"ui.components.statistic-picker.missing_entity\"\n        ),\n      });\n\n      return output;\n    }\n  );\n\n  public open() {\n    this.comboBox?.open();\n  }\n\n  public focus() {\n    this.comboBox?.focus();\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (\n      (!this.hasUpdated && !this.statisticIds) ||\n      changedProps.has(\"statisticTypes\")\n    ) {\n      this._getStatisticIds();\n    }\n    if (\n      (!this._init && this.statisticIds) ||\n      (changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      if (this.hasUpdated) {\n        (this.comboBox as any).items = this._getStatistics(\n          this.statisticIds!,\n          this.includeUnitOfMeasurement,\n          this.includeDeviceClasses,\n          this.entitiesOnly\n        );\n      } else {\n        this.updateComplete.then(() => {\n          (this.comboBox as any).items = this._getStatistics(\n            this.statisticIds!,\n            this.includeUnitOfMeasurement,\n            this.includeDeviceClasses,\n            this.entitiesOnly\n          );\n        });\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.statistic-picker.statistic\")\n          : this.label}\n        .value=${this._value}\n        .renderer=${this._rowRenderer}\n        .disabled=${this.disabled}\n        item-value-path=\"id\"\n        item-id-path=\"id\"\n        item-label-path=\"name\"\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._statisticChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private async _getStatisticIds() {\n    this.statisticIds = await getStatisticIds(this.hass, this.statisticTypes);\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _statisticChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n    if (newValue === \"__missing\") {\n      newValue = \"\";\n    }\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      paper-input > ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistic-picker\": HaStatisticPicker;\n  }\n}\n","import { mdiClose, mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@vaadin/vaadin-combo-box/theme/material/vaadin-combo-box-light\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer, comboBoxRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst defaultRowRenderer: ComboBoxLitRenderer<string> = (item) => html`<style>\n    paper-item {\n      margin: -5px -10px;\n      padding: 0;\n    }\n  </style>\n  <paper-item>${item}</paper-item>`;\n\n@customElement(\"ha-combo-box\")\nexport class HaComboBox extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public items?: [];\n\n  @property() public filteredItems?: [];\n\n  @property({ attribute: \"allow-custom-value\", type: Boolean })\n  public allowCustomValue?: boolean;\n\n  @property({ attribute: \"item-value-path\" }) public itemValuePath?: string;\n\n  @property({ attribute: \"item-label-path\" }) public itemLabelPath?: string;\n\n  @property({ attribute: \"item-id-path\" }) public itemIdPath?: string;\n\n  @property() public renderer?: ComboBoxLitRenderer<any>;\n\n  @property({ type: Boolean }) public disabled?: boolean;\n\n  @state() private _opened?: boolean;\n\n  @query(\"vaadin-combo-box-light\", true) private _comboBox!: HTMLElement;\n\n  public open() {\n    this.updateComplete.then(() => {\n      (this._comboBox as any)?.open();\n    });\n  }\n\n  public focus() {\n    this.updateComplete.then(() => {\n      this.shadowRoot?.querySelector(\"paper-input\")?.focus();\n    });\n  }\n\n  public get selectedItem() {\n    return (this._comboBox as any).selectedItem;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <vaadin-combo-box-light\n        .itemValuePath=${this.itemValuePath}\n        .itemIdPath=${this.itemIdPath}\n        .itemLabelPath=${this.itemLabelPath}\n        .value=${this.value}\n        .items=${this.items}\n        .filteredItems=${this.filteredItems}\n        .allowCustomValue=${this.allowCustomValue}\n        .disabled=${this.disabled}\n        ${comboBoxRenderer(this.renderer || defaultRowRenderer)}\n        @opened-changed=${this._openedChanged}\n        @filter-changed=${this._filterChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .label=${this.label}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <ha-icon-button\n                  .label=${this.hass.localize(\"ui.components.combo-box.clear\")}\n                  .path=${mdiClose}\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  @click=${this._clearValue}\n                ></ha-icon-button>\n              `\n            : \"\"}\n\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.components.combo-box.show\")}\n            .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n            slot=\"suffix\"\n            class=\"toggle-button\"\n          ></ha-icon-button>\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private _clearValue(ev: Event) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", { value: undefined });\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    // @ts-ignore\n    fireEvent(this, ev.type, ev.detail);\n  }\n\n  private _filterChanged(ev: PolymerChangedEvent<string>) {\n    // @ts-ignore\n    fireEvent(this, ev.type, ev.detail, { composed: false });\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    if (newValue !== this.value) {\n      fireEvent(this, \"value-changed\", { value: newValue });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      paper-input > ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-combo-box\": HaComboBox;\n  }\n}\n"],"names":[],"sourceRoot":""}