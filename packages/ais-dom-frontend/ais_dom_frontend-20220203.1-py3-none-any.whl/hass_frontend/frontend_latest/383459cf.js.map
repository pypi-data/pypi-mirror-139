{"version":3,"file":"383459cf.js","mappings":";;AA4CA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAIA;AACA;;;;;;;;;;;;;;;;AAxCA;ACEA;AACA;;AAGA;;;;;;;;AAXA;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;AAzBA;;;;;;;;;;;;;;;;;;;ACPA;;;;;AAAA;;ACKA;AACA;;AAEA;;AATA;;ACwIA;;AAEA;AACA;;;;;;AAMA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAOA;;;;;;;AAQA;;AAGA;AAEA;AACA;;;AAGA;;AAGA;AACA;;AAEA;;AAGA;;;AAIA;;AAQA;;AAEA;;AAGA;AACA;AACA;AACA;;AASA;;AAzBA;;;;AAiCA;;AAzJA;;AAmMA;AACA;AACA;;;AAGA;AAEA;;;AAGA;AAEA;;;;AAIA;AACA;;AAGA;;AAEA;;AAzNA;;AAkOA;AACA;;;;;;AAMA;;AAEA;;AAEA;AAEA;;AAEA;AAEA;;;;AAIA;;AAvPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/common/search/search-input.ts","webpack://home-assistant-frontend/./src/components/ha-chip.ts","webpack://home-assistant-frontend/./src/components/ha-header-bar.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/dialogs/quick-bar/ha-quick-bar.ts"],"sourcesContent":["import { mdiClose, mdiMagnify } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-svg-icon\";\nimport { HomeAssistant } from \"../../types\";\nimport { fireEvent } from \"../dom/fire_event\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Boolean, attribute: \"no-underline\" })\n  public noUnderline = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  @property({ type: String })\n  public label?: string;\n\n  public focus() {\n    this.shadowRoot!.querySelector(\"paper-input\")!.focus();\n  }\n\n  @query(\"paper-input\", true) private _input!: PaperInputElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .autofocus=${this.autofocus}\n        .label=${this.label || \"Search\"}\n        .value=${this.filter}\n        @value-changed=${this._filterInputChanged}\n        .noLabelFloat=${this.noLabelFloat}\n      >\n        <slot name=\"prefix\" slot=\"prefix\">\n          <ha-svg-icon class=\"prefix\" .path=${mdiMagnify}></ha-svg-icon>\n        </slot>\n        ${this.filter &&\n        html`\n          <ha-icon-button\n            slot=\"suffix\"\n            @click=${this._clearSearch}\n            .label=${this.hass.localize(\"ui.common.clear\")}\n            .path=${mdiClose}\n          ></ha-icon-button>\n        `}\n      </paper-input>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"noUnderline\") &&\n      (this.noUnderline || changedProps.get(\"noUnderline\") !== undefined)\n    ) {\n      (\n        this._input.inputElement!.parentElement!.shadowRoot!.querySelector(\n          \"div.unfocused-line\"\n        ) as HTMLElement\n      ).style.display = this.noUnderline ? \"none\" : \"block\";\n    }\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon,\n      ha-icon-button {\n        color: var(--primary-text-color);\n      }\n      ha-icon-button {\n        --mdc-icon-button-size: 24px;\n      }\n      ha-svg-icon.prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","// @ts-ignore\nimport chipStyles from \"@material/chips/dist/mdc.chips.min.css\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-chip\")\nexport class HaChip extends LitElement {\n  @property({ type: Boolean }) public hasIcon = false;\n\n  @property({ type: Boolean }) public noText = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"mdc-chip ${this.noText ? \"no-text\" : \"\"}\">\n        ${this.hasIcon\n          ? html`<div class=\"mdc-chip__icon mdc-chip__icon--leading\">\n              <slot name=\"icon\"></slot>\n            </div>`\n          : null}\n        <div class=\"mdc-chip__ripple\"></div>\n        <span role=\"gridcell\">\n          <span role=\"button\" tabindex=\"0\" class=\"mdc-chip__primary-action\">\n            <span class=\"mdc-chip__text\"><slot></slot></span>\n          </span>\n        </span>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ${unsafeCSS(chipStyles)}\n      .mdc-chip {\n        background-color: var(\n          --ha-chip-background-color,\n          rgba(var(--rgb-primary-text-color), 0.15)\n        );\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip.no-text {\n        padding: 0 10px;\n      }\n\n      .mdc-chip:hover {\n        color: var(--ha-chip-text-color, var(--primary-text-color));\n      }\n\n      .mdc-chip__icon--leading {\n        --mdc-icon-size: 20px;\n        color: var(--ha-chip-icon-color, var(--ha-chip-text-color));\n      }\n      .mdc-chip.no-text\n        .mdc-chip__icon--leading:not(.mdc-chip__icon--leading-hidden) {\n        margin-right: -4px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-chip\": HaChip;\n  }\n}\n","// @ts-ignore\nimport topAppBarStyles from \"@material/top-app-bar/dist/mdc.top-app-bar.min.css\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-header-bar\")\nexport class HaHeaderBar extends LitElement {\n  protected render() {\n    return html`<header class=\"mdc-top-app-bar\">\n      <div class=\"mdc-top-app-bar__row\">\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"\n          id=\"navigation\"\n        >\n          <slot name=\"navigationIcon\"></slot>\n          <span class=\"mdc-top-app-bar__title\">\n            <slot name=\"title\"></slot>\n          </span>\n        </section>\n        <section\n          class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\"\n          id=\"actions\"\n          role=\"toolbar\"\n        >\n          <slot name=\"actionItems\"></slot>\n        </section>\n      </div>\n    </header>`;\n  }\n\n  static get styles() {\n    return [\n      unsafeCSS(topAppBarStyles),\n      css`\n        .mdc-top-app-bar {\n          position: static;\n          color: var(--mdc-theme-on-primary, #fff);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-header-bar\": HaHeaderBar;\n  }\n}\n","import { TextField } from \"@material/mwc-textfield\";\nimport { TemplateResult, html } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextField {\n  override renderIcon(_icon: string, isTrailingIcon = false): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"../../components/ha-textfield\";\nimport { Layout1d, scroll } from \"@lit-labs/virtualizer\";\nimport \"@material/mwc-list/mwc-list\";\nimport type { List } from \"@material/mwc-list/mwc-list\";\nimport { SingleSelectedEvent } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport type { ListItem } from \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiClose,\n  mdiConsoleLine,\n  mdiEarth,\n  mdiMagnify,\n  mdiReload,\n  mdiServerNetwork,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { canShowPage } from \"../../common/config/can_show_page\";\nimport { componentsWithService } from \"../../common/config/components_with_service\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { domainIcon } from \"../../common/entity/domain_icon\";\nimport { navigate } from \"../../common/navigate\";\nimport \"../../common/search/search-input\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport {\n  fuzzyFilterSort,\n  ScorableTextItem,\n} from \"../../common/string/filter/sequence-matching\";\nimport { debounce } from \"../../common/util/debounce\";\nimport \"../../components/ha-chip\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-header-bar\";\nimport \"../../components/ha-icon-button\";\nimport { domainToName } from \"../../data/integration\";\nimport { getPanelNameTranslationKey } from \"../../data/panel\";\nimport { PageNavigation } from \"../../layouts/hass-tabs-subpage\";\nimport { configSections } from \"../../panels/config/ha-panel-config\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport {\n  ConfirmationDialogParams,\n  showConfirmationDialog,\n} from \"../generic/show-dialog-box\";\nimport { QuickBarParams } from \"./show-dialog-quick-bar\";\n\ninterface QuickBarItem extends ScorableTextItem {\n  primaryText: string;\n  iconPath?: string;\n  action(data?: any): void;\n}\n\ninterface CommandItem extends QuickBarItem {\n  categoryKey: \"reload\" | \"navigation\" | \"server_control\";\n  categoryText: string;\n}\n\ninterface EntityItem extends QuickBarItem {\n  altText: string;\n  icon?: string;\n}\n\nconst isCommandItem = (item: QuickBarItem): item is CommandItem =>\n  (item as CommandItem).categoryKey !== undefined;\n\ninterface QuickBarNavigationItem extends CommandItem {\n  path: string;\n}\n\ntype NavigationInfo = PageNavigation & Pick<QuickBarItem, \"primaryText\">;\n\ntype BaseNavigationCommand = Pick<\n  QuickBarNavigationItem,\n  \"primaryText\" | \"path\"\n>;\n@customElement(\"ha-quick-bar\")\nexport class QuickBar extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _commandItems?: CommandItem[];\n\n  @state() private _entityItems?: EntityItem[];\n\n  @state() private _filter = \"\";\n\n  @state() private _search = \"\";\n\n  @state() private _opened = false;\n\n  @state() private _commandMode = false;\n\n  @state() private _done = false;\n\n  @state() private _narrow = false;\n\n  @state() private _hint?: string;\n\n  @query(\"ha-textfield\", false) private _filterInputField?: HTMLElement;\n\n  private _focusSet = false;\n\n  private _focusListElement?: ListItem | null;\n\n  public async showDialog(params: QuickBarParams) {\n    this._commandMode = params.commandMode || this._toggleIfAlreadyOpened();\n    this._hint = params.hint;\n    this._narrow = matchMedia(\n      \"all and (max-width: 450px), all and (max-height: 500px)\"\n    ).matches;\n    this._initializeItemsIfNeeded();\n    this._opened = true;\n  }\n\n  public closeDialog() {\n    this._opened = false;\n    this._done = false;\n    this._focusSet = false;\n    this._filter = \"\";\n    this._search = \"\";\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render() {\n    if (!this._opened) {\n      return html``;\n    }\n\n    let items: QuickBarItem[] | undefined = this._commandMode\n      ? this._commandItems\n      : this._entityItems;\n\n    if (items && this._filter && this._filter !== \" \") {\n      items = this._filterItems(items, this._filter);\n    }\n\n    return html`\n      <ha-dialog\n        .heading=${this.hass.localize(\"ui.dialogs.quick-bar.title\")}\n        open\n        @opened=${this._handleOpened}\n        @closed=${this.closeDialog}\n        hideActions\n      >\n        <div slot=\"heading\" class=\"heading\">\n          <ha-textfield\n            dialogInitialFocus\n            .placeholder=${this.hass.localize(\n              \"ui.dialogs.quick-bar.filter_placeholder\"\n            )}\n            aria-label=${this.hass.localize(\n              \"ui.dialogs.quick-bar.filter_placeholder\"\n            )}\n            .value=${this._commandMode ? `>${this._search}` : this._search}\n            .icon=${true}\n            .iconTrailing=${this._search !== undefined || this._narrow}\n            @input=${this._handleSearchChange}\n            @keydown=${this._handleInputKeyDown}\n            @focus=${this._setFocusFirstListItem}\n          >\n            ${this._commandMode\n              ? html`\n                  <ha-svg-icon\n                    slot=\"leadingIcon\"\n                    class=\"prefix\"\n                    .path=${mdiConsoleLine}\n                  ></ha-svg-icon>\n                `\n              : html`\n                  <ha-svg-icon\n                    slot=\"leadingIcon\"\n                    class=\"prefix\"\n                    .path=${mdiMagnify}\n                  ></ha-svg-icon>\n                `}\n            ${this._search || this._narrow\n              ? html`\n                  <div slot=\"trailingIcon\">\n                    ${this._search &&\n                    html`<ha-icon-button\n                      @click=${this._clearSearch}\n                      .label=${this.hass!.localize(\"ui.common.clear\")}\n                      .path=${mdiClose}\n                    ></ha-icon-button>`}\n                    ${this._narrow\n                      ? html`\n                          <mwc-button\n                            .label=${this.hass!.localize(\"ui.common.close\")}\n                            @click=${this.closeDialog}\n                          ></mwc-button>\n                        `\n                      : \"\"}\n                  </div>\n                `\n              : \"\"}\n          </ha-textfield>\n        </div>\n        ${!items\n          ? html`<ha-circular-progress\n              size=\"small\"\n              active\n            ></ha-circular-progress>`\n          : items.length === 0\n          ? html`\n              <div class=\"nothing-found\">\n                ${this.hass.localize(\"ui.dialogs.quick-bar.nothing_found\")}\n              </div>\n            `\n          : html`\n              <mwc-list\n                @rangechange=${this._handleRangeChanged}\n                @keydown=${this._handleListItemKeyDown}\n                @selected=${this._handleSelected}\n                style=${styleMap({\n                  height: this._narrow\n                    ? \"calc(100vh - 56px)\"\n                    : `${Math.min(\n                        items.length * (this._commandMode ? 56 : 72) + 26,\n                        this._done ? 500 : 0\n                      )}px`,\n                })}\n              >\n                ${scroll({\n                  items,\n                  layout: Layout1d,\n                  renderItem: (item: QuickBarItem, index) =>\n                    this._renderItem(item, index),\n                })}\n              </mwc-list>\n            `}\n        ${this._hint ? html`<div class=\"hint\">${this._hint}</div>` : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  private _initializeItemsIfNeeded() {\n    if (this._commandMode) {\n      this._commandItems = this._commandItems || this._generateCommandItems();\n    } else {\n      this._entityItems = this._entityItems || this._generateEntityItems();\n    }\n  }\n\n  private _handleOpened() {\n    this.updateComplete.then(() => {\n      this._done = true;\n    });\n  }\n\n  private async _handleRangeChanged(e) {\n    if (this._focusSet) {\n      return;\n    }\n    if (e.firstVisible > -1) {\n      this._focusSet = true;\n      await this.updateComplete;\n      this._setFocusFirstListItem();\n    }\n  }\n\n  private _renderItem(item: QuickBarItem, index?: number) {\n    if (!item) {\n      return html``;\n    }\n    return isCommandItem(item)\n      ? this._renderCommandItem(item, index)\n      : this._renderEntityItem(item as EntityItem, index);\n  }\n\n  private _renderEntityItem(item: EntityItem, index?: number) {\n    return html`\n      <mwc-list-item\n        .twoline=${Boolean(item.altText)}\n        .item=${item}\n        index=${ifDefined(index)}\n        graphic=\"icon\"\n      >\n        ${item.iconPath\n          ? html`<ha-svg-icon\n              .path=${item.iconPath}\n              class=\"entity\"\n              slot=\"graphic\"\n            ></ha-svg-icon>`\n          : html`<ha-icon\n              .icon=${item.icon}\n              class=\"entity\"\n              slot=\"graphic\"\n            ></ha-icon>`}\n        <span>${item.primaryText}</span>\n        ${item.altText\n          ? html`\n              <span slot=\"secondary\" class=\"item-text secondary\"\n                >${item.altText}</span\n              >\n            `\n          : null}\n      </mwc-list-item>\n    `;\n  }\n\n  private _renderCommandItem(item: CommandItem, index?: number) {\n    return html`\n      <mwc-list-item\n        .item=${item}\n        index=${ifDefined(index)}\n        class=\"command-item\"\n        hasMeta\n      >\n        <span>\n          <ha-chip\n            .label=${item.categoryText}\n            hasIcon\n            class=\"command-category ${item.categoryKey}\"\n          >\n            ${item.iconPath\n              ? html`<ha-svg-icon\n                  .path=${item.iconPath}\n                  slot=\"icon\"\n                ></ha-svg-icon>`\n              : \"\"}\n            ${item.categoryText}</ha-chip\n          >\n        </span>\n\n        <span class=\"command-text\">${item.primaryText}</span>\n      </mwc-list-item>\n    `;\n  }\n\n  private async processItemAndCloseDialog(item: QuickBarItem, index: number) {\n    this._addSpinnerToCommandItem(index);\n\n    await item.action();\n    this.closeDialog();\n  }\n\n  private _handleSelected(ev: SingleSelectedEvent) {\n    const index = ev.detail.index;\n    if (index < 0) {\n      return;\n    }\n\n    const item = ((ev.target as List).items[index] as any).item;\n    this.processItemAndCloseDialog(item, index);\n  }\n\n  private _handleInputKeyDown(ev: KeyboardEvent) {\n    if (ev.code === \"Enter\") {\n      const firstItem = this._getItemAtIndex(0);\n      if (!firstItem || firstItem.style.display === \"none\") {\n        return;\n      }\n      this.processItemAndCloseDialog((firstItem as any).item, 0);\n    } else if (ev.code === \"ArrowDown\") {\n      ev.preventDefault();\n      this._getItemAtIndex(0)?.focus();\n      this._focusSet = true;\n      this._focusListElement = this._getItemAtIndex(0);\n    }\n  }\n\n  private _getItemAtIndex(index: number): ListItem | null {\n    return this.renderRoot.querySelector(`mwc-list-item[index=\"${index}\"]`);\n  }\n\n  private _addSpinnerToCommandItem(index: number): void {\n    const spinner = document.createElement(\"ha-circular-progress\");\n    spinner.size = \"small\";\n    spinner.slot = \"meta\";\n    spinner.active = true;\n    this._getItemAtIndex(index)?.appendChild(spinner);\n  }\n\n  private _handleSearchChange(ev: CustomEvent): void {\n    const newFilter = (ev.currentTarget as any).value;\n    const oldCommandMode = this._commandMode;\n    const oldSearch = this._search;\n    let newCommandMode: boolean;\n    let newSearch: string;\n\n    if (newFilter.startsWith(\">\")) {\n      newCommandMode = true;\n      newSearch = newFilter.substring(1);\n    } else {\n      newCommandMode = false;\n      newSearch = newFilter;\n    }\n\n    if (oldCommandMode === newCommandMode && oldSearch === newSearch) {\n      return;\n    }\n\n    this._commandMode = newCommandMode;\n    this._search = newSearch;\n\n    if (this._hint) {\n      this._hint = undefined;\n    }\n\n    if (oldCommandMode !== this._commandMode) {\n      this._focusSet = false;\n      this._initializeItemsIfNeeded();\n      this._filter = this._search;\n    } else {\n      if (this._focusSet && this._focusListElement) {\n        this._focusSet = false;\n        // @ts-ignore\n        this._focusListElement.rippleHandlers.endFocus();\n      }\n      this._debouncedSetFilter(this._search);\n    }\n  }\n\n  private _clearSearch() {\n    this._search = \"\";\n    this._filter = \"\";\n  }\n\n  private _debouncedSetFilter = debounce((filter: string) => {\n    this._filter = filter;\n  }, 100);\n\n  private _setFocusFirstListItem() {\n    // @ts-ignore\n    this._getItemAtIndex(0)?.rippleHandlers.startFocus();\n    this._focusListElement = this._getItemAtIndex(0);\n  }\n\n  private _handleListItemKeyDown(ev: KeyboardEvent) {\n    const isSingleCharacter = ev.key.length === 1;\n    const isFirstListItem =\n      (ev.target as HTMLElement).getAttribute(\"index\") === \"0\";\n    this._focusListElement = ev.target as ListItem;\n    if (ev.key === \"ArrowUp\") {\n      if (isFirstListItem) {\n        this._filterInputField?.focus();\n      }\n    }\n    if (ev.key === \"Backspace\" || isSingleCharacter) {\n      (ev.currentTarget as List).scrollTop = 0;\n      this._filterInputField?.focus();\n    }\n  }\n\n  private _generateEntityItems(): EntityItem[] {\n    return Object.keys(this.hass.states)\n      .map((entityId) => {\n        const entityState = this.hass.states[entityId];\n        const entityItem = {\n          primaryText: computeStateName(entityState),\n          altText: entityId,\n          icon: entityState.attributes.icon,\n          iconPath: entityState.attributes.icon\n            ? undefined\n            : domainIcon(computeDomain(entityId), entityState),\n          action: () => fireEvent(this, \"hass-more-info\", { entityId }),\n        };\n\n        return {\n          ...entityItem,\n          strings: [entityItem.primaryText, entityItem.altText],\n        };\n      })\n      .sort((a, b) =>\n        caseInsensitiveStringCompare(a.primaryText, b.primaryText)\n      );\n  }\n\n  private _generateCommandItems(): CommandItem[] {\n    return [\n      ...this._generateReloadCommands(),\n      ...this._generateServerControlCommands(),\n      ...this._generateNavigationCommands(),\n    ].sort((a, b) =>\n      caseInsensitiveStringCompare(a.strings.join(\" \"), b.strings.join(\" \"))\n    );\n  }\n\n  private _generateReloadCommands(): CommandItem[] {\n    // Get all domains that have a direct \"reload\" service\n    const reloadableDomains = componentsWithService(this.hass, \"reload\");\n\n    const commands = reloadableDomains.map((domain) => ({\n      primaryText:\n        this.hass.localize(`ui.dialogs.quick-bar.commands.reload.${domain}`) ||\n        this.hass.localize(\n          \"ui.dialogs.quick-bar.commands.reload.reload\",\n          \"domain\",\n          domainToName(this.hass.localize, domain)\n        ),\n      action: () => this.hass.callService(domain, \"reload\"),\n      iconPath: mdiReload,\n      categoryText: this.hass.localize(\n        `ui.dialogs.quick-bar.commands.types.reload`\n      ),\n    }));\n\n    // Add \"frontend.reload_themes\"\n    commands.push({\n      primaryText: this.hass.localize(\n        \"ui.dialogs.quick-bar.commands.reload.themes\"\n      ),\n      action: () => this.hass.callService(\"frontend\", \"reload_themes\"),\n      iconPath: mdiReload,\n      categoryText: this.hass.localize(\n        \"ui.dialogs.quick-bar.commands.types.reload\"\n      ),\n    });\n\n    // Add \"homeassistant.reload_core_config\"\n    commands.push({\n      primaryText: this.hass.localize(\n        \"ui.dialogs.quick-bar.commands.reload.core\"\n      ),\n      action: () =>\n        this.hass.callService(\"homeassistant\", \"reload_core_config\"),\n      iconPath: mdiReload,\n      categoryText: this.hass.localize(\n        \"ui.dialogs.quick-bar.commands.types.reload\"\n      ),\n    });\n\n    return commands.map((command) => ({\n      ...command,\n      categoryKey: \"reload\",\n      strings: [`${command.categoryText} ${command.primaryText}`],\n    }));\n  }\n\n  private _generateServerControlCommands(): CommandItem[] {\n    const serverActions = [\"restart\", \"stop\"];\n\n    return serverActions.map((action) => {\n      const categoryKey: CommandItem[\"categoryKey\"] = \"server_control\";\n\n      const item = {\n        primaryText: this.hass.localize(\n          \"ui.dialogs.quick-bar.commands.server_control.perform_action\",\n          \"action\",\n          this.hass.localize(\n            `ui.dialogs.quick-bar.commands.server_control.${action}`\n          )\n        ),\n        iconPath: mdiServerNetwork,\n        categoryText: this.hass.localize(\n          `ui.dialogs.quick-bar.commands.types.${categoryKey}`\n        ),\n        categoryKey,\n        action: () => this.hass.callService(\"homeassistant\", action),\n      };\n\n      return this._generateConfirmationCommand(\n        {\n          ...item,\n          strings: [`${item.categoryText} ${item.primaryText}`],\n        },\n        this.hass.localize(\"ui.dialogs.generic.ok\")\n      );\n    });\n  }\n\n  private _generateNavigationCommands(): CommandItem[] {\n    const panelItems = this._generateNavigationPanelCommands();\n    const sectionItems = this._generateNavigationConfigSectionCommands();\n\n    return this._finalizeNavigationCommands([...panelItems, ...sectionItems]);\n  }\n\n  private _generateNavigationPanelCommands(): BaseNavigationCommand[] {\n    return Object.keys(this.hass.panels)\n      .filter((panelKey) => panelKey !== \"_my_redirect\")\n      .map((panelKey) => {\n        const panel = this.hass.panels[panelKey];\n        const translationKey = getPanelNameTranslationKey(panel);\n\n        const primaryText =\n          this.hass.localize(translationKey) || panel.title || panel.url_path;\n\n        return {\n          primaryText,\n          path: `/${panel.url_path}`,\n        };\n      });\n  }\n\n  private _generateNavigationConfigSectionCommands(): BaseNavigationCommand[] {\n    const items: NavigationInfo[] = [];\n\n    for (const sectionKey of Object.keys(configSections)) {\n      for (const page of configSections[sectionKey]) {\n        if (!canShowPage(this.hass, page)) {\n          continue;\n        }\n        if (!page.component) {\n          continue;\n        }\n        const info = this._getNavigationInfoFromConfig(page);\n\n        if (!info) {\n          continue;\n        }\n        // Add to list, but only if we do not already have an entry for the same path and component\n        if (\n          items.some(\n            (e) => e.path === info.path && e.component === info.component\n          )\n        ) {\n          continue;\n        }\n\n        items.push(info);\n      }\n    }\n\n    return items;\n  }\n\n  private _getNavigationInfoFromConfig(\n    page: PageNavigation\n  ): NavigationInfo | undefined {\n    if (!page.component) {\n      return undefined;\n    }\n    const caption = this.hass.localize(\n      `ui.dialogs.quick-bar.commands.navigation.${page.component}`\n    );\n\n    if (page.translationKey && caption) {\n      return { ...page, primaryText: caption };\n    }\n\n    return undefined;\n  }\n\n  private _generateConfirmationCommand(\n    item: CommandItem,\n    confirmText: ConfirmationDialogParams[\"confirmText\"]\n  ): CommandItem {\n    return {\n      ...item,\n      action: () =>\n        showConfirmationDialog(this, {\n          confirmText,\n          confirm: item.action,\n        }),\n    };\n  }\n\n  private _finalizeNavigationCommands(\n    items: BaseNavigationCommand[]\n  ): CommandItem[] {\n    return items.map((item) => {\n      const categoryKey: CommandItem[\"categoryKey\"] = \"navigation\";\n\n      const navItem = {\n        ...item,\n        iconPath: mdiEarth,\n        categoryText: this.hass.localize(\n          `ui.dialogs.quick-bar.commands.types.${categoryKey}`\n        ),\n        action: () => navigate(item.path),\n      };\n\n      return {\n        ...navItem,\n        strings: [`${navItem.categoryText} ${navItem.primaryText}`],\n        categoryKey,\n      };\n    });\n  }\n\n  private _toggleIfAlreadyOpened() {\n    return this._opened ? !this._commandMode : false;\n  }\n\n  private _filterItems = memoizeOne(\n    (items: QuickBarItem[], filter: string): QuickBarItem[] =>\n      fuzzyFilterSort<QuickBarItem>(filter.trimLeft(), items)\n  );\n\n  static get styles() {\n    return [\n      haStyleDialog,\n      css`\n        .heading {\n          display: flex;\n          align-items: center;\n          --mdc-theme-primary: var(--primary-text-color);\n        }\n\n        .heading ha-textfield {\n          flex-grow: 1;\n        }\n\n        ha-dialog {\n          --dialog-z-index: 8;\n          --dialog-content-padding: 0;\n        }\n\n        @media (min-width: 800px) {\n          ha-dialog {\n            --mdc-dialog-max-width: 800px;\n            --mdc-dialog-min-width: 500px;\n            --dialog-surface-position: fixed;\n            --dialog-surface-top: 40px;\n            --mdc-dialog-max-height: calc(100% - 72px);\n          }\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-textfield {\n            --mdc-shape-small: 0;\n          }\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 690px) {\n          .hint {\n            display: none;\n          }\n        }\n\n        ha-icon.entity,\n        ha-svg-icon.entity {\n          margin-left: 20px;\n        }\n\n        ha-svg-icon.prefix {\n          color: var(--primary-text-color);\n        }\n\n        ha-textfield ha-icon-button {\n          --mdc-icon-button-size: 24px;\n          color: var(--primary-text-color);\n        }\n\n        .command-category {\n          --ha-chip-icon-color: #585858;\n          --ha-chip-text-color: #212121;\n        }\n\n        .command-category.reload {\n          --ha-chip-background-color: #cddc39;\n        }\n\n        .command-category.navigation {\n          --ha-chip-background-color: var(--light-primary-color);\n        }\n\n        .command-category.server_control {\n          --ha-chip-background-color: var(--warning-color);\n        }\n\n        span.command-text {\n          margin-left: 8px;\n        }\n\n        mwc-list-item {\n          width: 100%;\n        }\n\n        mwc-list-item.command-item {\n          text-transform: capitalize;\n        }\n\n        .hint {\n          padding: 20px;\n          font-style: italic;\n          text-align: center;\n        }\n\n        .nothing-found {\n          padding: 16px 0px;\n          text-align: center;\n        }\n\n        div[slot=\"trailingIcon\"] {\n          display: flex;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-quick-bar\": QuickBar;\n  }\n}\n"],"names":[],"sourceRoot":""}