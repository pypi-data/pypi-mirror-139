{"version":3,"file":"d2c30e69.js","mappings":";AA6BA;;;;AAIA;AACA;AACA;AACA;;;;AA9BA;;;;;;;;AAAA;ACwHA;AAIA;AAeA;AAGA;AAIA;;;AAGA;;;AAIA;;AAMA;;;AAIA;AACA;;;;AAIA;AAGA;;AAIA;;AAIA;;AAGA;;;AAIA;AACA;;AAIA;;;AAKA;AACA;;;AAGA;AAGA;;AAIA;;;;;AAQA;;;AAKA;AACA;;AAEA;;AAIA;;AAEA;;AAKA;;AAKA;;;AAIA;AACA;;;;AAIA;;AAGA;AAMA;;AAEA;;;;AAKA;;;;AASA;;AAGA;AAGA;AACA;AAGA;AAGA;;AAEA;;;AAIA;;;;;AAKA;;;;;;;AAQA;;AAGA;;AAGA;AACA;AACA;AAGA;;;AAGA;AAKA;;;;AAQA;AAKA;AACA;AAGA;AAGA;;;AAGA;;;;;AAMA;;AAGA;;AAIA;AAMA;;;AAMA;;;AAMA;;;;;;AA9TA;;AAwjBA;;;AAKA;;AAEA;AAIA;;;AAMA;;;AAMA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnlBA","sources":["webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/media-player/ha-media-player-browse.ts"],"sourcesContent":["import \"@material/mwc-menu\";\nimport type { Corner, Menu } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\"></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiPlay, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport {\n  customElement,\n  eventOptions,\n  property,\n  query,\n  queryAll,\n  state,\n} from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../common/util/compute_rtl\";\nimport { debounce } from \"../../common/util/debounce\";\nimport { getSignedPath } from \"../../data/auth\";\nimport type { MediaPlayerItem } from \"../../data/media-player\";\nimport {\n  browseMediaPlayer,\n  BROWSER_PLAYER,\n  MediaClassBrowserSettings,\n  MediaPickedEvent,\n  MediaPlayerBrowseAction,\n} from \"../../data/media-player\";\nimport { showAlertDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { installResizeObserver } from \"../../panels/lovelace/common/install-resize-observer\";\nimport { haStyle } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport \"../entity/ha-entity-picker\";\nimport \"../ha-button-menu\";\nimport \"../ha-card\";\nimport type { HaCard } from \"../ha-card\";\nimport \"../ha-circular-progress\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"../ha-fab\";\nimport { browseLocalMediaPlayer } from \"../../data/media_source\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"media-picked\": MediaPickedEvent;\n    \"media-browsed\": { ids: MediaPlayerItemId[]; current?: MediaPlayerItem };\n  }\n}\n\nexport interface MediaPlayerItemId {\n  media_content_id: string | undefined;\n  media_content_type: string | undefined;\n}\n\n@customElement(\"ha-media-player-browse\")\nexport class HaMediaPlayerBrowse extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @property() public action: MediaPlayerBrowseAction = \"play\";\n\n  @property({ type: Boolean }) public dialog = false;\n\n  @property() public navigateIds!: MediaPlayerItemId[];\n\n  @property({ type: Boolean, attribute: \"narrow\", reflect: true })\n  // @ts-ignore\n  private _narrow = false;\n\n  @property({ type: Boolean, attribute: \"scroll\", reflect: true })\n  private _scrolled = false;\n\n  @state() private _error?: { message: string; code: string };\n\n  @state() private _parentItem?: MediaPlayerItem;\n\n  @state() private _currentItem?: MediaPlayerItem;\n\n  @query(\".header\") private _header?: HTMLDivElement;\n\n  @query(\".content\") private _content?: HTMLDivElement;\n\n  @queryAll(\".lazythumbnail\") private _thumbnails?: HaCard[];\n\n  private _headerOffsetHeight = 0;\n\n  private _resizeObserver?: ResizeObserver;\n\n  // @ts-ignore\n  private _intersectionObserver?: IntersectionObserver;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this.updateComplete.then(() => this._attachResizeObserver());\n  }\n\n  public disconnectedCallback(): void {\n    if (this._resizeObserver) {\n      this._resizeObserver.disconnect();\n    }\n    if (this._intersectionObserver) {\n      this._intersectionObserver.disconnect();\n    }\n  }\n\n  public play(): void {\n    if (this._currentItem?.can_play) {\n      this._runAction(this._currentItem);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (this._error) {\n      return html`\n        <div class=\"container\">${this._renderError(this._error)}</div>\n      `;\n    }\n\n    if (!this._currentItem) {\n      return html`<ha-circular-progress active></ha-circular-progress>`;\n    }\n\n    const currentItem = this._currentItem;\n\n    const subtitle = this.hass.localize(\n      `ui.components.media-browser.class.${currentItem.media_class}`\n    );\n\n    const mediaClass = MediaClassBrowserSettings[currentItem.media_class];\n    const childrenMediaClass =\n      MediaClassBrowserSettings[currentItem.children_media_class];\n\n    return html`\n              ${\n                currentItem.can_play\n                  ? html` <div\n                      class=\"header ${classMap({\n                        \"no-img\": !currentItem.thumbnail,\n                        \"no-dialog\": !this.dialog,\n                      })}\"\n                      @transitionend=${this._setHeaderHeight}\n                    >\n                      <div class=\"header-content\">\n                        ${currentItem.thumbnail\n                          ? html`\n                              <div\n                                class=\"img\"\n                                style=${styleMap({\n                                  backgroundImage: currentItem.thumbnail\n                                    ? `url(${currentItem.thumbnail})`\n                                    : \"none\",\n                                })}\n                              >\n                                ${this._narrow && currentItem?.can_play\n                                  ? html`\n                                      <ha-fab\n                                        mini\n                                        .item=${currentItem}\n                                        @click=${this._actionClicked}\n                                      >\n                                        <ha-svg-icon\n                                          slot=\"icon\"\n                                          .label=${this.hass.localize(\n                                            `ui.components.media-browser.${this.action}-media`\n                                          )}\n                                          .path=${this.action === \"play\"\n                                            ? mdiPlay\n                                            : mdiPlus}\n                                        ></ha-svg-icon>\n                                        ${this.hass.localize(\n                                          `ui.components.media-browser.${this.action}`\n                                        )}\n                                      </ha-fab>\n                                    `\n                                  : \"\"}\n                              </div>\n                            `\n                          : html``}\n                        <div class=\"header-info\">\n                          <div class=\"breadcrumb\">\n                            <h1 class=\"title\">${currentItem.title}</h1>\n                            ${subtitle\n                              ? html` <h2 class=\"subtitle\">${subtitle}</h2> `\n                              : \"\"}\n                          </div>\n                          ${currentItem.can_play &&\n                          (!currentItem.thumbnail || !this._narrow)\n                            ? html`\n                                <mwc-button\n                                  raised\n                                  .item=${currentItem}\n                                  @click=${this._actionClicked}\n                                >\n                                  <ha-svg-icon\n                                    .label=${this.hass.localize(\n                                      `ui.components.media-browser.${this.action}-media`\n                                    )}\n                                    .path=${this.action === \"play\"\n                                      ? mdiPlay\n                                      : mdiPlus}\n                                  ></ha-svg-icon>\n                                  ${this.hass.localize(\n                                    `ui.components.media-browser.${this.action}`\n                                  )}\n                                </mwc-button>\n                              `\n                            : \"\"}\n                        </div>\n                      </div>\n                    </div>`\n                  : \"\"\n              }\n          <div\n            class=\"content\"\n            @scroll=${this._scroll}\n            @touchmove=${this._scroll}\n          >\n            ${\n              this._error\n                ? html`\n                    <div class=\"container\">\n                      ${this._renderError(this._error)}\n                    </div>\n                  `\n                : currentItem.children?.length\n                ? childrenMediaClass.layout === \"grid\"\n                  ? html`\n                      <div\n                        class=\"children ${classMap({\n                          portrait:\n                            childrenMediaClass.thumbnail_ratio === \"portrait\",\n                        })}\"\n                      >\n                        ${currentItem.children.map(\n                          (child) => html`\n                            <div\n                              class=\"child\"\n                              .item=${child}\n                              @click=${this._childClicked}\n                            >\n                              <ha-card outlined>\n                                <div class=\"thumbnail\">\n                                  ${child.thumbnail\n                                    ? html`\n                                        <div\n                                          class=\"${[\n                                            \"app\",\n                                            \"directory\",\n                                          ].includes(child.media_class)\n                                            ? \"centered-image\"\n                                            : \"\"} image lazythumbnail\"\n                                          data-src=${child.thumbnail}\n                                        ></div>\n                                      `\n                                    : html`\n                                        <div class=\"icon-holder image\">\n                                          <ha-svg-icon\n                                            class=\"folder\"\n                                            .path=${MediaClassBrowserSettings[\n                                              child.media_class === \"directory\"\n                                                ? child.children_media_class ||\n                                                  child.media_class\n                                                : child.media_class\n                                            ].icon}\n                                          ></ha-svg-icon>\n                                        </div>\n                                      `}\n                                  ${child.can_play\n                                    ? html`\n                                        <ha-icon-button\n                                          class=\"play ${classMap({\n                                            can_expand: child.can_expand,\n                                          })}\"\n                                          .item=${child}\n                                          .label=${this.hass.localize(\n                                            `ui.components.media-browser.${this.action}-media`\n                                          )}\n                                          .path=${this.action === \"play\"\n                                            ? mdiPlay\n                                            : mdiPlus}\n                                          @click=${this._actionClicked}\n                                        ></ha-icon-button>\n                                      `\n                                    : \"\"}\n                                </div>\n                                <div class=\"title\">\n                                  ${child.title}\n                                  <paper-tooltip\n                                    fitToVisibleBounds\n                                    position=\"top\"\n                                    offset=\"4\"\n                                    >${child.title}</paper-tooltip\n                                  >\n                                </div>\n                              </ha-card>\n                            </div>\n                          `\n                        )}\n                      </div>\n                    `\n                  : html`\n                      <mwc-list>\n                        ${currentItem.children.map(\n                          (child) => html`\n                            <mwc-list-item\n                              @click=${this._childClicked}\n                              .item=${child}\n                              .graphic=${mediaClass.show_list_images\n                                ? \"medium\"\n                                : \"avatar\"}\n                              dir=${computeRTLDirection(this.hass)}\n                            >\n                              <div\n                                class=${classMap({\n                                  graphic: true,\n                                  lazythumbnail:\n                                    mediaClass.show_list_images === true,\n                                })}\n                                data-src=${ifDefined(\n                                  mediaClass.show_list_images && child.thumbnail\n                                    ? child.thumbnail\n                                    : undefined\n                                )}\n                                slot=\"graphic\"\n                              >\n                                <ha-icon-button\n                                  class=\"play ${classMap({\n                                    show:\n                                      !mediaClass.show_list_images ||\n                                      !child.thumbnail,\n                                  })}\"\n                                  .item=${child}\n                                  .label=${this.hass.localize(\n                                    `ui.components.media-browser.${this.action}-media`\n                                  )}\n                                  .path=${this.action === \"play\"\n                                    ? mdiPlay\n                                    : mdiPlus}\n                                  @click=${this._actionClicked}\n                                ></ha-icon-button>\n                              </div>\n                              <span class=\"title\">${child.title}</span>\n                            </mwc-list-item>\n                            <li divider role=\"separator\"></li>\n                          `\n                        )}\n                      </mwc-list>\n                    `\n                : html`\n                    <div class=\"container no-items\">\n                      ${this.hass.localize(\n                        \"ui.components.media-browser.no_items\"\n                      )}\n                      <br />\n                      ${currentItem.media_content_id ===\n                      \"media-source://media_source/local/.\"\n                        ? html`<br />${this.hass.localize(\n                              \"ui.components.media-browser.learn_adding_local_media\",\n                              \"documentation\",\n                              html`<a\n                                href=${documentationUrl(\n                                  this.hass,\n                                  \"/more-info/local-media/add-media\"\n                                )}\n                                target=\"_blank\"\n                                rel=\"noreferrer\"\n                                >${this.hass.localize(\n                                  \"ui.components.media-browser.documentation\"\n                                )}</a\n                              >`\n                            )}\n                            <br />\n                            ${this.hass.localize(\n                              \"ui.components.media-browser.local_media_files\"\n                            )}`\n                        : \"\"}\n                    </div>\n                  `\n            }\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  protected firstUpdated(): void {\n    this._measureCard();\n    this._attachResizeObserver();\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.size > 1 || !changedProps.has(\"hass\")) {\n      return true;\n    }\n    const oldHass = changedProps.get(\"hass\") as this[\"hass\"];\n    return oldHass === undefined || oldHass.localize !== this.hass.localize;\n  }\n\n  public willUpdate(changedProps: PropertyValues<this>): void {\n    super.willUpdate(changedProps);\n\n    if (changedProps.has(\"entityId\")) {\n      this._setError(undefined);\n    }\n    if (!changedProps.has(\"navigateIds\")) {\n      return;\n    }\n\n    this._setError(undefined);\n\n    const oldNavigateIds = changedProps.get(\"navigateIds\") as\n      | this[\"navigateIds\"]\n      | undefined;\n\n    // We're navigating. Reset the shizzle.\n    this._content?.scrollTo(0, 0);\n    this._scrolled = false;\n    const oldCurrentItem = this._currentItem;\n    const oldParentItem = this._parentItem;\n    this._currentItem = undefined;\n    this._parentItem = undefined;\n    const currentId = this.navigateIds[this.navigateIds.length - 1];\n    const parentId =\n      this.navigateIds.length > 1\n        ? this.navigateIds[this.navigateIds.length - 2]\n        : undefined;\n    let currentProm: Promise<MediaPlayerItem> | undefined;\n    let parentProm: Promise<MediaPlayerItem> | undefined;\n\n    // See if we can take loading shortcuts if navigating to parent or child\n    if (!changedProps.has(\"entityId\")) {\n      if (\n        // Check if we navigated to a child\n        oldNavigateIds &&\n        this.navigateIds.length > oldNavigateIds.length &&\n        oldNavigateIds.every((oldVal, idx) => {\n          const curVal = this.navigateIds[idx];\n          return (\n            curVal.media_content_id === oldVal.media_content_id &&\n            curVal.media_content_type === oldVal.media_content_type\n          );\n        })\n      ) {\n        parentProm = Promise.resolve(oldCurrentItem!);\n      } else if (\n        // Check if we navigated to a parent\n        oldNavigateIds &&\n        this.navigateIds.length < oldNavigateIds.length &&\n        this.navigateIds.every((curVal, idx) => {\n          const oldVal = oldNavigateIds[idx];\n          return (\n            curVal.media_content_id === oldVal.media_content_id &&\n            curVal.media_content_type === oldVal.media_content_type\n          );\n        })\n      ) {\n        currentProm = Promise.resolve(oldParentItem!);\n      }\n    }\n    // Fetch current\n    if (!currentProm) {\n      currentProm = this._fetchData(\n        this.entityId,\n        currentId.media_content_id,\n        currentId.media_content_type\n      );\n    }\n    currentProm.then(\n      (item) => {\n        this._currentItem = item;\n        fireEvent(this, \"media-browsed\", {\n          ids: this.navigateIds,\n          current: item,\n        });\n      },\n      (err) => this._setError(err)\n    );\n    // Fetch parent\n    if (!parentProm && parentId !== undefined) {\n      parentProm = this._fetchData(\n        this.entityId,\n        parentId.media_content_id,\n        parentId.media_content_type\n      );\n    }\n    if (parentProm) {\n      parentProm.then((parent) => {\n        this._parentItem = parent;\n      });\n    }\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"_scrolled\")) {\n      this._animateHeaderHeight();\n    } else if (changedProps.has(\"_currentItem\")) {\n      this._setHeaderHeight();\n      this._attachIntersectionObserver();\n    }\n  }\n\n  private _actionClicked(ev: MouseEvent): void {\n    ev.stopPropagation();\n    const item = (ev.currentTarget as any).item;\n\n    this._runAction(item);\n  }\n\n  private _runAction(item: MediaPlayerItem): void {\n    fireEvent(this, \"media-picked\", { item });\n  }\n\n  private async _childClicked(ev: MouseEvent): Promise<void> {\n    const target = ev.currentTarget as any;\n    const item: MediaPlayerItem = target.item;\n\n    if (!item) {\n      return;\n    }\n\n    if (!item.can_expand) {\n      this._runAction(item);\n      return;\n    }\n\n    fireEvent(this, \"media-browsed\", {\n      ids: [...this.navigateIds, item],\n    });\n  }\n\n  private async _fetchData(\n    entityId: string,\n    mediaContentId?: string,\n    mediaContentType?: string\n  ): Promise<MediaPlayerItem> {\n    return entityId !== BROWSER_PLAYER\n      ? browseMediaPlayer(this.hass, entityId, mediaContentId, mediaContentType)\n      : browseLocalMediaPlayer(this.hass, mediaContentId);\n  }\n\n  private _measureCard(): void {\n    this._narrow = (this.dialog ? window.innerWidth : this.offsetWidth) < 450;\n  }\n\n  private async _attachResizeObserver(): Promise<void> {\n    if (!this._resizeObserver) {\n      await installResizeObserver();\n      this._resizeObserver = new ResizeObserver(\n        debounce(() => this._measureCard(), 250, false)\n      );\n    }\n\n    this._resizeObserver.observe(this);\n  }\n\n  /**\n   * Load thumbnails for images on demand as they become visible.\n   */\n  private async _attachIntersectionObserver(): Promise<void> {\n    if (!(\"IntersectionObserver\" in window) || !this._thumbnails) {\n      return;\n    }\n    if (!this._intersectionObserver) {\n      this._intersectionObserver = new IntersectionObserver(\n        async (entries, observer) => {\n          await Promise.all(\n            entries.map(async (entry) => {\n              if (!entry.isIntersecting) {\n                return;\n              }\n              const thumbnailCard = entry.target as HTMLElement;\n              let thumbnailUrl = thumbnailCard.dataset.src;\n              if (!thumbnailUrl) {\n                return;\n              }\n              if (thumbnailUrl.startsWith(\"/\")) {\n                // Thumbnails served by local API require authentication\n                const signedPath = await getSignedPath(this.hass, thumbnailUrl);\n                thumbnailUrl = signedPath.path;\n              }\n              thumbnailCard.style.backgroundImage = `url(${thumbnailUrl})`;\n              observer.unobserve(thumbnailCard); // loaded, so no need to observe anymore\n            })\n          );\n        }\n      );\n    }\n    const observer = this._intersectionObserver!;\n    for (const thumbnailCard of this._thumbnails) {\n      observer.observe(thumbnailCard);\n    }\n  }\n\n  private _closeDialogAction(): void {\n    fireEvent(this, \"close-dialog\");\n  }\n\n  private _setError(error: any) {\n    if (!this.dialog) {\n      this._error = error;\n      return;\n    }\n\n    if (!error) {\n      return;\n    }\n\n    this._closeDialogAction();\n    showAlertDialog(this, {\n      title: this.hass.localize(\n        \"ui.components.media-browser.media_browsing_error\"\n      ),\n      text: this._renderError(error),\n    });\n  }\n\n  private _renderError(err: { message: string; code: string }) {\n    if (err.message === \"Media directory does not exist.\") {\n      return html`\n        <h2>\n          ${this.hass.localize(\n            \"ui.components.media-browser.no_local_media_found\"\n          )}\n        </h2>\n        <p>\n          ${this.hass.localize(\"ui.components.media-browser.no_media_folder\")}\n          <br />\n          ${this.hass.localize(\n            \"ui.components.media-browser.setup_local_help\",\n            \"documentation\",\n            html`<a\n              href=${documentationUrl(\n                this.hass,\n                \"/more-info/local-media/setup-media\"\n              )}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${this.hass.localize(\n                \"ui.components.media-browser.documentation\"\n              )}</a\n            >`\n          )}\n          <br />\n          ${this.hass.localize(\"ui.components.media-browser.local_media_files\")}\n        </p>\n      `;\n    }\n    return html`<span class=\"error\">${err.message}</span>`;\n  }\n\n  private async _setHeaderHeight() {\n    await this.updateComplete;\n    const header = this._header;\n    const content = this._content;\n    if (!header || !content) {\n      return;\n    }\n    this._headerOffsetHeight = header.offsetHeight;\n    content.style.marginTop = `${this._headerOffsetHeight}px`;\n    content.style.maxHeight = `calc(var(--media-browser-max-height, 100%) - ${this._headerOffsetHeight}px)`;\n  }\n\n  private _animateHeaderHeight() {\n    let start;\n    const animate = (time) => {\n      if (start === undefined) {\n        start = time;\n      }\n      const elapsed = time - start;\n      this._setHeaderHeight();\n      if (elapsed < 400) {\n        requestAnimationFrame(animate);\n      }\n    };\n    requestAnimationFrame(animate);\n  }\n\n  @eventOptions({ passive: true })\n  private _scroll(ev: Event): void {\n    const content = ev.currentTarget as HTMLDivElement;\n    if (!this._scrolled && content.scrollTop > this._headerOffsetHeight) {\n      this._scrolled = true;\n    } else if (this._scrolled && content.scrollTop < this._headerOffsetHeight) {\n      this._scrolled = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: flex;\n          flex-direction: column;\n          position: relative;\n        }\n\n        ha-circular-progress {\n          --mdc-theme-primary: var(--primary-color);\n          display: flex;\n          justify-content: center;\n          margin: 40px;\n        }\n\n        .container {\n          padding: 16px;\n        }\n\n        .no-items {\n          padding-left: 32px;\n        }\n\n        .content {\n          overflow-y: auto;\n          box-sizing: border-box;\n        }\n\n        /* HEADER */\n\n        .header {\n          display: flex;\n          justify-content: space-between;\n          border-bottom: 1px solid var(--divider-color);\n          background-color: var(--card-background-color);\n          position: absolute;\n          top: 0;\n          right: 0;\n          left: 0;\n          z-index: 5;\n          padding: 16px;\n        }\n        .header_button {\n          position: relative;\n          right: -8px;\n        }\n        .header-content {\n          display: flex;\n          flex-wrap: wrap;\n          flex-grow: 1;\n          align-items: flex-start;\n        }\n        .header-content .img {\n          height: 175px;\n          width: 175px;\n          margin-right: 16px;\n          background-size: cover;\n          border-radius: 2px;\n          transition: width 0.4s, height 0.4s;\n        }\n        .header-info {\n          display: flex;\n          flex-direction: column;\n          justify-content: space-between;\n          align-self: stretch;\n          min-width: 0;\n          flex: 1;\n        }\n        .header-info mwc-button {\n          display: block;\n          --mdc-theme-primary: var(--primary-color);\n          padding-bottom: 16px;\n        }\n        .breadcrumb {\n          display: flex;\n          flex-direction: column;\n          overflow: hidden;\n          flex-grow: 1;\n          padding-top: 16px;\n        }\n        .breadcrumb .title {\n          font-size: 32px;\n          line-height: 1.2;\n          font-weight: bold;\n          margin: 0;\n          overflow: hidden;\n          display: -webkit-box;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: 2;\n          padding-right: 8px;\n        }\n        .breadcrumb .previous-title {\n          font-size: 14px;\n          padding-bottom: 8px;\n          color: var(--secondary-text-color);\n          overflow: hidden;\n          text-overflow: ellipsis;\n          cursor: pointer;\n          --mdc-icon-size: 14px;\n        }\n        .breadcrumb .subtitle {\n          font-size: 16px;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          margin-bottom: 0;\n          transition: height 0.5s, margin 0.5s;\n        }\n\n        /* ============= CHILDREN ============= */\n\n        mwc-list {\n          --mdc-list-vertical-padding: 0;\n          --mdc-list-item-graphic-margin: 0;\n          --mdc-theme-text-icon-on-background: var(--secondary-text-color);\n          margin-top: 10px;\n        }\n\n        mwc-list li:last-child {\n          display: none;\n        }\n\n        mwc-list li[divider] {\n          border-bottom-color: var(--divider-color);\n        }\n\n        .children {\n          display: grid;\n          grid-template-columns: repeat(\n            auto-fit,\n            minmax(var(--media-browse-item-size, 175px), 0.1fr)\n          );\n          grid-gap: 16px;\n          padding: 16px;\n        }\n\n        :host([dialog]) .children {\n          grid-template-columns: repeat(\n            auto-fit,\n            minmax(var(--media-browse-item-size, 175px), 0.33fr)\n          );\n        }\n\n        .child {\n          display: flex;\n          flex-direction: column;\n          cursor: pointer;\n        }\n\n        ha-card {\n          position: relative;\n          width: 100%;\n          box-sizing: border-box;\n        }\n\n        .children ha-card .thumbnail {\n          width: 100%;\n          position: relative;\n          box-sizing: border-box;\n          transition: padding-bottom 0.1s ease-out;\n          padding-bottom: 100%;\n        }\n\n        .portrait.children ha-card .thumbnail {\n          padding-bottom: 150%;\n        }\n\n        ha-card .image {\n          border-radius: 3px 3px 0 0;\n        }\n\n        .image {\n          position: absolute;\n          top: 0;\n          right: 0;\n          left: 0;\n          bottom: 0;\n          background-size: cover;\n          background-repeat: no-repeat;\n          background-position: center;\n        }\n\n        .centered-image {\n          margin: 0 8px;\n          background-size: contain;\n        }\n\n        .children ha-card .icon-holder {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n\n        .child .folder {\n          color: var(--secondary-text-color);\n          --mdc-icon-size: calc(var(--media-browse-item-size, 175px) * 0.4);\n        }\n\n        .child .play {\n          position: absolute;\n          transition: color 0.5s;\n          border-radius: 50%;\n          top: calc(50% - 50px);\n          right: calc(50% - 35px);\n          opacity: 0;\n          transition: opacity 0.1s ease-out;\n        }\n\n        .child .play:not(.can_expand) {\n          --mdc-icon-button-size: 70px;\n          --mdc-icon-size: 48px;\n        }\n\n        ha-card:hover .play {\n          opacity: 1;\n        }\n\n        ha-card:hover .play:not(.can_expand) {\n          color: var(--primary-color);\n        }\n\n        ha-card:hover .play.can_expand {\n          bottom: 8px;\n        }\n\n        .child .play.can_expand {\n          background-color: rgba(var(--rgb-card-background-color), 0.5);\n          top: auto;\n          bottom: 0px;\n          right: 8px;\n          transition: bottom 0.1s ease-out, opacity 0.1s ease-out;\n        }\n\n        .child .play:hover {\n          color: var(--primary-color);\n        }\n\n        ha-card:hover .lazythumbnail {\n          opacity: 0.5;\n        }\n\n        .child .title {\n          font-size: 16px;\n          padding-top: 16px;\n          padding-left: 2px;\n          overflow: hidden;\n          display: -webkit-box;\n          -webkit-box-orient: vertical;\n          -webkit-line-clamp: 1;\n          text-overflow: ellipsis;\n        }\n\n        .child ha-card .title {\n          margin-bottom: 16px;\n          padding-left: 16px;\n        }\n\n        mwc-list-item .graphic {\n          background-size: contain;\n          border-radius: 2px;\n          display: flex;\n          align-content: center;\n          align-items: center;\n          line-height: initial;\n        }\n\n        mwc-list-item .graphic .play {\n          opacity: 0;\n          transition: all 0.5s;\n          background-color: rgba(var(--rgb-card-background-color), 0.5);\n          border-radius: 50%;\n          --mdc-icon-button-size: 40px;\n        }\n\n        mwc-list-item:hover .graphic .play {\n          opacity: 1;\n          color: var(--primary-text-color);\n        }\n\n        mwc-list-item .graphic .play.show {\n          opacity: 1;\n          background-color: transparent;\n        }\n\n        mwc-list-item .title {\n          margin-left: 16px;\n        }\n        mwc-list-item[dir=\"rtl\"] .title {\n          margin-right: 16px;\n          margin-left: 0;\n        }\n\n        /* ============= Narrow ============= */\n\n        :host([narrow]) {\n          padding: 0;\n        }\n\n        :host([narrow]) .media-source {\n          padding: 0 24px;\n        }\n\n        :host([narrow]) .children {\n          grid-template-columns: minmax(0, 1fr) minmax(0, 1fr) !important;\n        }\n\n        :host([narrow]) .breadcrumb .title {\n          font-size: 24px;\n        }\n        :host([narrow]) .header {\n          padding: 0;\n        }\n        :host([narrow]) .header.no-dialog {\n          display: block;\n        }\n        :host([narrow]) .header_button {\n          position: absolute;\n          top: 14px;\n          right: 8px;\n        }\n        :host([narrow]) .header-content {\n          flex-direction: column;\n          flex-wrap: nowrap;\n        }\n        :host([narrow]) .header-content .img {\n          height: auto;\n          width: 100%;\n          margin-right: 0;\n          padding-bottom: 50%;\n          margin-bottom: 8px;\n          position: relative;\n          background-position: center;\n          border-radius: 0;\n          transition: width 0.4s, height 0.4s, padding-bottom 0.4s;\n        }\n        ha-fab {\n          position: absolute;\n          --mdc-theme-secondary: var(--primary-color);\n          bottom: -20px;\n          right: 20px;\n        }\n        :host([narrow]) .header-info mwc-button {\n          margin-top: 16px;\n          margin-bottom: 8px;\n        }\n        :host([narrow]) .header-info {\n          padding: 0 16px 8px;\n        }\n\n        /* ============= Scroll ============= */\n        :host([scroll]) .breadcrumb .subtitle {\n          height: 0;\n          margin: 0;\n        }\n        :host([scroll]) .breadcrumb .title {\n          -webkit-line-clamp: 1;\n        }\n        :host(:not([narrow])[scroll]) .header:not(.no-img) ha-icon-button {\n          align-self: center;\n        }\n        :host([scroll]) .header-info mwc-button,\n        .no-img .header-info mwc-button {\n          padding-right: 4px;\n        }\n        :host([scroll][narrow]) .no-img .header-info mwc-button {\n          padding-right: 16px;\n        }\n        :host([scroll]) .header-info {\n          flex-direction: row;\n        }\n        :host([scroll]) .header-info mwc-button {\n          align-self: center;\n          margin-top: 0;\n          margin-bottom: 0;\n          padding-bottom: 0;\n        }\n        :host([scroll][narrow]) .no-img .header-info {\n          flex-direction: row-reverse;\n        }\n        :host([scroll][narrow]) .header-info {\n          padding: 20px 24px 10px 24px;\n          align-items: center;\n        }\n        :host([scroll]) .header-content {\n          align-items: flex-end;\n          flex-direction: row;\n        }\n        :host([scroll]) .header-content .img {\n          height: 75px;\n          width: 75px;\n        }\n        :host([scroll]) .breadcrumb {\n          padding-top: 0;\n          align-self: center;\n        }\n        :host([scroll][narrow]) .header-content .img {\n          height: 100px;\n          width: 100px;\n          padding-bottom: initial;\n          margin-bottom: 0;\n        }\n        :host([scroll]) ha-fab {\n          bottom: 0px;\n          right: -24px;\n          --mdc-fab-box-shadow: none;\n          --mdc-theme-secondary: rgba(var(--rgb-primary-color), 0.5);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-media-player-browse\": HaMediaPlayerBrowse;\n  }\n}\n"],"names":[],"sourceRoot":""}