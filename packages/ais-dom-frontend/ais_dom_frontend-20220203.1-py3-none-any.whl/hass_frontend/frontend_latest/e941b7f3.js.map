{"version":3,"file":"e941b7f3.js","mappings":";;AA4CA;AACA;AACA;AACA;AACA;;;;;AAKA;;;AAIA;AACA;;;;;;;;;;;;;;;;AAxCA;;ACkFA;AACA;;AAEA;AACA;;;;AAMA;;;AAMA;;;;;AAOA;AACA;;;AAGA;;;AAKA;;;;;AArCA;;;;AAhDA;;;;AAmQA;AACA;;;AAGA;;;AAOA;;AAIA;;;AAlRA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AC+BA;AACA;;;AAGA;;;AAKA;;;AAKA;;AAGA;;;AAIA;AACA;;;AAGA;;AAMA;AACA;;;;AAMA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;;;AAIA;;AAGA;AAGA;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;AAOA;;AAEA;AACA;AACA;;;AAGA;;;AAKA;;;;;AAOA;AAKA;AAGA;AACA;AACA;;;;;;;AAQA;AACA;;;;;AAtHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9BA","sources":["webpack://home-assistant-frontend/./src/common/search/search-input.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/card-editor/hui-card-picker.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-conditional-card-editor.ts"],"sourcesContent":["import { mdiClose, mdiMagnify } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-svg-icon\";\nimport { HomeAssistant } from \"../../types\";\nimport { fireEvent } from \"../dom/fire_event\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Boolean, attribute: \"no-underline\" })\n  public noUnderline = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  @property({ type: String })\n  public label?: string;\n\n  public focus() {\n    this.shadowRoot!.querySelector(\"paper-input\")!.focus();\n  }\n\n  @query(\"paper-input\", true) private _input!: PaperInputElement;\n\n  protected render(): TemplateResult {\n    return html`\n      <paper-input\n        .autofocus=${this.autofocus}\n        .label=${this.label || \"Search\"}\n        .value=${this.filter}\n        @value-changed=${this._filterInputChanged}\n        .noLabelFloat=${this.noLabelFloat}\n      >\n        <slot name=\"prefix\" slot=\"prefix\">\n          <ha-svg-icon class=\"prefix\" .path=${mdiMagnify}></ha-svg-icon>\n        </slot>\n        ${this.filter &&\n        html`\n          <ha-icon-button\n            slot=\"suffix\"\n            @click=${this._clearSearch}\n            .label=${this.hass.localize(\"ui.common.clear\")}\n            .path=${mdiClose}\n          ></ha-icon-button>\n        `}\n      </paper-input>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"noUnderline\") &&\n      (this.noUnderline || changedProps.get(\"noUnderline\") !== undefined)\n    ) {\n      (\n        this._input.inputElement!.parentElement!.shadowRoot!.querySelector(\n          \"div.unfocused-line\"\n        ) as HTMLElement\n      ).style.display = this.noUnderline ? \"none\" : \"block\";\n    }\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-svg-icon,\n      ha-icon-button {\n        color: var(--primary-text-color);\n      }\n      ha-icon-button {\n        --mdc-icon-button-size: 24px;\n      }\n      ha-svg-icon.prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","import \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\nimport Fuse from \"fuse.js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { until } from \"lit/directives/until\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../common/search/search-input\";\nimport \"../../../../components/ha-circular-progress\";\nimport { UNAVAILABLE_STATES } from \"../../../../data/entity\";\nimport type {\n  LovelaceCardConfig,\n  LovelaceConfig,\n} from \"../../../../data/lovelace\";\nimport {\n  CustomCardEntry,\n  customCards,\n  CUSTOM_TYPE_PREFIX,\n  getCustomCardEntry,\n} from \"../../../../data/lovelace_custom_cards\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport {\n  calcUnusedEntities,\n  computeUsedEntities,\n} from \"../../common/compute-unused-entities\";\nimport { tryCreateCardElement } from \"../../create-element/create-card-element\";\nimport type { LovelaceCard } from \"../../types\";\nimport { getCardStubConfig } from \"../get-card-stub-config\";\nimport { coreCards } from \"../lovelace-cards\";\nimport type { Card, CardPickTarget } from \"../types\";\n\ninterface CardElement {\n  card: Card;\n  element: TemplateResult;\n}\n\n@customElement(\"hui-card-picker\")\nexport class HuiCardPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _cards: CardElement[] = [];\n\n  public lovelace?: LovelaceConfig;\n\n  public cardPicked?: (cardConf: LovelaceCardConfig) => void;\n\n  @state() private _filter = \"\";\n\n  @state() private _width?: number;\n\n  @state() private _height?: number;\n\n  private _unusedEntities?: string[];\n\n  private _usedEntities?: string[];\n\n  private _filterCards = memoizeOne(\n    (cardElements: CardElement[], filter?: string): CardElement[] => {\n      if (!filter) {\n        return cardElements;\n      }\n      let cards = cardElements.map(\n        (cardElement: CardElement) => cardElement.card\n      );\n      const options: Fuse.IFuseOptions<Card> = {\n        keys: [\"type\", \"name\", \"description\"],\n        isCaseSensitive: false,\n        minMatchCharLength: 2,\n        threshold: 0.2,\n      };\n      const fuse = new Fuse(cards, options);\n      cards = fuse.search(filter).map((result) => result.item);\n      return cardElements.filter((cardElement: CardElement) =>\n        cards.includes(cardElement.card)\n      );\n    }\n  );\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      !this.lovelace ||\n      !this._unusedEntities ||\n      !this._usedEntities\n    ) {\n      return html``;\n    }\n\n    return html`\n      <search-input\n        .hass=${this.hass}\n        .filter=${this._filter}\n        no-label-float\n        @value-changed=${this._handleSearchChange}\n        .label=${this.hass.localize(\n          \"ui.panel.lovelace.editor.edit_card.search_cards\"\n        )}\n      ></search-input>\n      <div\n        id=\"content\"\n        style=${styleMap({\n          width: this._width ? `${this._width}px` : \"auto\",\n          height: this._height ? `${this._height}px` : \"auto\",\n        })}\n      >\n        <div class=\"cards-container\">\n          ${this._filterCards(this._cards, this._filter).map(\n            (cardElement: CardElement) => cardElement.element\n          )}\n        </div>\n        <div class=\"cards-container\">\n          <div\n            class=\"card manual\"\n            @click=${this._cardPicked}\n            .config=${{ type: \"\" }}\n          >\n            <div class=\"card-header\">\n              ${this.hass!.localize(\n                `ui.panel.lovelace.editor.card.generic.manual`\n              )}\n            </div>\n            <div class=\"preview description\">\n              ${this.hass!.localize(\n                `ui.panel.lovelace.editor.card.generic.manual_description`\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass) {\n      return true;\n    }\n\n    if (oldHass.locale !== this.hass!.locale) {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected firstUpdated(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n\n    const usedEntities = computeUsedEntities(this.lovelace);\n    const unusedEntities = calcUnusedEntities(this.hass, usedEntities);\n\n    this._usedEntities = [...usedEntities].filter(\n      (eid) =>\n        this.hass!.states[eid] &&\n        !UNAVAILABLE_STATES.includes(this.hass!.states[eid].state)\n    );\n    this._unusedEntities = [...unusedEntities].filter(\n      (eid) =>\n        this.hass!.states[eid] &&\n        !UNAVAILABLE_STATES.includes(this.hass!.states[eid].state)\n    );\n\n    this._loadCards();\n  }\n\n  private _loadCards() {\n    let cards: Card[] = coreCards.map((card: Card) => ({\n      name: this.hass!.localize(\n        `ui.panel.lovelace.editor.card.${card.type}.name`\n      ),\n      description: this.hass!.localize(\n        `ui.panel.lovelace.editor.card.${card.type}.description`\n      ),\n      ...card,\n    }));\n    if (customCards.length > 0) {\n      cards = cards.concat(\n        customCards.map((ccard: CustomCardEntry) => ({\n          type: ccard.type,\n          name: ccard.name,\n          description: ccard.description,\n          showElement: ccard.preview,\n          isCustom: true,\n        }))\n      );\n    }\n    this._cards = cards.map((card: Card) => ({\n      card: card,\n      element: html`${until(\n        this._renderCardElement(card),\n        html`\n          <div class=\"card spinner\">\n            <ha-circular-progress active alt=\"Loading\"></ha-circular-progress>\n          </div>\n        `\n      )}`,\n    }));\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    const value = ev.detail.value;\n\n    if (!value) {\n      // Reset when we no longer filter\n      this._width = undefined;\n      this._height = undefined;\n    } else if (!this._width || !this._height) {\n      // Save height and width so the dialog doesn't jump while searching\n      const div = this.shadowRoot!.getElementById(\"content\");\n      if (div && !this._width) {\n        const width = div.clientWidth;\n        if (width) {\n          this._width = width;\n        }\n      }\n      if (div && !this._height) {\n        const height = div.clientHeight;\n        if (height) {\n          this._height = height;\n        }\n      }\n    }\n\n    this._filter = value;\n  }\n\n  private _cardPicked(ev: Event): void {\n    const config: LovelaceCardConfig = (ev.currentTarget! as CardPickTarget)\n      .config;\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _tryCreateCardElement(cardConfig: LovelaceCardConfig) {\n    const element = tryCreateCardElement(cardConfig) as LovelaceCard;\n    element.hass = this.hass;\n    element.addEventListener(\n      \"ll-rebuild\",\n      (ev) => {\n        ev.stopPropagation();\n        this._rebuildCard(element, cardConfig);\n      },\n      { once: true }\n    );\n    return element;\n  }\n\n  private _rebuildCard(\n    cardElToReplace: LovelaceCard,\n    config: LovelaceCardConfig\n  ): void {\n    let newCardEl: LovelaceCard;\n    try {\n      newCardEl = this._tryCreateCardElement(config);\n    } catch (err: any) {\n      return;\n    }\n    if (cardElToReplace.parentElement) {\n      cardElToReplace.parentElement!.replaceChild(newCardEl, cardElToReplace);\n    }\n  }\n\n  private async _renderCardElement(card: Card): Promise<TemplateResult> {\n    let { type } = card;\n    const { showElement, isCustom, name, description } = card;\n    const customCard = isCustom ? getCustomCardEntry(type) : undefined;\n    if (isCustom) {\n      type = `${CUSTOM_TYPE_PREFIX}${type}`;\n    }\n\n    let element: LovelaceCard | undefined;\n    let cardConfig: LovelaceCardConfig = { type };\n\n    if (this.hass && this.lovelace) {\n      cardConfig = await getCardStubConfig(\n        this.hass,\n        type,\n        this._unusedEntities!,\n        this._usedEntities!\n      );\n\n      if (showElement) {\n        try {\n          element = this._tryCreateCardElement(cardConfig);\n        } catch (err: any) {\n          element = undefined;\n        }\n      }\n    }\n\n    return html`\n      <div class=\"card\">\n        <div\n          class=\"overlay\"\n          @click=${this._cardPicked}\n          .config=${cardConfig}\n        ></div>\n        <div class=\"card-header\">\n          ${customCard\n            ? `${this.hass!.localize(\n                \"ui.panel.lovelace.editor.cardpicker.custom_card\"\n              )}: ${customCard.name || customCard.type}`\n            : name}\n        </div>\n        <div\n          class=\"preview ${classMap({\n            description: !element || element.tagName === \"HUI-ERROR-CARD\",\n          })}\"\n        >\n          ${element && element.tagName !== \"HUI-ERROR-CARD\"\n            ? element\n            : customCard\n            ? customCard.description ||\n              this.hass!.localize(\n                `ui.panel.lovelace.editor.cardpicker.no_description`\n              )\n            : description}\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        search-input {\n          display: block;\n          margin: 0 -8px;\n        }\n\n        .cards-container {\n          display: grid;\n          grid-gap: 8px 8px;\n          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n          margin-top: 20px;\n        }\n\n        .card {\n          height: 100%;\n          max-width: 500px;\n          display: flex;\n          flex-direction: column;\n          border-radius: var(--ha-card-border-radius, 4px);\n          background: var(--primary-background-color, #fafafa);\n          cursor: pointer;\n          position: relative;\n        }\n\n        .card-header {\n          color: var(--ha-card-header-color, --primary-text-color);\n          font-family: var(--ha-card-header-font-family, inherit);\n          font-size: 16px;\n          font-weight: bold;\n          letter-spacing: -0.012em;\n          line-height: 20px;\n          padding: 12px 16px;\n          display: block;\n          text-align: center;\n          background: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          border-bottom: 1px solid var(--divider-color);\n        }\n\n        .preview {\n          pointer-events: none;\n          margin: 20px;\n          flex-grow: 1;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .preview > :first-child {\n          zoom: 0.6;\n          display: block;\n          width: 100%;\n        }\n\n        .description {\n          text-align: center;\n        }\n\n        .spinner {\n          align-items: center;\n          justify-content: center;\n        }\n\n        .overlay {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          z-index: 1;\n          box-sizing: border-box;\n          border: var(--ha-card-border-width, 1px) solid\n            var(--ha-card-border-color, var(--divider-color));\n          border-radius: var(--ha-card-border-radius, 4px);\n        }\n\n        .manual {\n          max-width: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-card-picker\": HuiCardPicker;\n  }\n}\n","import \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\nimport type { MDCTabBarActivatedEvent } from \"@material/tab-bar\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  object,\n  optional,\n  string,\n} from \"superstruct\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport { LovelaceCardConfig, LovelaceConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { ConditionalCardConfig } from \"../../cards/types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport \"../card-editor/hui-card-element-editor\";\nimport type { HuiCardElementEditor } from \"../card-editor/hui-card-element-editor\";\nimport \"../card-editor/hui-card-picker\";\nimport \"../hui-element-editor\";\nimport type { ConfigChangedEvent } from \"../hui-element-editor\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { GUIModeChangedEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst conditionStruct = object({\n  entity: string(),\n  state: optional(string()),\n  state_not: optional(string()),\n});\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    card: any(),\n    conditions: optional(array(conditionStruct)),\n  })\n);\n\n@customElement(\"hui-conditional-card-editor\")\nexport class HuiConditionalCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: LovelaceConfig;\n\n  @state() private _config?: ConditionalCardConfig;\n\n  @state() private _GUImode = true;\n\n  @state() private _guiModeAvailable? = true;\n\n  @state() private _cardTab = false;\n\n  @query(\"hui-card-element-editor\")\n  private _cardEditorEl?: HuiCardElementEditor;\n\n  public setConfig(config: ConditionalCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  public focusYamlEditor() {\n    this._cardEditorEl?.focusYamlEditor();\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <mwc-tab-bar\n        .activeIndex=${this._cardTab ? 1 : 0}\n        @MDCTabBar:activated=${this._selectTab}\n      >\n        <mwc-tab\n          .label=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.conditional.conditions\"\n          )}\n        ></mwc-tab>\n        <mwc-tab\n          .label=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.conditional.card\"\n          )}\n        ></mwc-tab>\n      </mwc-tab-bar>\n      ${this._cardTab\n        ? html`\n            <div class=\"card\">\n              ${this._config.card.type !== undefined\n                ? html`\n                    <div class=\"card-options\">\n                      <mwc-button\n                        @click=${this._toggleMode}\n                        .disabled=${!this._guiModeAvailable}\n                        class=\"gui-mode-button\"\n                      >\n                        ${this.hass!.localize(\n                          !this._cardEditorEl || this._GUImode\n                            ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                            : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                        )}\n                      </mwc-button>\n                      <mwc-button @click=${this._handleReplaceCard}\n                        >${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.conditional.change_type\"\n                        )}</mwc-button\n                      >\n                    </div>\n                    <hui-card-element-editor\n                      .hass=${this.hass}\n                      .value=${this._config.card}\n                      .lovelace=${this.lovelace}\n                      @config-changed=${this._handleCardChanged}\n                      @GUImode-changed=${this._handleGUIModeChanged}\n                    ></hui-card-element-editor>\n                  `\n                : html`\n                    <hui-card-picker\n                      .hass=${this.hass}\n                      .lovelace=${this.lovelace}\n                      @config-changed=${this._handleCardPicked}\n                    ></hui-card-picker>\n                  `}\n            </div>\n          `\n        : html`\n            <div class=\"conditions\">\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.card.conditional.condition_explanation\"\n              )}\n              ${this._config.conditions.map(\n                (cond, idx) => html`\n                  <div class=\"condition\">\n                    <div class=\"entity\">\n                      <ha-entity-picker\n                        .hass=${this.hass}\n                        .value=${cond.entity}\n                        .index=${idx}\n                        .configValue=${\"entity\"}\n                        @change=${this._changeCondition}\n                        allow-custom-entity\n                      ></ha-entity-picker>\n                    </div>\n                    <div class=\"state\">\n                      <paper-dropdown-menu>\n                        <paper-listbox\n                          .selected=${cond.state_not !== undefined ? 1 : 0}\n                          slot=\"dropdown-content\"\n                          .index=${idx}\n                          .configValue=${\"invert\"}\n                          @selected-item-changed=${this._changeCondition}\n                        >\n                          <paper-item\n                            >${this.hass!.localize(\n                              \"ui.panel.lovelace.editor.card.conditional.state_equal\"\n                            )}</paper-item\n                          >\n                          <paper-item\n                            >${this.hass!.localize(\n                              \"ui.panel.lovelace.editor.card.conditional.state_not_equal\"\n                            )}</paper-item\n                          >\n                        </paper-listbox>\n                      </paper-dropdown-menu>\n                      <paper-input\n                        .label=\"${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.generic.state\"\n                        )} (${this.hass!.localize(\n                          \"ui.panel.lovelace.editor.card.conditional.current_state\"\n                        )}: ${this.hass?.states[cond.entity].state})\"\n                        .value=${cond.state_not !== undefined\n                          ? cond.state_not\n                          : cond.state}\n                        .index=${idx}\n                        .configValue=${\"state\"}\n                        @value-changed=${this._changeCondition}\n                      ></paper-input>\n                    </div>\n                  </div>\n                `\n              )}\n              <div class=\"condition\">\n                <ha-entity-picker\n                  .hass=${this.hass}\n                  @change=${this._addCondition}\n                ></ha-entity-picker>\n              </div>\n            </div>\n          `}\n    `;\n  }\n\n  private _selectTab(ev: MDCTabBarActivatedEvent): void {\n    this._cardTab = ev.detail.index === 1;\n  }\n\n  private _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  private _setMode(value: boolean): void {\n    this._GUImode = value;\n    if (this._cardEditorEl) {\n      this._cardEditorEl.GUImode = value;\n    }\n  }\n\n  private _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  private _handleCardPicked(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._setMode(true);\n    this._guiModeAvailable = true;\n    this._config = { ...this._config, card: ev.detail.config };\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleCardChanged(ev: HASSDomEvent<ConfigChangedEvent>): void {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._config = {\n      ...this._config,\n      card: ev.detail.config as LovelaceCardConfig,\n    };\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleReplaceCard(): void {\n    if (!this._config) {\n      return;\n    }\n    // @ts-ignore\n    this._config = { ...this._config, card: {} };\n    // @ts-ignore\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _addCondition(ev: Event): void {\n    const target = ev.target! as any;\n    if (target.value === \"\" || !this._config) {\n      return;\n    }\n    const conditions = [...this._config.conditions];\n    conditions.push({\n      entity: target.value,\n      state: \"\",\n    });\n    this._config = { ...this._config, conditions };\n    target.value = \"\";\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _changeCondition(ev: Event): void {\n    const target = ev.target as any;\n    if (!this._config || !target) {\n      return;\n    }\n    const conditions = [...this._config.conditions];\n    if (target.configValue === \"entity\" && target.value === \"\") {\n      conditions.splice(target.index, 1);\n    } else {\n      const condition = { ...conditions[target.index] };\n      if (target.configValue === \"entity\") {\n        condition.entity = target.value;\n      } else if (target.configValue === \"state\") {\n        if (condition.state_not !== undefined) {\n          condition.state_not = target.value;\n        } else {\n          condition.state = target.value;\n        }\n      } else if (target.configValue === \"invert\") {\n        if (target.selected === 1) {\n          if (condition.state) {\n            condition.state_not = condition.state;\n            delete condition.state;\n          }\n        } else if (condition.state_not) {\n          condition.state = condition.state_not;\n          delete condition.state_not;\n        }\n      }\n      conditions[target.index] = condition;\n    }\n    this._config = { ...this._config, conditions };\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        mwc-tab-bar {\n          border-bottom: 1px solid var(--divider-color);\n        }\n        .conditions {\n          margin-top: 8px;\n        }\n        .condition {\n          margin-top: 8px;\n          border: 1px solid var(--divider-color);\n          padding: 12px;\n        }\n        .condition .state {\n          display: flex;\n          align-items: flex-end;\n        }\n        .condition .state paper-dropdown-menu {\n          margin-right: 16px;\n        }\n        .condition .state paper-input {\n          flex-grow: 1;\n        }\n\n        .card {\n          margin-top: 8px;\n          border: 1px solid var(--divider-color);\n          padding: 12px;\n        }\n        @media (max-width: 450px) {\n          .card,\n          .condition {\n            margin: 8px -12px 0;\n          }\n        }\n        .card .card-options {\n          display: flex;\n          justify-content: flex-end;\n          width: 100%;\n        }\n        .gui-mode-button {\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-conditional-card-editor\": HuiConditionalCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}