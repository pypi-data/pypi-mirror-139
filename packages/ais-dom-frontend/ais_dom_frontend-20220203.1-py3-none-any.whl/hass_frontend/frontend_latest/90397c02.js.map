{"version":3,"file":"90397c02.js","mappings":";;AAiLA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AArBA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-ais-android-picture-card.ts"],"sourcesContent":["import \"../components/hui-warning\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport Hammer from \"hammerjs\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport \"../../../components/ha-card\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entities\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-image\";\nimport { LovelaceCard } from \"../types\";\nimport { PictureEntityCardConfig } from \"./types\";\n\n@customElement(\"hui-ais-android-picture-card\")\nclass HuiAisAndroidPictureCard extends LitElement implements LovelaceCard {\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): PictureEntityCardConfig {\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      [\"light\", \"switch\"]\n    );\n\n    return {\n      type: \"ais-android-picture\",\n      entity: foundEntities[0] || \"\",\n      image: \"http://localhost:9966/stream.mjpeg\",\n    };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: PictureEntityCardConfig;\n\n  @state() private aisPanEnd = {};\n\n  @state() private aisPanStart = {};\n\n  public getCardSize(): number {\n    return 3;\n  }\n\n  public setConfig(config: PictureEntityCardConfig): void {\n    if (!config || !config.entity) {\n      throw new Error(\"Entity must be specified\");\n    }\n\n    if (\n      computeDomain(config.entity) !== \"camera\" &&\n      !config.image &&\n      !config.state_image &&\n      !config.camera_image\n    ) {\n      throw new Error(\"No image source configured\");\n    }\n\n    this._config = { show_name: true, show_state: true, ...config };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n\n    // run screen stream on android\n    this.hass?.callService(\"ais_shell_command\", \"start_screen_stream\");\n\n    const streamElement = this.shadowRoot!.getElementById(\n      this._config?.element_id\n    );\n    const divElement = this.shadowRoot!.getElementById(\n      this._config?.element_id + \"_div\"\n    );\n    const hammertime = new Hammer(streamElement);\n    hammertime.get(\"pan\").set({ direction: Hammer.DIRECTION_VERTICAL });\n\n    hammertime.on(\"panup\", (ev) => {\n      // console.debug(\"panup\");\n    });\n\n    hammertime.on(\"pandown\", (ev) => {\n      // console.debug(\"pandown\");\n    });\n\n    hammertime.on(\"panstart\", (ev) => {\n      this.aisPanStart = ev;\n    });\n    hammertime.on(\"panend\", (ev) => {\n      ev.preventDefault();\n      this.aisPanEnd = ev;\n      const bcrStreamElement = ev.target.getBoundingClientRect();\n      const sX = this.aisPanStart.center.x;\n      const sY = this.aisPanStart.center.y;\n      const eX = this.aisPanEnd.center.x;\n      const eY = this.aisPanEnd.center.y;\n\n      const aisSX = Math.floor(\n        ((sX - bcrStreamElement.left) / bcrStreamElement.width) * 100\n      );\n      const aisSY = Math.floor(\n        ((sY - bcrStreamElement.top) / bcrStreamElement.height) * 100\n      );\n      const aisEX = Math.floor(\n        ((eX - bcrStreamElement.left) / bcrStreamElement.width) * 100\n      );\n      const aisEY = Math.floor(\n        ((eY - bcrStreamElement.top) / bcrStreamElement.height) * 100\n      );\n\n      this._handleServiceCall(\"pan\", aisSX, aisSY, aisEX, aisEY);\n    });\n\n    hammertime.on(\"tap\", (ev) => {\n      ev.preventDefault();\n      const bcrStreamElement = ev.target.getBoundingClientRect();\n\n      // console.log(\"1\" + ev);\n      // console.log(ev);\n      // console.log(\"2\" + ev);\n      // console.log(ev.target);\n      // console.log(\"3\" + ev);\n      // console.log(bcrStreamElement);\n\n      const ripple = document.createElement(\"div\");\n      ripple.className = \"ripple2\";\n      ripple.style.left = `${ev.center.x - bcrStreamElement.x}px`;\n      ripple.style.top = `${ev.center.y}px`;\n      divElement?.appendChild(ripple);\n\n      const aisX = Math.floor(\n        ((ev.center.x - bcrStreamElement.x) / bcrStreamElement.width) * 100\n      );\n      const aisY = Math.floor(\n        ((ev.center.y - bcrStreamElement.y) / bcrStreamElement.height) * 100\n      );\n      ripple.style.animation = \"ripple-effect 0.4s  linear\";\n      ripple.onanimationend = () => divElement?.removeChild(ripple);\n\n      this._handleServiceCall(\"tap\", aisX, aisY, 0, 0);\n    });\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning> Nie moża połączyć z ekranem systemu Android </hui-warning>\n      `;\n    }\n\n    return html`\n      <ha-card\n        @contextmenu=${this._handleBack}\n        @mousemove=${this._handleMouseMove}\n        .id=${this._config.element_id}\n      >\n        <div .id=${this._config.element_id + \"_div\"}></div>\n        <hui-image\n          .hass=${this.hass}\n          .image=${this._config.image}\n          .stateImage=${this._config.state_image}\n          .cameraImage=${computeDomain(this._config.entity) === \"camera\"\n            ? this._config.entity\n            : this._config.camera_image}\n          .cameraView=${this._config.camera_view}\n          .entity=${this._config.entity}\n          .aspectRatio=${this._config.aspect_ratio}\n        ></hui-image>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        min-height: 75px;\n        overflow: hidden;\n        position: relative;\n        height: 100%;\n        box-sizing: border-box;\n      }\n\n      hui-image {\n        cursor: pointer;\n      }\n\n      .both {\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .single {\n        text-align: center;\n      }\n\n      .ripple {\n        width: 10px;\n        height: 10px;\n        background-color: transparent;\n        position: fixed !important;\n        border-radius: 50%;\n        border: 1.5px solid #00a5ffcc;\n      }\n\n      .ripple2 {\n        width: 10px;\n        height: 10px;\n        background-color: transparent;\n        position: fixed !important;\n        border-radius: 50%;\n        border: 2px solid #e7711eb8;\n      }\n\n      @keyframes ripple-effect {\n        to {\n          transform: scale(5);\n          opacity: 0.01;\n        }\n      }\n    `;\n  }\n\n  private _handleMouseMove(ev: ActionHandlerEvent) {\n    ev.preventDefault();\n  }\n\n  private _handleBack(ev) {\n    ev.preventDefault();\n    if (ev.target.className === \"ripple\") {\n      return;\n    }\n\n    const bcrStreamElement = ev.target.getBoundingClientRect();\n    const ripple = document.createElement(\"div\");\n    ripple.className = \"ripple\";\n\n    // console.log(\"1 ev\");\n    // console.log(ev);\n    // console.log(\"2 target\" );\n    // console.log(ev.target);\n    // console.log(\"3 bcrStreamElement\");\n    // console.log(bcrStreamElement);\n    // console.log(\"4 ev.clientX \");\n    // console.log(ev.clientX);\n    // console.log(\"4 bcrStreamElement.left \");\n    // console.log(bcrStreamElement.left);\n    // console.log(\"5 ev.offsetX \");\n    // console.log(ev.offsetX);\n\n    ripple.style.left = `${ev.clientX - bcrStreamElement.left}px`;\n    ripple.style.top = `${ev.clientY}px`;\n\n    const divElement = this.shadowRoot!.getElementById(\n      this._config?.element_id + \"_div\"\n    );\n    divElement?.appendChild(ripple);\n\n    ripple.style.animation = \"ripple-effect 0.4s  linear\";\n    ripple.onanimationend = () => divElement?.removeChild(ripple);\n\n    this._handleServiceCall(\"back\", 0, 0, 0, 0);\n  }\n\n  private _handleServiceCall(\n    name: string,\n    sX: number,\n    sY: number,\n    eX: number,\n    eY: number\n  ) {\n    this.hass?.callService(\"ais_shell_command\", \"screen_stream_command\", {\n      name: name,\n      sX: sX,\n      sY: sY,\n      eX: eX,\n      eY: eY,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-ais-android-picture-card\": HuiAisAndroidPictureCard;\n  }\n}\n"],"names":[],"sourceRoot":""}