{"version":3,"file":"e65d772b.js","mappings":";;;;AAqBA;ACTA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;ACkEA;AACA;;AAKA;AAOA;AACA;AACA;;AAEA;AACA;AAGA;AAfA;;;;;;AAZA","sources":["webpack://home-assistant-frontend/./src/components/ha-code-editor.ts","webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/panels/config/integrations/integration-panels/zha/dialog-zha-device-children.ts"],"sourcesContent":["import type { EditorView, KeyBinding, ViewUpdate } from \"@codemirror/view\";\nimport { css, CSSResultGroup, PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { loadCodeMirror } from \"../resources/codemirror.ondemand\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\nconst saveKeyBinding: KeyBinding = {\n  key: \"Mod-s\",\n  run: (view: EditorView) => {\n    fireEvent(view.dom, \"editor-save\");\n    return true;\n  },\n};\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends ReactiveElement {\n  public codemirror?: EditorView;\n\n  @property() public mode = \"yaml\";\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public readOnly = false;\n\n  @property() public error = false;\n\n  @state() private _value = \"\";\n\n  private _loadedCodeMirror?: typeof import(\"../resources/codemirror\");\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.state.doc.toString() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    if (!this.codemirror || !this._loadedCodeMirror) {\n      return false;\n    }\n    const className = this._loadedCodeMirror.HighlightStyle.get(\n      this.codemirror.state,\n      this._loadedCodeMirror.tags.comment\n    );\n    return !!this.shadowRoot!.querySelector(`span.${className}`);\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.langCompartment!.reconfigure(\n          this._mode\n        ),\n      });\n    }\n    if (changedProps.has(\"readOnly\")) {\n      this.codemirror.dispatch({\n        effects: this._loadedCodeMirror!.readonlyCompartment!.reconfigure(\n          this._loadedCodeMirror!.EditorView!.editable.of(!this.readOnly)\n        ),\n      });\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.dispatch({\n        changes: {\n          from: 0,\n          to: this.codemirror.state.doc.length,\n          insert: this._value,\n        },\n      });\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._blockKeyboardShortcuts();\n    this._load();\n  }\n\n  private get _mode() {\n    return this._loadedCodeMirror!.langs[this.mode];\n  }\n\n  private async _load(): Promise<void> {\n    this._loadedCodeMirror = await loadCodeMirror();\n\n    this.codemirror = new this._loadedCodeMirror.EditorView({\n      state: this._loadedCodeMirror.EditorState.create({\n        doc: this._value,\n        extensions: [\n          this._loadedCodeMirror.lineNumbers(),\n          this._loadedCodeMirror.EditorState.allowMultipleSelections.of(true),\n          this._loadedCodeMirror.history(),\n          this._loadedCodeMirror.highlightSelectionMatches(),\n          this._loadedCodeMirror.highlightActiveLine(),\n          this._loadedCodeMirror.drawSelection(),\n          this._loadedCodeMirror.rectangularSelection(),\n          this._loadedCodeMirror.keymap.of([\n            ...this._loadedCodeMirror.defaultKeymap,\n            ...this._loadedCodeMirror.searchKeymap,\n            ...this._loadedCodeMirror.historyKeymap,\n            ...this._loadedCodeMirror.tabKeyBindings,\n            saveKeyBinding,\n          ] as KeyBinding[]),\n          this._loadedCodeMirror.langCompartment.of(this._mode),\n          this._loadedCodeMirror.theme,\n          this._loadedCodeMirror.Prec.fallback(\n            this._loadedCodeMirror.highlightStyle\n          ),\n          this._loadedCodeMirror.readonlyCompartment.of(\n            this._loadedCodeMirror.EditorView.editable.of(!this.readOnly)\n          ),\n          this._loadedCodeMirror.EditorView.updateListener.of((update) =>\n            this._onUpdate(update)\n          ),\n        ],\n      }),\n      root: this.shadowRoot!,\n      parent: this.shadowRoot!,\n    });\n  }\n\n  private _blockKeyboardShortcuts() {\n    this.addEventListener(\"keydown\", (ev) => ev.stopPropagation());\n  }\n\n  private _onUpdate(update: ViewUpdate): void {\n    if (!update.docChanged) {\n      return;\n    }\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  // Only Lit 2.0 will use this\n  static get styles(): CSSResultGroup {\n    return css`\n      :host(.error-state) div.cm-wrap .cm-gutters {\n        border-color: var(--error-state-color, red);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { Dialog } from \"@material/mwc-dialog\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\n// @ts-expect-error\nexport class HaDialog extends Dialog {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Dialog.styles,\n      css`\n        .mdc-dialog {\n          --mdc-dialog-scroll-divider-color: var(--divider-color);\n          z-index: var(--dialog-z-index, 7);\n          -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n          backdrop-filter: var(--dialog-backdrop-filter, none);\n        }\n        .mdc-dialog__actions {\n          justify-content: var(--justify-action-buttons, flex-end);\n          padding-bottom: max(env(safe-area-inset-bottom), 8px);\n        }\n        .mdc-dialog__actions span:nth-child(1) {\n          flex: var(--secondary-action-button-flex, unset);\n        }\n        .mdc-dialog__actions span:nth-child(2) {\n          flex: var(--primary-action-button-flex, unset);\n        }\n        .mdc-dialog__container {\n          align-items: var(--vertial-align-dialog, center);\n        }\n        .mdc-dialog__title::before {\n          display: block;\n          height: 20px;\n        }\n        .mdc-dialog .mdc-dialog__content {\n          position: var(--dialog-content-position, relative);\n          padding: var(--dialog-content-padding, 20px 24px);\n        }\n        :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n          padding-bottom: max(\n            var(--dialog-content-padding, 20px),\n            env(safe-area-inset-bottom)\n          );\n        }\n        .mdc-dialog .mdc-dialog__surface {\n          position: var(--dialog-surface-position, relative);\n          top: var(--dialog-surface-top);\n          min-height: var(--mdc-dialog-min-height, auto);\n          border-radius: var(\n            --ha-dialog-border-radius,\n            var(--ha-card-border-radius, 4px)\n          );\n        }\n        :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n          display: flex;\n          flex-direction: column;\n        }\n        .header_button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: inherit;\n        }\n        .header_title {\n          margin-right: 40px;\n        }\n        [dir=\"rtl\"].header_button {\n          right: auto;\n          left: 16px;\n        }\n        [dir=\"rtl\"].header_title {\n          margin-left: 40px;\n          margin-right: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport memoizeOne from \"memoize-one\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../../../../../common/util/compute_rtl\";\nimport \"../../../../../components/ha-code-editor\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { ZHADeviceChildrenDialogParams } from \"./show-dialog-zha-device-children\";\nimport \"../../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n} from \"../../../../../components/data-table/ha-data-table\";\nimport \"../../../../../components/ha-circular-progress\";\nimport { fetchDevices, ZHADevice } from \"../../../../../data/zha\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\n\nexport interface DeviceRowData extends DataTableRowData {\n  id: string;\n  name: string;\n  lqi: number;\n}\n\n@customElement(\"dialog-zha-device-children\")\nclass DialogZHADeviceChildren extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _device: ZHADevice | undefined;\n\n  @state() private _devices: Map<string, ZHADevice> | undefined;\n\n  private _deviceChildren = memoizeOne(\n    (\n      device: ZHADevice | undefined,\n      devices: Map<string, ZHADevice> | undefined\n    ) => {\n      const outputDevices: DeviceRowData[] = [];\n      if (device && devices) {\n        device.neighbors.forEach((child) => {\n          const zhaDevice: ZHADevice | undefined = devices.get(child.ieee);\n          if (zhaDevice) {\n            outputDevices.push({\n              name: zhaDevice.user_given_name || zhaDevice.name,\n              id: zhaDevice.device_reg_id,\n              lqi: parseInt(child.lqi),\n            });\n          }\n        });\n      }\n      return outputDevices;\n    }\n  );\n\n  private _columns: DataTableColumnContainer = {\n    name: {\n      title: \"Name\",\n      sortable: true,\n      filterable: true,\n      direction: \"asc\",\n      grows: true,\n    },\n    lqi: {\n      title: \"LQI\",\n      sortable: true,\n      filterable: true,\n      type: \"numeric\",\n      width: \"75px\",\n    },\n  };\n\n  public showDialog(params: ZHADeviceChildrenDialogParams): void {\n    this._device = params.device;\n    this._fetchData();\n  }\n\n  public closeDialog(): void {\n    this._device = undefined;\n    this._devices = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._device) {\n      return html``;\n    }\n    return html`\n      <ha-dialog\n        hideActions\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(`ui.dialogs.zha_device_info.device_children`)\n        )}\n      >\n        ${!this._devices\n          ? html`<ha-circular-progress\n              alt=\"Loading\"\n              size=\"large\"\n              active\n            ></ha-circular-progress>`\n          : html`<ha-data-table\n              .hass=${this.hass}\n              .columns=${this._columns}\n              .data=${this._deviceChildren(this._device, this._devices)}\n              auto-height\n              .dir=${computeRTLDirection(this.hass)}\n              .searchLabel=${this.hass.localize(\n                \"ui.components.data-table.search\"\n              )}\n              .noDataText=${this.hass.localize(\n                \"ui.components.data-table.no-data\"\n              )}\n            ></ha-data-table>`}\n      </ha-dialog>\n    `;\n  }\n\n  private async _fetchData(): Promise<void> {\n    if (this._device && this.hass) {\n      const devices = await fetchDevices(this.hass!);\n      this._devices = new Map(\n        devices.map((device: ZHADevice) => [device.ieee, device])\n      );\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyleDialog;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zha-device-children\": DialogZHADeviceChildren;\n  }\n}\n"],"names":[],"sourceRoot":""}