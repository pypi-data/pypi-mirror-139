{"version":3,"file":"05ddd2ef.js","mappings":";;;;AAqDA;;AAMA;AACA;AACA;;;AAGA;AAGA;;;AAGA;AACA;AACA;;;;;AAKA;AA/BA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-grid-card-editor.ts"],"sourcesContent":["import { html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  boolean,\n  number,\n  object,\n  optional,\n  string,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport { GridCardConfig } from \"../../cards/types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { HuiStackCardEditor } from \"./hui-stack-card-editor\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    cards: array(any()),\n    title: optional(string()),\n    square: optional(boolean()),\n    columns: optional(number()),\n  })\n);\n\n@customElement(\"hui-grid-card-editor\")\nexport class HuiGridCardEditor extends HuiStackCardEditor {\n  public setConfig(config: Readonly<GridCardConfig>): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _columns(): number {\n    return this._config!.columns || 3;\n  }\n\n  get _square(): boolean {\n    return this._config!.square ?? true;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.grid.columns\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            type=\"number\"\n            .value=${this._columns}\n            .configValue=${\"columns\"}\n            @value-changed=${this._handleColumnsChanged}\n          ></paper-input>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.grid.square\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-switch\n              .checked=${this._square}\n              .configValue=${\"square\"}\n              @change=${this._handleSquareChanged}\n            ></ha-switch>\n          </ha-formfield>\n        </div>\n      </div>\n      ${super.render()}\n    `;\n  }\n\n  private _handleColumnsChanged(ev): void {\n    if (!this._config) {\n      return;\n    }\n    const value = Number(ev.target.value);\n    if (this._columns === value) {\n      return;\n    }\n    if (!ev.target.value) {\n      this._config = { ...this._config };\n      delete this._config.columns;\n    } else {\n      this._config = {\n        ...this._config,\n        columns: value,\n      };\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleSquareChanged(ev): void {\n    if (!this._config || this._square === ev.target.checked) {\n      return;\n    }\n\n    fireEvent(this, \"config-changed\", {\n      config: { ...this._config, square: ev.target.checked },\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-grid-card-editor\": HuiGridCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}