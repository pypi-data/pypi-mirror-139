Metadata-Version: 2.1
Name: ml-tracking-api
Version: 1.2.9
Summary: REST ML-AI API
Home-page: https://github.com/EimantasN/Equusight_BackEnd
Author: Eimantas Noreika
Author-email: noreika.eimantas@gmail.com
License: UNKNOWN
Keywords: OpenAPI,OpenAPI-Generator,REST ML-AI API
Platform: UNKNOWN
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: urllib3 (>=1.25.3)
Requires-Dist: python-dateutil

# ml_tracking-api
No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The `ml_tracking` package is automatically generated by the [OpenAPI Generator](https://openapi-generator.tech) project:

- API version: v1
- Package version: 1.2.5
- Build date: 2021-07-31T11:10:57.661Z[GMT]
- Build package: org.openapitools.codegen.languages.PythonClientCodegen

## Requirements.

Python >= 3.6

## Installation & Usage

This python library package is generated without supporting files like setup.py or requirements files

To be able to use it, you will need these dependencies in your own package that uses this library:

* urllib3 >= 1.25.3
* python-dateutil

## Getting Started

In your own code, to use this library to connect and interact with ml_tracking-api,
you can run the following:

```python

import time
import ml_tracking
from pprint import pprint
from ml_tracking.api import data_rows_api
from ml_tracking.model.create_data_row_command import CreateDataRowCommand
from ml_tracking.model.data_row_dto_paginated_list import DataRowDtoPaginatedList
from ml_tracking.model.update_data_row_command import UpdateDataRowCommand
# Defining the host is optional and defaults to http://localhost
# See configuration.py for a list of all supported configuration parameters.
configuration = ml_tracking.Configuration(
    host = "http://localhost"
)



# Enter a context with an instance of the API client
with ml_tracking.ApiClient(configuration) as api_client:
    # Create an instance of the API class
    api_instance = data_rows_api.DataRowsApi(api_client)
    page_number = 1 # int |  (optional)
page_size = 1 # int |  (optional)

    try:
        api_response = api_instance.api_data_rows_get(page_number=page_number, page_size=page_size)
        pprint(api_response)
    except ml_tracking.ApiException as e:
        print("Exception when calling DataRowsApi->api_data_rows_get: %s\n" % e)
```

## Documentation for API Endpoints

All URIs are relative to *http://localhost*

Class | Method | HTTP request | Description
------------ | ------------- | ------------- | -------------
*DataRowsApi* | [**api_data_rows_get**](ml_tracking/docs/DataRowsApi.md#api_data_rows_get) | **GET** /api/DataRows | 
*DataRowsApi* | [**api_data_rows_id_delete**](ml_tracking/docs/DataRowsApi.md#api_data_rows_id_delete) | **DELETE** /api/DataRows/{id} | 
*DataRowsApi* | [**api_data_rows_id_put**](ml_tracking/docs/DataRowsApi.md#api_data_rows_id_put) | **PUT** /api/DataRows/{id} | 
*DataRowsApi* | [**api_data_rows_limit_get**](ml_tracking/docs/DataRowsApi.md#api_data_rows_limit_get) | **GET** /api/DataRows/{limit} | 
*DataRowsApi* | [**api_data_rows_post**](ml_tracking/docs/DataRowsApi.md#api_data_rows_post) | **POST** /api/DataRows | 
*HostedServiceApi* | [**api_hosted_service_get**](ml_tracking/docs/HostedServiceApi.md#api_hosted_service_get) | **GET** /api/HostedService | 
*MlModelApi* | [**api_ml_model_after_epoch_post**](ml_tracking/docs/MlModelApi.md#api_ml_model_after_epoch_post) | **POST** /api/MlModel/AfterEpoch | 
*MlModelApi* | [**api_ml_model_iteration_post**](ml_tracking/docs/MlModelApi.md#api_ml_model_iteration_post) | **POST** /api/MlModel/Iteration | 
*MlModelApi* | [**api_ml_model_register_post**](ml_tracking/docs/MlModelApi.md#api_ml_model_register_post) | **POST** /api/MlModel/Register | 
*MlModelApi* | [**api_ml_model_save_path_session_id_get**](ml_tracking/docs/MlModelApi.md#api_ml_model_save_path_session_id_get) | **GET** /api/MlModel/SavePath/{sessionId} | 
*MlModelApi* | [**api_ml_model_save_script_post**](ml_tracking/docs/MlModelApi.md#api_ml_model_save_script_post) | **POST** /api/MlModel/SaveScript | 
*MlModelApi* | [**api_ml_model_update_status_post**](ml_tracking/docs/MlModelApi.md#api_ml_model_update_status_post) | **POST** /api/MlModel/UpdateStatus | 


## Documentation For Models

 - [CreateDataRowCommand](ml_tracking/docs/CreateDataRowCommand.md)
 - [DataRowDto](ml_tracking/docs/DataRowDto.md)
 - [DataRowDtoPaginatedList](ml_tracking/docs/DataRowDtoPaginatedList.md)
 - [EpochUpdateCommand](ml_tracking/docs/EpochUpdateCommand.md)
 - [HostedServiceDto](ml_tracking/docs/HostedServiceDto.md)
 - [IterationUpdateCommand](ml_tracking/docs/IterationUpdateCommand.md)
 - [RegisterModelRunCommand](ml_tracking/docs/RegisterModelRunCommand.md)
 - [SaveNotebookCodeCommand](ml_tracking/docs/SaveNotebookCodeCommand.md)
 - [StatusUpdateCommand](ml_tracking/docs/StatusUpdateCommand.md)
 - [UpdateDataRowCommand](ml_tracking/docs/UpdateDataRowCommand.md)


## Documentation For Authorization

 All endpoints do not require authorization.

## Author




## Notes for Large OpenAPI documents
If the OpenAPI document is large, imports in ml_tracking.apis and ml_tracking.models may fail with a
RecursionError indicating the maximum recursion limit has been exceeded. In that case, there are a couple of solutions:

Solution 1:
Use specific imports for apis and models like:
- `from ml_tracking.api.default_api import DefaultApi`
- `from ml_tracking.model.pet import Pet`

Solution 2:
Before importing the package, adjust the maximum recursion limit as shown below:
```
import sys
sys.setrecursionlimit(1500)
import ml_tracking
from ml_tracking.apis import *
from ml_tracking.models import *
```



