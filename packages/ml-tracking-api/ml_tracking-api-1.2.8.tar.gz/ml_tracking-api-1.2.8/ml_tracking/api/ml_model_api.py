"""
    REST ML-AI API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ml_tracking.api_client import ApiClient, Endpoint as _Endpoint
from ml_tracking.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ml_tracking.model.epoch_update_command import EpochUpdateCommand
from ml_tracking.model.iteration_update_command import IterationUpdateCommand
from ml_tracking.model.register_model_run_command import RegisterModelRunCommand
from ml_tracking.model.save_notebook_code_command import SaveNotebookCodeCommand
from ml_tracking.model.status_update_command import StatusUpdateCommand


class MlModelApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.ml_model_after_epoch_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/api/MlModel/AfterEpoch',
                'operation_id': 'ml_model_after_epoch',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'epoch_update_command',
                ],
                'required': [
                    'epoch_update_command',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epoch_update_command':
                        (EpochUpdateCommand,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'epoch_update_command': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.ml_model_iteration_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/api/MlModel/Iteration',
                'operation_id': 'ml_model_iteration',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'iteration_update_command',
                ],
                'required': [
                    'iteration_update_command',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'iteration_update_command':
                        (IterationUpdateCommand,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'iteration_update_command': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.ml_model_register_endpoint = _Endpoint(
            settings={
                'response_type': (int,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/api/MlModel/Register',
                'operation_id': 'ml_model_register',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'register_model_run_command',
                ],
                'required': [
                    'register_model_run_command',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'register_model_run_command':
                        (RegisterModelRunCommand,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'register_model_run_command': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.ml_model_save_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/api/MlModel/SavePath/{sessionId}',
                'operation_id': 'ml_model_save_path',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'session_id',
                ],
                'required': [
                    'session_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'session_id':
                        (int,),
                },
                'attribute_map': {
                    'session_id': 'sessionId',
                },
                'location_map': {
                    'session_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.ml_model_save_script_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/api/MlModel/SaveScript',
                'operation_id': 'ml_model_save_script',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'save_notebook_code_command',
                ],
                'required': [
                    'save_notebook_code_command',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'save_notebook_code_command':
                        (SaveNotebookCodeCommand,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'save_notebook_code_command': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.ml_model_update_status_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/api/MlModel/UpdateStatus',
                'operation_id': 'ml_model_update_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'status_update_command',
                ],
                'required': [
                    'status_update_command',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'status_update_command':
                        (StatusUpdateCommand,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'status_update_command': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def ml_model_after_epoch(
        self,
        epoch_update_command,
        **kwargs
    ):
        """ml_model_after_epoch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ml_model_after_epoch(epoch_update_command, async_req=True)
        >>> result = thread.get()

        Args:
            epoch_update_command (EpochUpdateCommand):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['epoch_update_command'] = \
            epoch_update_command
        return self.ml_model_after_epoch_endpoint.call_with_http_info(**kwargs)

    def ml_model_iteration(
        self,
        iteration_update_command,
        **kwargs
    ):
        """ml_model_iteration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ml_model_iteration(iteration_update_command, async_req=True)
        >>> result = thread.get()

        Args:
            iteration_update_command (IterationUpdateCommand):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['iteration_update_command'] = \
            iteration_update_command
        return self.ml_model_iteration_endpoint.call_with_http_info(**kwargs)

    def ml_model_register(
        self,
        register_model_run_command,
        **kwargs
    ):
        """ml_model_register  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ml_model_register(register_model_run_command, async_req=True)
        >>> result = thread.get()

        Args:
            register_model_run_command (RegisterModelRunCommand):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            int
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['register_model_run_command'] = \
            register_model_run_command
        return self.ml_model_register_endpoint.call_with_http_info(**kwargs)

    def ml_model_save_path(
        self,
        session_id,
        **kwargs
    ):
        """ml_model_save_path  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ml_model_save_path(session_id, async_req=True)
        >>> result = thread.get()

        Args:
            session_id (int):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['session_id'] = \
            session_id
        return self.ml_model_save_path_endpoint.call_with_http_info(**kwargs)

    def ml_model_save_script(
        self,
        save_notebook_code_command,
        **kwargs
    ):
        """ml_model_save_script  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ml_model_save_script(save_notebook_code_command, async_req=True)
        >>> result = thread.get()

        Args:
            save_notebook_code_command (SaveNotebookCodeCommand):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['save_notebook_code_command'] = \
            save_notebook_code_command
        return self.ml_model_save_script_endpoint.call_with_http_info(**kwargs)

    def ml_model_update_status(
        self,
        status_update_command,
        **kwargs
    ):
        """ml_model_update_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.ml_model_update_status(status_update_command, async_req=True)
        >>> result = thread.get()

        Args:
            status_update_command (StatusUpdateCommand):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['status_update_command'] = \
            status_update_command
        return self.ml_model_update_status_endpoint.call_with_http_info(**kwargs)

