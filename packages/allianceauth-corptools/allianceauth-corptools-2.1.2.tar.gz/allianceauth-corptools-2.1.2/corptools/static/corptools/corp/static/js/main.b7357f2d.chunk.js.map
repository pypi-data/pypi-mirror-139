{"version":3,"sources":["reportWebVitals.js","apis/Structures.js","components/BaseTable.js","components/EveImages.js","pages/Structures.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","a","axios","get","api","console","log","data","defaults","xsrfHeaderName","colourStyles","option","styles","color","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","textColumnFilter","count","length","className","value","onChange","e","target","undefined","placeholder","SelectColumnFilter","id","options","React","useMemo","Set","forEach","row","values","add","title","label","defaultValue","concat","map","o","i","defaultPropGetter","BaseTable","isLoading","error","columns","getRowProps","defaultColumn","Filter","filterTypes","text","rows","ids","filter","some","rowValue","name","toLowerCase","includes","useTable","initialState","pageSize","useFilters","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","page","prepareRow","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","Table","striped","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","canSort","isSorted","isSortedDesc","Glyphicon","glyph","canFilter","cells","cell","style","verticalAlign","getCellProps","ButtonToolbar","ButtonGroup","Button","bsStyle","onClick","disabled","active","SplitButton","onSelect","Number","MenuItem","eventKey","CorporationLogo","corporation_id","size","Image","src","TypeIcon","type_id","TimeAgo","addDefaultLocale","en","CorpStructures","useQuery","loadStructures","initialData","valueSort","rowA","rowB","columnId","b","Header","accessor","Cell","props","href","replace","disableSortBy","corporation_name","sortType","ReactTimeAgo","date","service","reduce","p","c","Label","Panel","Body","queryClient","QueryClient","ReactDOM","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.b7357f2d.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\n\nexport async function loadStructures() {\n  const api = await axios.get(`/audit/api/corp/structures`);\n  console.log(`get structures in api 1`);\n  return api.data;\n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useTable, useFilters, usePagination, useSortBy } from \"react-table\";\nimport Select from \"react-select\";\nimport { Bars } from \"@agney/react-loading\";\nimport {\n  ButtonToolbar,\n  ButtonGroup,\n  Glyphicon,\n  MenuItem,\n  SplitButton,\n  Table,\n} from \"react-bootstrap\";\nimport \"./BaseTable.css\";\n\nexport const colourStyles = {\n  option: (styles) => {\n    return {\n      ...styles,\n      color: \"black\",\n    };\n  },\n};\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  return <></>;\n}\n\nexport function textColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length;\n\n  return (\n    <input\n      className=\"form-control\"\n      value={filterValue || \"\"}\n      onChange={(e) => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  );\n}\n\n// This is a custom filter UI for selecting\n// a unique option from a list\nexport function SelectColumnFilter({\n  column: { setFilter, filterValue, preFilteredRows, id },\n}) {\n  // Calculate the options for filtering\n  // using the preFilteredRows\n  const options = React.useMemo(() => {\n    const options = new Set();\n    if (!preFilteredRows) {\n      return [];\n    }\n    preFilteredRows.forEach((row) => {\n      if (row.values[id] !== null) {\n        if (typeof row.values[id] === \"object\") {\n          options.add(row.values[id][\"name\"]);\n        } else {\n          options.add(row.values[id]);\n        }\n      }\n    });\n    return [...options.values()];\n  }, [id, preFilteredRows]);\n\n  // Render a multi-select box\n  return (\n    <Select\n      key={filterValue}\n      title={filterValue}\n      onChange={(e) => setFilter(e.value)}\n      value={{ label: filterValue || \"All\" }}\n      defaultValue={{ label: \"All\" }}\n      styles={colourStyles}\n      options={[{ id: -1, value: \"\", label: \"All\" }].concat(\n        options.map((o, i) => {\n          return { id: i, value: o, label: o };\n        })\n      )}\n    />\n  );\n}\n\nconst defaultPropGetter = () => ({});\n\nexport const BaseTable = ({\n  isLoading,\n  data,\n  error,\n  columns,\n  getRowProps = defaultPropGetter,\n}) => {\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  );\n\n  const filterTypes = React.useMemo(\n    () => ({\n      text: (rows, ids, filterValue) => {\n        return rows.filter((row) => {\n          return ids.some((id) => {\n            if (!filterValue) {\n              return true;\n            } else {\n              let rowValue = row.values[id];\n              if (typeof rowValue === \"object\") {\n                rowValue = rowValue.name;\n              }\n              return rowValue\n                ? rowValue.toLowerCase().includes(filterValue.toLowerCase())\n                : false;\n            }\n          });\n        });\n      },\n    }),\n    []\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    prepareRow,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n      initialState: { pageSize: 25 },\n    },\n    useFilters,\n    useSortBy,\n    usePagination\n  );\n\n  if (isLoading)\n    return (\n      <div className=\"col-xs-12 text-center\">\n        <Bars className=\"spinner-size\" />\n      </div>\n    );\n\n  if (error) return <div></div>;\n\n  return (\n    <>\n      <Table striped>\n        <thead {...getTableProps()}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span className=\"pull-right\">\n                    {column.canSort ? (\n                      column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <Glyphicon glyph=\"sort-by-attributes-alt\" />\n                        ) : (\n                          <Glyphicon glyph=\"sort-by-attributes\" />\n                        )\n                      ) : (\n                        <Glyphicon glyph=\"sort\" />\n                      )\n                    ) : (\n                      \"\"\n                    )}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps(getRowProps(row))}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td\n                      style={{ verticalAlign: \"middle\" }}\n                      {...cell.getCellProps()}\n                    >\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n      <div className=\"pagination pull-right\">\n        <ButtonToolbar>\n          <ButtonGroup>\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(0)}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"step-backward\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => previousPage()}\n              disabled={!canPreviousPage}\n            >\n              <Glyphicon glyph=\"triangle-left\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => nextPage()}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"triangle-right\" />\n            </Button>{\" \"}\n            <Button\n              bsStyle=\"success\"\n              onClick={() => gotoPage(pageCount - 1)}\n              disabled={!canNextPage}\n            >\n              <Glyphicon glyph=\"step-forward\" />\n            </Button>\n          </ButtonGroup>\n          <ButtonGroup>\n            <Button active bsStyle=\"success\">\n              {\"Page Size:\"}\n            </Button>{\" \"}\n            <SplitButton\n              bsStyle=\"success\"\n              title={pageSize}\n              onSelect={(e) => {\n                setPageSize(Number(e));\n              }}\n            >\n              {[25, 50, 100, 1000].map((pageSize) => (\n                <MenuItem eventKey={pageSize} value={pageSize}>\n                  Show {pageSize}\n                </MenuItem>\n              ))}\n            </SplitButton>\n          </ButtonGroup>\n        </ButtonToolbar>\n      </div>\n      <div className=\"pagination pull-left\">\n        <ButtonGroup>\n          <Button active bsStyle=\"info\">\n            {\n              <>\n                Page{\" \"}\n                <strong>\n                  {pageIndex + 1} of {pageOptions.length}\n                </strong>\n              </>\n            }\n          </Button>{\" \"}\n        </ButtonGroup>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { Image } from \"react-bootstrap\";\n\nexport const CharacterPortrait = ({ character_id, size = 256 }) => {\n  return (\n    <Image\n      src={`https://images.evetech.net/characters/${character_id}/portrait?size=${size}`}\n    />\n  );\n};\n\nexport const CorporationLogo = ({ corporation_id, size = 256 }) => {\n  return (\n    <Image\n      src={`https://images.evetech.net/corporations/${corporation_id}/logo?size=${size}`}\n    />\n  );\n};\n\nexport const AllianceLogo = ({ alliance_id, size = 256 }) => {\n  return (\n    <Image\n      src={`https://images.evetech.net/alliances/${alliance_id}/logo?size=${size}`}\n    />\n  );\n};\n\nexport const TypeIcon = ({ type_id, size = 64 }) => {\n  return (\n    <Image\n      className=\"img-circle\"\n      src={`https://images.evetech.net/types/${type_id}/icon?size=${size}`}\n    />\n  );\n};\n","import React from \"react\";\nimport { Panel, Label } from \"react-bootstrap\";\nimport { useQuery } from \"react-query\";\nimport { loadStructures } from \"../apis/Structures\";\nimport Select from \"react-select\";\nimport {\n  BaseTable,\n  SelectColumnFilter,\n  textColumnFilter,\n  colourStyles,\n} from \"../components/BaseTable\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport { TypeIcon } from \"../components/EveImages\";\nimport TimeAgo from \"javascript-time-ago\";\nimport en from \"javascript-time-ago/locale/en.json\";\nimport { CorporationLogo } from \"../components/EveImages\";\n\nTimeAgo.addDefaultLocale(en);\n\nexport const CorpStructures = () => {\n  const { isLoading, error, data } = useQuery(\n    [\"stuctures\"],\n    () => loadStructures(),\n    {\n      initialData: [],\n    }\n  );\n\n  const valueSort = React.useMemo(\n    () => (rowA, rowB, columnId) => {\n      const a = rowA.values[columnId];\n      const b = rowB.values[columnId];\n      if ((a === null) | (b === null)) {\n        return 1; //null at end\n      }\n      return a > b ? 1 : -1;\n    },\n    []\n  );\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"System\",\n        accessor: \"location\",\n        Filter: SelectColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <a\n            href={\n              \"https://evemaps.dotlan.net/system/\" +\n              props.value.name.replace(\" \", \"_\")\n            }\n          >\n            {props.value.name}\n          </a>\n        ),\n      },\n      {\n        Header: \"Structure\",\n        accessor: \"name\",\n        Filter: textColumnFilter,\n        filter: \"text\",\n      },\n      {\n        Header: \"Type\",\n        accessor: \"type\",\n        disableSortBy: true,\n        Filter: SelectColumnFilter,\n        filter: \"text\",\n        Cell: (props) => (\n          <div className=\"flex-image-text\">\n            <div className=\"pull-left\">\n              <TypeIcon type_id={props.value.id}></TypeIcon>\n            </div>\n            <div className=\"pull-left\">{props.value.name}</div>\n          </div>\n        ),\n      },\n      {\n        Header: \"Owner\",\n        accessor: \"owner\",\n        disableSortBy: true,\n        Filter: ({\n          column: { setFilter, filterValue, preFilteredRows, id },\n        }) => {\n          const options = React.useMemo(() => {\n            const options = new Set();\n            if (!preFilteredRows) {\n              return [];\n            }\n            preFilteredRows.forEach((row) => {\n              if (row.values[id] !== null) {\n                options.add(row.values[id].corporation_name);\n              }\n            });\n            return [...options.values()];\n          }, [id, preFilteredRows]);\n          return (\n            <Select\n              key={filterValue}\n              title={filterValue}\n              onChange={(e) => setFilter(e.value)}\n              value={{ label: filterValue || \"All\" }}\n              defaultValue={{ label: \"All\" }}\n              styles={colourStyles}\n              options={[{ id: -1, value: \"\", label: \"All\" }].concat(\n                options.map((o, i) => {\n                  return { id: i, value: o, label: o };\n                })\n              )}\n            />\n          );\n        },\n        filter: (rows, ids, filterValue) => {\n          return rows.filter((row) => {\n            return ids.some((id) => {\n              if (!filterValue) {\n                return true;\n              } else {\n                let rowValue = row.values[id].corporation_name;\n                return rowValue\n                  ? rowValue.toLowerCase().includes(filterValue.toLowerCase())\n                  : false;\n              }\n            });\n          });\n        },\n        Cell: (props) => (\n          <div className=\"flex-image-text\">\n            <div className=\"pull-left\">\n              <CorporationLogo\n                corporation_id={props.value.corporation_id}\n                size={32}\n              ></CorporationLogo>\n            </div>\n            <div className=\"pull-left\">{props.value.corporation_name}</div>\n          </div>\n        ),\n      },\n      {\n        Header: \"Fuel Expiry\",\n        accessor: \"fuel_expiry\",\n        sortType: valueSort,\n        Cell: (props) => (\n          <div>{props.value ? <ReactTimeAgo date={props.value} /> : \"\"}</div>\n        ),\n      },\n      {\n        Header: \"State\",\n        accessor: \"state\",\n        Filter: SelectColumnFilter,\n        disableSortBy: true,\n        filter: \"text\",\n      },\n      {\n        Header: \"Services\",\n        accessor: \"services\",\n        disableSortBy: true,\n        Filter: ({\n          column: { setFilter, filterValue, preFilteredRows, id },\n        }) => {\n          const options = React.useMemo(() => {\n            const options = new Set();\n            if (!preFilteredRows) {\n              return [];\n            }\n            preFilteredRows.forEach((row) => {\n              if (row.values[id] !== null) {\n                row.values[id].forEach((service) => {\n                  options.add(service.name);\n                });\n              }\n            });\n            return [...options.values()];\n          }, [id, preFilteredRows]);\n          return (\n            <Select\n              key={filterValue}\n              title={filterValue}\n              onChange={(e) => setFilter(e.value)}\n              value={{ label: filterValue || \"All\" }}\n              defaultValue={{ label: \"All\" }}\n              styles={colourStyles}\n              options={[{ id: -1, value: \"\", label: \"All\" }].concat(\n                options.map((o, i) => {\n                  return { id: i, value: o, label: o };\n                })\n              )}\n            />\n          );\n        },\n        filter: (rows, ids, filterValue) => {\n          return rows.filter((row) => {\n            return ids.some((id) => {\n              if (!filterValue) {\n                return true;\n              } else {\n                let rowValue = row.values[id].reduce((p, c) => {\n                  return p + \"  \" + c.name;\n                }, \"\");\n                return rowValue\n                  ? rowValue.toLowerCase().includes(filterValue.toLowerCase())\n                  : false;\n              }\n            });\n          });\n        },\n        Cell: (props) =>\n          props.value ? (\n            <div className=\"text-center\">\n              {props.value.map((service) => {\n                return (\n                  <Label\n                    className=\"padded-label\"\n                    bsStyle={service.state === \"online\" ? \"primary\" : \"danger\"}\n                  >\n                    {service.name}\n                  </Label>\n                );\n              })}\n            </div>\n          ) : (\n            <></>\n          ),\n      },\n    ],\n    [valueSort]\n  );\n\n  return (\n    <Panel.Body>\n      <BaseTable {...{ isLoading, data, columns, error }} />\n    </Panel.Body>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CorpStructures } from \"./pages/Structures\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { Panel } from \"react-bootstrap\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <h1 className=\"text-center\">Structure Browser</h1>\n      <Panel bsStyle=\"default\">\n        <Panel.Body>\n          <CorpStructures />\n        </Panel.Body>\n      </Panel>\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}